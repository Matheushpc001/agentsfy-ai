=============================================
 DUMP DO PROJETO: React Project
 GERADO EM: Thu Aug  7 20:27:24 UTC 2025
=============================================\n
================================================================================
ARQUIVO: ./vite.config.ts
================================================================================\n
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================================================
ARQUIVO: ./supabase/functions/evolution-webhook/index.ts
================================================================================\n
// Vers√£o 1.1 - For√ßando re-deploy para limpar cache
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.0.0";
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};
// Handler principal
async function handler(req) {
  // --- NOVO LOG DE DIAGN√ìSTICO ---
  console.log("‚úÖ‚úÖ‚úÖ DEPLOY V2 - JWT Desativado - INVOCADO ‚úÖ‚úÖ‚úÖ");
  console.log(`[${new Date().toISOString()}] üöÄ Webhook Handler INVOCADO. M√©todo: ${req.method}. URL: ${req.url}`);
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders
    });
  }
  try {
    const payload = await req.json();
    console.log('üì® Webhook payload received:', JSON.stringify(payload, null, 2));
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Supabase environment variables not configured');
    }
    const supabase = createClient(supabaseUrl, supabaseKey);
    const { event } = payload;
    console.log('üîç Processing webhook event:', event);
    switch(event){
      case 'connection.update':
      case 'CONNECTION_UPDATE':
        await handleConnectionUpdate(supabase, payload);
        break;
      case 'messages.upsert':
      case 'MESSAGES_UPSERT':
        await handleMessageUpsert(supabase, payload);
        break;
      case 'qrcode.updated':
      case 'QRCODE_UPDATED':
        await handleQRCodeUpdate(supabase, payload);
        break;
      default:
        console.log(`‚ÑπÔ∏è Evento n√£o tratado recebido: ${event}`);
    }
    return new Response(JSON.stringify({
      success: true,
      message: 'Webhook processed successfully'
    }), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('‚ùå Webhook processing error:', error);
    return new Response(JSON.stringify({
      error: 'Webhook processing failed',
      details: error.message
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
}
// Inicia o servidor
console.log(`[${new Date().toISOString()}] üì¢ Servidor do Webhook est√° sendo inicializado e escutando...`);
// MODIFICA√á√ÉO APLICADA AQUI:
serve(handler, {
  verifyJWT: false,
  onListen: ({ port, hostname })=>{
    console.log(`üöÄ Webhook server listening on http://${hostname}:${port}`);
  }
});
// --- FUN√á√ïES AUXILIARES ---
async function handleConnectionUpdate(supabase, payload) {
  console.log('üîÑ Processing connection update:', payload);
  const instanceName = payload.instance;
  const connectionState = payload.data?.state || payload.data?.connectionStatus;
  if (!instanceName) {
    console.log('‚ö†Ô∏è No instance name found in connection update');
    return;
  }
  console.log('üì± Instance:', instanceName, 'New state:', connectionState);
  let newStatus = 'disconnected';
  switch(connectionState){
    case 'open':
    case 'connected':
      newStatus = 'connected';
      console.log('‚úÖ WhatsApp CONNECTED detected via webhook!');
      break;
    case 'connecting':
    case 'qr':
      newStatus = 'qr_ready';
      console.log('üîÑ WhatsApp waiting for QR scan');
      break;
    case 'close':
    case 'closed':
    case 'disconnected':
      newStatus = 'disconnected';
      console.log('‚ùå WhatsApp DISCONNECTED');
      break;
    default:
      console.log('‚ùì Unknown connection state:', connectionState);
      return;
  }
  const updateData = {
    status: newStatus,
    updated_at: new Date().toISOString()
  };
  if (newStatus === 'connected') {
    updateData.qr_code = null;
    updateData.qr_code_expires_at = null;
  }
  const { data, error } = await supabase.from('evolution_api_configs').update(updateData).eq('instance_name', instanceName).select();
  if (error) {
    console.error('‚ùå Error updating config status:', error);
    return;
  }
  if (data && data.length > 0) {
    console.log('‚úÖ Config updated successfully:', data[0].id, 'Status:', newStatus);
    if (newStatus === 'connected') {
      await notifyConnectionSuccess(supabase, data[0]);
    }
  } else {
    console.log('‚ö†Ô∏è No config found for instance:', instanceName);
  }
}
async function handleMessageUpsert(supabase: any, payload: any) {
    const instanceName = payload.instance;
    const messageData = payload.data;
    const remoteJid = messageData?.key?.remoteJid;

    if (remoteJid && remoteJid.endsWith('@g.us')) {
        console.log('üó£Ô∏è Mensagem de grupo ignorada.');
        return;
    }

    const { data: config } = await supabase.from('evolution_api_configs').select('id').eq('instance_name', instanceName).single();
    if (!config) return;

    const contactNumber = remoteJid?.replace('@s.whatsapp.net', '');
    if (!contactNumber) return;
    
    // A Evolution V2 envia o texto transcrito na propriedade 'speechToText'
    const messageContent = messageData.message?.speechToText || messageData.message?.conversation || messageData.message?.extendedTextMessage?.text || "[M√≠dia n√£o suportada]";
    const messageType = messageData.message?.audioMessage ? 'audio' : 'text';

    const { data: conversation } = await supabase.from('whatsapp_conversations').select('id').eq('evolution_config_id', config.id).eq('contact_number', contactNumber).single();
    let conversationId = conversation?.id;

    if (!conversation) {
        const { data: newConversation } = await supabase.from('whatsapp_conversations').insert({ evolution_config_id: config.id, contact_number: contactNumber, contact_name: contactNumber }).select('id').single();
        conversationId = newConversation?.id;
    }
    
    if (!conversationId) return;

    await supabase.from('whatsapp_messages').insert({
        conversation_id: conversationId,
        message_id: messageData.key?.id,
        content: messageContent,
        message_type: messageType,
        sender_type: messageData.key?.fromMe ? 'agent' : 'user',
        is_from_me: messageData.key?.fromMe || false,
    });
    console.log(`‚úÖ Mensagem de ${contactNumber} salva com sucesso.`);
}
async function handleQRCodeUpdate(supabase, payload) {
  console.log('üì± Processing QR code update:', payload);
  const instanceName = payload.instance;
  const qrCode = payload.data?.qrcode || payload.data?.qr;
  if (!instanceName || !qrCode) {
    console.log('‚ö†Ô∏è Incomplete QR code data');
    return;
  }
  const { error } = await supabase.from('evolution_api_configs').update({
    qr_code: qrCode,
    qr_code_expires_at: new Date(Date.now() + 2 * 60 * 1000).toISOString(),
    status: 'qr_ready',
    updated_at: new Date().toISOString()
  }).eq('instance_name', instanceName);
  if (error) {
    console.error('‚ùå Error updating QR code:', error);
  } else {
    console.log('‚úÖ QR code updated successfully for:', instanceName);
  }
}
async function findOrCreateConversation(supabase, configId, contactNumber) {
  const { data: existing, error: findError } = await supabase.from('whatsapp_conversations').select('*').eq('evolution_config_id', configId).eq('contact_number', contactNumber).single();
  if (!findError && existing) {
    return existing;
  }
  const { data: newConversation, error: createError } = await supabase.from('whatsapp_conversations').insert([
    {
      evolution_config_id: configId,
      contact_number: contactNumber,
      contact_name: contactNumber,
      is_active: true,
      last_message_at: new Date().toISOString()
    }
  ]).select().single();
  if (createError) {
    console.error('‚ùå Error creating conversation:', createError);
    throw createError;
  }
  return newConversation;
}
async function checkAutoResponse(supabase: any, configId: string, conversationId: string, messageContent: string) {
  console.log('ü§ñ PASSO 1: Iniciando checkAutoResponse...');
  
  try {
    // Encontrar o agente de IA ativo para esta inst√¢ncia
    const { data: aiAgent, error: agentError } = await supabase
      .from('ai_whatsapp_agents')
      .select('*')
      .eq('evolution_config_id', configId)
      .eq('is_active', true)
      .eq('auto_response', true)
      .single();

    if (agentError || !aiAgent) {
      console.log('‚ÑπÔ∏è PASSO 2: Nenhum agente de IA ativo encontrado. Finalizando auto-resposta.', { agentError });
      return;
    }
    console.log(`ü§ñ PASSO 2: Agente de IA encontrado: ${aiAgent.id}`);

    // Buscar o hist√≥rico da conversa para dar contexto
    console.log('üìö PASSO 3: Buscando hist√≥rico da conversa...');
    const { data: previousMessages, error: historyError } = await supabase
      .from('whatsapp_messages')
      .select('content, sender_type')
      .eq('conversation_id', conversationId)
      .order('timestamp', { ascending: false })
      .limit(10);

    if (historyError) {
      console.error('‚ùå Erro no PASSO 3 ao buscar hist√≥rico:', historyError);
    }
    console.log(`üìö PASSO 3: Hist√≥rico encontrado: ${previousMessages?.length || 0} mensagens.`);
    
    // Montar o corpo da requisi√ß√£o para a fun√ß√£o de IA
    const invokeBody = {
      agentId: aiAgent.id,
      userMessage: messageContent,
      previousMessages: previousMessages || [],
      systemPrompt: aiAgent.system_prompt,
      model: aiAgent.model,
      openaiApiKey: aiAgent.openai_api_key,
    };

    // Invocar a fun√ß√£o de IA para gerar a resposta
    console.log('üöÄ PASSO 4: Invocando a fun√ß√£o generate-ai-response...');
    const { data: aiFunctionResponse, error: aiFunctionError } = await supabase.functions.invoke('openai-handler', {
      body: {
        // ##############################################
        // ### ADICIONE A ACTION AQUI                 ###
        // ##############################################
        action: 'generate', // Especifica que queremos gerar texto
        agentId: aiAgent.id,
        userMessage: messageContent,
        previousMessages: previousMessages || [],
        systemPrompt: aiAgent.system_prompt,
        model: aiAgent.model,
        openaiApiKey: aiAgent.openai_api_key,
      }
    });

    if (aiFunctionError) {
      console.error('‚ùå Erro no PASSO 4 ao invocar a fun√ß√£o de IA:', aiFunctionError);
      throw new Error(`Erro ao invocar a fun√ß√£o de IA: ${aiFunctionError.message}`);
    }
    console.log('‚úÖ PASSO 4: Fun√ß√£o de IA invocada com sucesso.');

    const { aiResponse, tokensUsed, modelUsed } = aiFunctionResponse;
    
    if (!aiResponse) {
      console.error('‚ùå Erro no PASSO 5: A fun√ß√£o de IA n√£o retornou uma resposta v√°lida.');
      throw new Error("A fun√ß√£o de IA n√£o retornou uma resposta v√°lida.");
    }
    console.log('‚úÖ PASSO 5: Resposta da IA recebida:', aiResponse.substring(0, 50) + "...");

    // Salvar o log da intera√ß√£o com a IA
    console.log('üíæ PASSO 6: Salvando log da intera√ß√£o...');
    const { error: logInsertError } = await supabase.from('ai_interaction_logs').insert({
      agent_id: aiAgent.id,
      conversation_id: conversationId,
      user_message: messageContent,
      ai_response: aiResponse,
      tokens_used: tokensUsed,
      model_used: modelUsed
    });

    if (logInsertError) {
      console.error('‚ùå Erro no PASSO 6 ao salvar log:', logInsertError);
    } else {
      console.log('‚úÖ PASSO 6: Log da intera√ß√£o salvo com sucesso.');
    }

    // Buscar o n√∫mero de telefone para enviar a resposta
    console.log('üìû PASSO 7: Buscando n√∫mero do contato...');
    const { data: conversationData, error: conversationError } = await supabase
        .from('whatsapp_conversations')
        .select('contact_number')
        .eq('id', conversationId)
        .single();

    if (conversationError || !conversationData?.contact_number) {
        console.error('‚ùå Erro no PASSO 7 ao buscar n√∫mero do contato:', conversationError);
        throw new Error("N√£o foi poss√≠vel encontrar o n√∫mero do contato para responder.");
    }
    const contactNumber = conversationData.contact_number;
    console.log(`üìû PASSO 7: N√∫mero do contato encontrado: ${contactNumber}`);

    // Invocar o api-manager para ENVIAR a resposta para o WhatsApp
    console.log('üì§ PASSO 8: Invocando evolution-api-manager para enviar a resposta...');
    const { error: sendMessageError } = await supabase.functions.invoke('evolution-api-manager', {
      body: {
        action: 'send_message',
        config_id: configId,
        phone_number: contactNumber,
        message: aiResponse
      }
    });

    if (sendMessageError) {
      console.error('‚ùå Erro no PASSO 8 ao invocar o envio de mensagem:', sendMessageError);
      throw new Error(`Erro ao enviar mensagem de resposta: ${sendMessageError.message}`);
    }

    console.log('‚úÖ PASSO 8: Resposta da IA enviada com sucesso para o usu√°rio.');

  } catch (error) {
    console.error('‚ùå Erro GERAL no fluxo de auto-resposta da IA:', error);
  }
}
async function notifyConnectionSuccess(supabase, config) {
  console.log('üéâ Notifying connection success for config:', config.id);
  const { error: agentError } = await supabase.from('ai_whatsapp_agents').update({
    is_active: true,
    updated_at: new Date().toISOString()
  }).eq('evolution_config_id', config.id);
  if (agentError) {
    console.error('‚ùå Error updating related agents:', agentError);
  } else {
    console.log('‚úÖ Related agents updated successfully');
  }
}



================================================================================
ARQUIVO: ./supabase/functions/openai-handler/index.ts
================================================================================\n
// Vers√£o 1.2 - Corre√ß√£o para transcri√ß√£o de √°udio WhatsApp
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Fun√ß√£o aprimorada para transcrever √°udio
async function handleTranscribe(openaiApiKey: string, audioUrl: string, mimetype: string) {
  if (!audioUrl) {
    throw new Error("URL do √°udio n√£o fornecida.");
  }
  
  console.log(`üé§ Iniciando transcri√ß√£o para a URL: ${audioUrl}`);
  console.log(`üìã Mimetype recebido: ${mimetype}`);

  try {
    // 1. Baixar o arquivo de √°udio
    const audioResponse = await fetch(audioUrl);
    if (!audioResponse.ok) {
      throw new Error(`Falha ao baixar o √°udio: ${audioResponse.status} ${audioResponse.statusText}`);
    }
    
    const audioArrayBuffer = await audioResponse.arrayBuffer();
    const audioBlob = new Blob([audioArrayBuffer]);
    
    console.log(`üì¶ √Åudio baixado. Tamanho: ${audioBlob.size} bytes`);

    // 2. Determinar a extens√£o correta do arquivo
    let extension = 'ogg'; // Padr√£o para √°udios do WhatsApp
    let finalMimetype = mimetype || 'audio/ogg';
    
    // WhatsApp geralmente envia audio/ogg; codecs=opus
    if (mimetype) {
      if (mimetype.includes('opus') || mimetype.includes('ogg')) {
        extension = 'ogg';
        finalMimetype = 'audio/ogg';
      } else if (mimetype.includes('mp4')) {
        extension = 'mp4';
        finalMimetype = 'audio/mp4';
      } else if (mimetype.includes('mpeg') || mimetype.includes('mp3')) {
        extension = 'mp3';
        finalMimetype = 'audio/mpeg';
      } else if (mimetype.includes('webm')) {
        extension = 'webm';
        finalMimetype = 'audio/webm';
      }
    }
    
    const fileName = `audio.${extension}`;
    console.log(`üìù Arquivo preparado: ${fileName} com mimetype: ${finalMimetype}`);

    // 3. Criar o FormData corretamente
    const formData = new FormData();
    
    // Criar um File object com o mimetype correto
    const audioFile = new File([audioBlob], fileName, { type: finalMimetype });
    
    formData.append('file', audioFile);
    formData.append('model', 'whisper-1');
    formData.append('response_format', 'text');
    formData.append('language', 'pt'); // Adicionar idioma portugu√™s para melhor precis√£o

    // 4. Chamar a API Whisper
    console.log('üöÄ Enviando para API Whisper...');
    const transcribeResponse = await fetch('https://api.openai.com/v1/audio/transcriptions', {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${openaiApiKey}`,
      },
      body: formData,
    });

    if (!transcribeResponse.ok) {
      const errorText = await transcribeResponse.text();
      console.error('‚ùå Erro da API Whisper:', errorText);
      
      // Se o erro for de formato, tentar converter o √°udio
      if (errorText.includes('Invalid file format')) {
        console.log('‚ö†Ô∏è Formato n√£o suportado, tentando convers√£o alternativa...');
        // Aqui voc√™ poderia implementar uma convers√£o usando FFmpeg ou outra biblioteca
        throw new Error(`Formato de √°udio n√£o suportado: ${mimetype}. O √°udio precisa ser convertido.`);
      }
      
      throw new Error(`Erro na API Whisper: ${transcribeResponse.status} - ${errorText}`);
    }

    const transcribedText = await transcribeResponse.text();
    console.log(`‚úÖ Transcri√ß√£o conclu√≠da com sucesso`);
    console.log(`üìù Texto transcrito: "${transcribedText.substring(0, 100)}..."`);
    
    return transcribedText;
    
  } catch (error) {
    console.error('‚ùå Erro durante a transcri√ß√£o:', error);
    throw error;
  }
}

// Fun√ß√£o para gerar resposta de texto (mantida como estava)
async function handleGenerate(openaiApiKey: string, payload: any) {
    const {
      agentId,
      userMessage,
      previousMessages,
      systemPrompt,
      model,
    } = payload;

    console.log(`ü§ñ Gerando resposta de IA para o agente: ${agentId}`);
    
    const messages = [];
    messages.push({ role: 'system', content: systemPrompt || 'Voc√™ √© um assistente prestativo.' });

    if (previousMessages && previousMessages.length > 0) {
      const contextMessages = previousMessages.slice(-10).map((msg: any) => ({
        role: msg.sender_type === 'agent' ? 'assistant' : 'user',
        content: msg.content
      }));
      messages.push(...contextMessages);
    }
    messages.push({ role: 'user', content: userMessage });

    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: model || 'gpt-4o-mini',
        messages: messages,
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!openAIResponse.ok) {
        const errorData = await openAIResponse.text();
        throw new Error(`Erro da API OpenAI: ${openAIResponse.status} - ${errorData}`);
    }

    const openAIData = await openAIResponse.json();
    const aiResponseContent = openAIData.choices[0]?.message?.content;
    
    if (!aiResponseContent) {
        throw new Error('A API da OpenAI n√£o retornou uma resposta.');
    }

    return {
        aiResponse: aiResponseContent,
        tokensUsed: openAIData.usage?.total_tokens || 0,
        modelUsed: model || 'gpt-4o-mini'
    };
}

// Servidor principal
serve(async (req) => {
  // CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const payload = await req.json();
    const { action, openaiApiKey, ...params } = payload;
    
    console.log(`üìã A√ß√£o recebida: ${action}`);
    
    if (!openaiApiKey || !openaiApiKey.startsWith('sk-')) {
      throw new Error('Chave da API OpenAI inv√°lida ou n√£o fornecida.');
    }

    let responseData;
    
    switch (action) {
      case 'transcribe':
        const transcribedText = await handleTranscribe(
          openaiApiKey, 
          params.audioUrl, 
          params.mimetype
        );
        responseData = { transcribedText };
        break;
      
      case 'generate':
        responseData = await handleGenerate(openaiApiKey, params);
        break;

      default:
        throw new Error(`A√ß√£o desconhecida: ${action}`);
    }

    return new Response(JSON.stringify(responseData), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    console.error('‚ùå Erro na fun√ß√£o openai-handler:', error);
    
    // Resposta de erro mais detalhada
    const errorResponse = {
      error: error.message,
      details: error.stack,
      timestamp: new Date().toISOString()
    };
    
    return new Response(JSON.stringify(errorResponse), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});


================================================================================
ARQUIVO: ./supabase/functions/evolution-api-manager/index.ts
================================================================================\n
// ARQUIVO: supabase/functions/evolution-api-manager/index.ts

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.0.0"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { action, ...params } = await req.json();
    console.log('Evolution API Manager - Action:', action, 'Params:', params);

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Supabase environment variables not configured');
    }
    const supabase = createClient(supabaseUrl, supabaseKey);

    switch (action) {
      // A√ß√µes Originais
      case 'create_instance':
        return await handleCreateInstance(supabase, params);
      case 'connect_instance':
        return await handleConnectInstance(supabase, params);
      case 'check_status':
        return await handleCheckStatus(supabase, params);
      case 'disconnect_instance':
        return await handleDisconnectInstance(supabase, params);
      case 'delete_instance':
        return await handleDeleteInstance(supabase, params);
      case 'send_message':
        return await handleSendMessage(supabase, params);
      case 'test_connection':
        return await handleTestConnection(params);
      case 'force_status_sync':
        return await handleForceStatusSync(supabase, params);
      
      // ### NOVAS A√á√ïES PARA IA NATIVA DA EVOLUTION V2 ###
      case 'openai_set_creds':
        return await handleOpenAISetCreds(supabase, params);
      case 'openai_create_bot':
        return await handleOpenAICreateBot(supabase, params);
      case 'openai_set_defaults':
        return await handleOpenAISetDefaults(supabase, params);

      default:
        return new Response(JSON.stringify({ error: 'A√ß√£o n√£o reconhecida' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
  } catch (error) {
    console.error('Erro no Evolution API Manager:', error);
    return new Response(JSON.stringify({ error: error.message || 'Erro interno do servidor', details: error.toString() }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
  }
});

// --- FUN√á√ïES DE AJUDA ---
async function getGlobalConfigForInstance(supabase: any, instanceName: string) {
    const { data: config, error } = await supabase
      .from('evolution_api_configs')
      .select(`instance_name, evolution_global_configs (*)`)
      .eq('instance_name', instanceName)
      .single();

    if (error || !config || !config.evolution_global_configs) {
        throw new Error(`Configura√ß√£o global n√£o encontrada para a inst√¢ncia ${instanceName}. Erro: ${error?.message}`);
    }
    return config.evolution_global_configs;
}

// --- FUN√á√ïES DE A√á√ÉO (EXISTENTES) ---
// (As fun√ß√µes handleCreateInstance, handleConnectInstance, handleCheckStatus, etc., permanecem aqui sem altera√ß√µes)
// ... (c√≥digo anterior omitido por brevidade, ele n√£o muda)

async function handleCreateInstance(supabase: any, params: any) {
  const { franchisee_id, instance_name, agent_id } = params;
  
  console.log('Creating instance for franchisee:', franchisee_id, 'with name:', instance_name);
  
  try {
    if (!franchisee_id || !instance_name) {
      throw new Error('Par√¢metros obrigat√≥rios ausentes: franchisee_id e instance_name');
    }

    // Buscar configura√ß√£o global ativa
    const { data: globalConfig, error: globalError } = await supabase
      .from('evolution_global_configs')
      .select('*')
      .eq('is_active', true)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (globalError || !globalConfig) {
      console.error('‚ùå Erro ao buscar configura√ß√£o global ou nenhuma ativa encontrada:', globalError);
      throw new Error('Nenhuma configura√ß√£o global da EvolutionAPI ativa foi encontrada.');
    }
    
    console.log('‚úÖ Usando configura√ß√£o global:', globalConfig.name, 'URL:', globalConfig.api_url);

    // Verificar se a URL da API √© v√°lida
    if (!globalConfig.api_url || !globalConfig.api_key) {
      throw new Error('Configura√ß√£o global inv√°lida: URL ou chave da API ausente');
    }

    // Criar configura√ß√£o local primeiro
    const configData = {
      franchisee_id,
      instance_name,
      global_config_id: globalConfig.id,
      status: 'disconnected',
      webhook_url: `${Deno.env.get('SUPABASE_URL')}/functions/v1/evolution-webhook`
    };

    console.log('Inserting config with data:', configData);

    const { data: newConfig, error: configError } = await supabase
      .from('evolution_api_configs')
      .insert([configData])
      .select()
      .single();

    if (configError) {
      console.error('‚ùå Erro ao criar configura√ß√£o local no DB:', configError);
      throw new Error(`Erro ao criar configura√ß√£o: ${configError.message}`);
    }
    
    console.log('‚úÖ Config created in database:', newConfig.id);

    // Tentar criar inst√¢ncia na EvolutionAPI
    const createPayload = {
      instanceName: instance_name,
      integration: 'WHATSAPP-BAILEYS',
      webhook: {
        url: configData.webhook_url,
        enabled: true,
        webhook_by_events: false,
        events: ['APPLICATION_STARTUP', 'QRCODE_UPDATED', 'CONNECTION_UPDATE', 'MESSAGES_UPSERT']
      }
    };

    console.log('Creating instance in EvolutionAPI with payload:', createPayload);

    try {
      const createResponse = await fetch(`${globalConfig.api_url}/instance/create`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': globalConfig.api_key
        },
        body: JSON.stringify(createPayload)
      });

      console.log('EvolutionAPI create response status:', createResponse.status);

      if (!createResponse.ok && createResponse.status !== 409) {
          const errorText = await createResponse.text();
          throw new Error(`Erro da EvolutionAPI: ${createResponse.status} - ${errorText}`);
      }

      const createResult = createResponse.status !== 204 ? await createResponse.json().catch(() => ({})) : {};
      console.log('EvolutionAPI create response:', createResult);

      // Configurar webhook explicitamente
      await configureWebhook(globalConfig, instance_name);

      return new Response(
        JSON.stringify({ 
          success: true, 
          config: newConfig,
          evolution_response: createResult,
          message: 'Inst√¢ncia criada com sucesso'
        }),
        { 
          status: 200, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );

    } catch (apiError) {
      console.error('‚ùå Falha na comunica√ß√£o com a EvolutionAPI. Iniciando rollback...', apiError);
      
      // Rollback: Remover configura√ß√£o local criada
      await supabase
        .from('evolution_api_configs')
        .delete()
        .eq('id', newConfig.id);
      
      console.log('Î°§ Rollback conclu√≠do. Configura√ß√£o local removida.');

      return new Response(
        JSON.stringify({ error: `Erro na comunica√ß√£o com EvolutionAPI: ${apiError.message}` }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

  } catch (error) {
    console.error('Erro geral ao criar inst√¢ncia:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Erro desconhecido',
        details: error.toString()
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
}

async function configureWebhook(globalConfig: any, instanceName: string) {
  try {
    const webhookPayload = {
      webhook: {
        enabled: true,
        url: `${Deno.env.get('SUPABASE_URL')}/functions/v1/evolution-webhook`,
        events: [
          'APPLICATION_STARTUP',
          'QRCODE_UPDATED', 
          'CONNECTION_UPDATE', 
          'MESSAGES_UPSERT'
        ],
        webhook_by_events: false
      }
    };

    console.log('Configuring webhook for instance:', instanceName, 'with FINAL payload:', webhookPayload);

    const webhookResponse = await fetch(`${globalConfig.api_url}/webhook/set/${instanceName}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': globalConfig.api_key
      },
      body: JSON.stringify(webhookPayload)
    });

    if (webhookResponse.ok) {
      console.log('‚úÖ Webhook configured successfully for:', instanceName);
    } else {
      const errorText = await webhookResponse.text();
      console.error(`‚ùå Webhook configuration failed: ${errorText}`);
    }
  } catch (error) {
    console.error('‚ùå Error configuring webhook:', error);
  }
}

async function handleConnectInstance(supabase: any, params: any) {
  const { config_id } = params;
  
  console.log('Connecting instance for config:', config_id);
  
  try {
    if (!config_id) {
      throw new Error('config_id √© obrigat√≥rio');
    }

    const { data: config, error: configError } = await supabase
      .from('evolution_api_configs')
      .select(`*, evolution_global_configs (*)`)
      .eq('id', config_id)
      .single();

    if (configError) {
      console.error('Erro ao buscar configura√ß√£o:', configError);
      throw new Error(`Erro ao buscar configura√ß√£o: ${configError.message}`);
    }
    
    if (!config) throw new Error('Configura√ß√£o n√£o encontrada');

    const globalConfig = config.evolution_global_configs;
    if (!globalConfig) throw new Error('Configura√ß√£o global n√£o encontrada');

    console.log('Connecting instance:', config.instance_name, 'at:', globalConfig.api_url);

    await configureWebhook(globalConfig, config.instance_name);

    const connectResponse = await fetch(`${globalConfig.api_url}/instance/connect/${config.instance_name}`, {
      method: 'GET',
      headers: {
        'apikey': globalConfig.api_key
      }
    });

    console.log('Connect response status:', connectResponse.status);
    
    if (!connectResponse.ok) {
      const errorText = await connectResponse.text();
      console.error('Connect error response:', errorText);
      throw new Error(`Erro ao conectar inst√¢ncia: ${connectResponse.status} - ${errorText}`);
    }

    const connectResult = await connectResponse.json();
    console.log('Connect result received:', connectResult);

    const qrCode = connectResult.base64 || connectResult.qr_code || connectResult.qrCode;
    
    if (qrCode) {
      console.log('QR code generated successfully');
      
      await supabase
        .from('evolution_api_configs')
        .update({ 
          status: 'qr_ready',
          qr_code: qrCode,
          qr_code_expires_at: new Date(Date.now() + 2 * 60 * 1000).toISOString()
        })
        .eq('id', config_id);

      return new Response(
        JSON.stringify({ 
          success: true, 
          qr_code: qrCode,
          message: 'QR code generated successfully'
        }),
        { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } else {
      console.log('No QR code in response, checking if already connected');
      return await handleCheckStatus(supabase, { config_id });
    }

  } catch (error) {
    console.error('Erro ao conectar inst√¢ncia:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Erro ao conectar inst√¢ncia',
        details: error.toString()
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
}

async function handleCheckStatus(supabase: any, params: any) {
  const { config_id } = params;
  
  console.log('üîç Checking status for config:', config_id);
  
  try {
    const { data: config, error: configError } = await supabase
      .from('evolution_api_configs')
      .select(`*, evolution_global_configs (*)`)
      .eq('id', config_id)
      .single();

    if (configError) throw configError;
    if (!config) throw new Error('Configura√ß√£o n√£o encontrada');

    const globalConfig = config.evolution_global_configs;
    if (!globalConfig) throw new Error('Configura√ß√£o global n√£o encontrada');

    console.log('üì± Checking status for instance:', config.instance_name);
    console.log('üîó Current status in DB:', config.status);

    let statusResult = null;
    let lastError = null;
    const statusEndpoints = [
      `${globalConfig.api_url}/instance/fetchInstances/${config.instance_name}`,
      `${globalConfig.api_url}/instance/connectionState/${config.instance_name}`
    ];

    for (const endpoint of statusEndpoints) {
      try {
        console.log('üì° Trying endpoint:', endpoint);
        const statusResponse = await fetch(endpoint, {
          method: 'GET',
          headers: { 'apikey': globalConfig.api_key }
        });

        if (statusResponse.ok) {
          statusResult = await statusResponse.json();
          console.log('‚úÖ Status retrieved from:', endpoint);
          break;
        } else {
          console.log('‚ùå Endpoint failed:', endpoint, 'Status:', statusResponse.status);
          lastError = `Status ${statusResponse.status} from ${endpoint}`;
        }
      } catch (error) {
        console.log('‚ùå Error with endpoint:', endpoint, error.message);
        lastError = error.message;
      }
    }

    if (!statusResult) {
      console.log('‚ùå All status endpoints failed, last error:', lastError);
      return new Response(JSON.stringify({ success: true, status: 'not_found', message: 'Instance not found or unreachable', error: lastError }), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    console.log('üìä Parsed status result:', JSON.stringify(statusResult, null, 2));

    let currentStatus = 'disconnected';
    let instanceData = null;
    if (statusResult && Array.isArray(statusResult) && statusResult.length > 0) {
      instanceData = statusResult[0];
    } else if (statusResult && typeof statusResult === 'object') {
      instanceData = statusResult;
    }

    if (instanceData) {
      const evolutionStatus = instanceData?.state || instanceData?.instance?.state || instanceData?.connectionStatus || instanceData?.status;
      console.log('üö¶ Evolution status from API:', evolutionStatus);
      currentStatus = mapEvolutionStatus(evolutionStatus);
      console.log('üéØ Status mapped to:', currentStatus);
    } else {
      console.log('‚ùå No instance data found in API response');
    }

    if (currentStatus !== config.status) {
      console.log('üíæ UPDATING STATUS IN DATABASE:', config.status, '->', currentStatus);
      const updateData: any = { status: currentStatus, updated_at: new Date().toISOString() };
      
      if (currentStatus === 'connected') {
        updateData.qr_code = null;
        updateData.qr_code_expires_at = null;
        console.log('üßπ Clearing QR code data since connected');
      }
      
      const { error: updateError } = await supabase.from('evolution_api_configs').update(updateData).eq('id', config_id);
      if (updateError) {
        console.error('‚ùå Error updating status in database:', updateError);
        throw updateError;
      }
      console.log('‚úÖ Status successfully updated in database');
    } else {
      console.log('‚è≠Ô∏è Status unchanged, no database update needed');
    }

    if (currentStatus === 'connected') {
      console.log('üéâ WHATSAPP CONNECTION DETECTED! Status is CONNECTED');
    }

    return new Response(JSON.stringify({ success: true, status: currentStatus, instance_data: instanceData }), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });

  } catch (error) {
    console.error('‚ùå Error checking status:', error);
    return new Response(JSON.stringify({ error: error.message }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
  }
}

function mapEvolutionStatus(evolutionStatus: string): string {
  switch (evolutionStatus?.toLowerCase()) {
    case 'open':
    case 'connected':
      return 'connected';
    case 'connecting':
    case 'qr':
      return 'qr_ready';
    case 'close':
    case 'closed':
    case 'disconnected':
      return 'disconnected';
    default:
      return 'disconnected';
  }
}

async function handleForceStatusSync(supabase: any, params: any) {
  const { config_id } = params;
  console.log('üîÑ Force syncing status for config:', config_id);

  const { data: config, error: configError } = await supabase.from('evolution_api_configs').select(`*, evolution_global_configs (*)`).eq('id', config_id).single();

  if (!configError && config && config.evolution_global_configs) {
    console.log('üîó Forcing webhook reconfiguration...');
    await configureWebhook(config.evolution_global_configs, config.instance_name);
  }
  
  const statusResult = await handleCheckStatus(supabase, { config_id });
  const statusData = await statusResult.json();
  console.log('üîÑ Force sync result:', statusData);
  
  return new Response(JSON.stringify({ ...statusData, force_synced: true, sync_timestamp: new Date().toISOString() }), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
}
async function handleDisconnectInstance(supabase, params) {
  const { config_id } = params;
  try {
    // Buscar configura√ß√£o
    const { data: config, error: configError } = await supabase.from('evolution_api_configs').select(`
        *,
        evolution_global_configs (*)
      `).eq('id', config_id).single();
    if (configError) throw configError;
    if (!config) throw new Error('Configura√ß√£o n√£o encontrada');
    const globalConfig = config.evolution_global_configs;
    if (!globalConfig) throw new Error('Configura√ß√£o global n√£o encontrada');
    // Desconectar inst√¢ncia
    const disconnectResponse = await fetch(`${globalConfig.api_url}/instance/logout/${config.instance_name}`, {
      method: 'DELETE',
      headers: {
        'apikey': globalConfig.api_key
      }
    });
    if (!disconnectResponse.ok) {
      throw new Error(`Erro ao desconectar inst√¢ncia: ${disconnectResponse.status}`);
    }
    // Atualizar status no banco
    await supabase.from('evolution_api_configs').update({
      status: 'disconnected',
      qr_code: null
    }).eq('id', config_id);
    return new Response(JSON.stringify({
      success: true,
      message: 'Instance disconnected'
    }), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('Erro ao desconectar inst√¢ncia:', error);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
}
async function handleDeleteInstance(supabase, params) {
  const { config_id } = params;
  try {
    // Buscar configura√ß√£o
    const { data: config, error: configError } = await supabase.from('evolution_api_configs').select(`
        *,
        evolution_global_configs (*)
      `).eq('id', config_id).single();
    if (configError) throw configError;
    if (!config) throw new Error('Configura√ß√£o n√£o encontrada');
    const globalConfig = config.evolution_global_configs;
    if (!globalConfig) throw new Error('Configura√ß√£o global n√£o encontrada');
    // Deletar inst√¢ncia
    const deleteResponse = await fetch(`${globalConfig.api_url}/instance/delete/${config.instance_name}`, {
      method: 'DELETE',
      headers: {
        'apikey': globalConfig.api_key
      }
    });
    if (!deleteResponse.ok) {
      throw new Error(`Erro ao deletar inst√¢ncia: ${deleteResponse.status}`);
    }
    // Remover do banco
    await supabase.from('evolution_api_configs').delete().eq('id', config_id);
    return new Response(JSON.stringify({
      success: true,
      message: 'Instance deleted'
    }), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('Erro ao deletar inst√¢ncia:', error);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
}
async function handleSendMessage(supabase, params) {
  const { config_id, phone_number, message } = params;
  try {
    // Buscar configura√ß√£o
    const { data: config, error: configError } = await supabase.from('evolution_api_configs').select(`
        *,
        evolution_global_configs (*)
      `).eq('id', config_id).single();
    if (configError) throw configError;
    if (!config) throw new Error('Configura√ß√£o n√£o encontrada');
    const globalConfig = config.evolution_global_configs;
    if (!globalConfig) throw new Error('Configura√ß√£o global n√£o encontrada');
    // Enviar mensagem
    const messagePayload = {
      number: phone_number,
      text: message
    };
    const sendResponse = await fetch(`${globalConfig.api_url}/message/sendText/${config.instance_name}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': globalConfig.api_key
      },
      body: JSON.stringify(messagePayload)
    });
    if (!sendResponse.ok) {
      throw new Error(`Erro ao enviar mensagem: ${sendResponse.status}`);
    }
    const sendResult = await sendResponse.json();
    return new Response(JSON.stringify({
      success: true,
      result: sendResult
    }), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('Erro ao enviar mensagem:', error);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
}
async function handleTestConnection(params) {
  const { api_url, api_key } = params;
  try {
    const testResponse = await fetch(`${api_url}/instance/fetchInstances`, {
      method: 'GET',
      headers: {
        'apikey': api_key
      }
    });
    if (!testResponse.ok) {
      throw new Error(`Erro de conex√£o: ${testResponse.status}`);
    }
    const testResult = await testResponse.json();
    return new Response(JSON.stringify({
      success: true,
      message: 'Conex√£o realizada com sucesso',
      data: testResult
    }), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error('Erro ao testar conex√£o:', error);
    return new Response(JSON.stringify({
      error: error.message
    }), {
      status: 500,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    });
  }
}

// ### NOVAS FUN√á√ïES PARA IA NATIVA ###
async function handleOpenAISetCreds(supabase: any, params: any) {
    const { instanceName, credsName, apiKey } = params;
    const { data: config, error } = await supabase.from('evolution_api_configs').select(`*, evolution_global_configs (*)`).eq('instance_name', instanceName).single();
    if (error || !config.evolution_global_configs) throw new Error(`Configura√ß√£o n√£o encontrada para ${instanceName}`);
    
    const globalConfig = config.evolution_global_configs;
    const response = await fetch(`${globalConfig.api_url}/openai/creds/${instanceName}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'apikey': globalConfig.api_key },
        body: JSON.stringify({ name: credsName, apiKey: apiKey }),
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro ao configurar credenciais OpenAI: ${errorText}`);
    }
    
    return new Response(JSON.stringify(await response.json()), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' }});
}

async function handleOpenAICreateBot(supabase: any, params: any) {
    const { instanceName, botConfig } = params;
    const { data: config, error } = await supabase.from('evolution_api_configs').select(`*, evolution_global_configs (*)`).eq('instance_name', instanceName).single();
    if (error || !config.evolution_global_configs) throw new Error(`Configura√ß√£o n√£o encontrada para ${instanceName}`);

    const globalConfig = config.evolution_global_configs;
    const response = await fetch(`${globalConfig.api_url}/openai/create/${instanceName}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'apikey': globalConfig.api_key },
        body: JSON.stringify(botConfig),
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro ao criar bot OpenAI: ${errorText}`);
    }

    return new Response(JSON.stringify(await response.json()), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' }});
}

async function handleOpenAISetDefaults(supabase: any, params: any) {
    const { instanceName, settings } = params;
    const { data: config, error } = await supabase.from('evolution_api_configs').select(`*, evolution_global_configs (*)`).eq('instance_name', instanceName).single();
    if (error || !config.evolution_global_configs) throw new Error(`Configura√ß√£o n√£o encontrada para ${instanceName}`);
    
    const globalConfig = config.evolution_global_configs;
    const response = await fetch(`${globalConfig.api_url}/openai/settings/${instanceName}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'apikey': globalConfig.api_key },
        body: JSON.stringify(settings),
    });
    
    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro ao definir configura√ß√µes padr√£o da OpenAI: ${errorText}`);
    }
    
    return new Response(JSON.stringify(await response.json()), { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' }});
}


================================================================================
ARQUIVO: ./index.html
================================================================================\n
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>agent-ai-franchise-builder</title>
    <meta name="description" content="Lovable Generated Project" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="agent-ai-franchise-builder" />
    <meta property="og:description" content="Lovable Generated Project" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================================================
ARQUIVO: ./README.md
================================================================================\n
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/3f253a16-b26d-4956-959b-871525025d74

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/3f253a16-b26d-4956-959b-871525025d74) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/3f253a16-b26d-4956-959b-871525025d74) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)



================================================================================
ARQUIVO: ./eslint.config.js
================================================================================\n
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);



================================================================================
ARQUIVO: ./src/utils/agentHelpers.ts
================================================================================\n

import { Agent, Customer, CustomerPortalAccess } from "@/types";
import { v4 as uuidv4 } from "uuid";

export function createNewAgent(
  agentData: Partial<Agent>, 
  customerId: string, 
  franchiseeId: string
): Agent {
  const now = new Date().toISOString();
  
  return {
    id: uuidv4(),
    name: agentData.name || "",
    sector: agentData.sector || "",
    prompt: agentData.prompt || "",
    openAiKey: agentData.openAiKey || "",
    enableVoiceRecognition: agentData.enableVoiceRecognition || false,
    knowledgeBase: agentData.knowledgeBase || "",
    customerId: customerId,
    franchiseeId: franchiseeId,
    whatsappConnected: false,
    createdAt: now,
    isActive: true,
    messageCount: 0,
    responseTime: 0,
    ...agentData
  };
}

export function createNewCustomer(
  customerData: Partial<Customer>, 
  franchiseeId: string
): Customer {
  const now = new Date().toISOString();
  
  return {
    id: uuidv4(),
    businessName: customerData.businessName || "",
    name: customerData.name || "",
    email: customerData.email || "",
    document: customerData.document || "",
    contactPhone: customerData.contactPhone || "",
    franchiseeId: franchiseeId,
    agentCount: 0,
    createdAt: now,
    role: "customer",
    ...customerData
  };
}

export function generateCustomerPortalAccess(customer: Customer): CustomerPortalAccess {
  return {
    url: `https://portal.exemplo.com/customer/${customer.id}`,
    username: customer.email,
    password: generateRandomPassword(),
    customerId: customer.id,
  };
}

function generateRandomPassword(): string {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let password = "";
  for (let i = 0; i < 8; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return password;
}

export function validateAgentData(agentData: Partial<Agent>): string[] {
  const errors: string[] = [];
  
  if (!agentData.name?.trim()) {
    errors.push("Nome do agente √© obrigat√≥rio");
  }
  
  if (!agentData.sector?.trim()) {
    errors.push("Setor do agente √© obrigat√≥rio");
  }
  
  if (!agentData.openAiKey?.trim()) {
    errors.push("Chave da OpenAI √© obrigat√≥ria");
  } else if (!agentData.openAiKey.startsWith("sk-")) {
    errors.push("Chave da OpenAI deve come√ßar com 'sk-'");
  }
  
  return errors;
}

export function validateCustomerData(customerData: Partial<Customer>): string[] {
  const errors: string[] = [];
  
  if (!customerData.businessName?.trim()) {
    errors.push("Nome da empresa √© obrigat√≥rio");
  }
  
  if (!customerData.name?.trim()) {
    errors.push("Nome do respons√°vel √© obrigat√≥rio");
  }
  
  if (!customerData.email?.trim()) {
    errors.push("Email √© obrigat√≥rio");
  } else {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(customerData.email)) {
      errors.push("Email deve ter formato v√°lido");
    }
  }
  
  return errors;
}



================================================================================
ARQUIVO: ./src/utils/styleConstants.ts
================================================================================\n

// Layout and spacing constants
export const LAYOUT = {
  SIDEBAR_WIDTH: {
    EXPANDED: 256,
    COLLAPSED: 64,
  },
  HEADER_HEIGHT: 64,
  MOBILE_BREAKPOINT: 768,
  CONTAINER_PADDING: {
    MOBILE: 16,
    DESKTOP: 24,
  },
} as const;

// Common spacing values
export const SPACING = {
  XS: 4,
  SM: 8,
  MD: 16,
  LG: 24,
  XL: 32,
  XXL: 48,
} as const;

// Typography scale
export const TYPOGRAPHY = {
  FONT_SIZES: {
    XS: '0.75rem',  // 12px
    SM: '0.875rem', // 14px
    BASE: '1rem',   // 16px
    LG: '1.125rem', // 18px
    XL: '1.25rem',  // 20px
    '2XL': '1.5rem', // 24px
    '3XL': '1.875rem', // 30px
  },
  LINE_HEIGHTS: {
    TIGHT: 1.25,
    NORMAL: 1.5,
    RELAXED: 1.625,
  },
} as const;

// Animation durations
export const ANIMATION = {
  FAST: 150,
  NORMAL: 300,
  SLOW: 500,
} as const;

// Z-index scale
export const Z_INDEX = {
  DROPDOWN: 1000,
  STICKY: 1020,
  FIXED: 1030,
  MODAL_BACKDROP: 1040,
  MODAL: 1050,
  POPOVER: 1060,
  TOOLTIP: 1070,
} as const;



================================================================================
ARQUIVO: ./src/components/ai-sales-agent/MediaUpload.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Image, Mic } from "lucide-react";
import { toast } from "sonner";

interface MediaUploadProps {
  hasImage: boolean;
  hasAudio: boolean;
  setHasImage: (hasImage: boolean) => void;
  setHasAudio: (hasAudio: boolean) => void;
}

export default function MediaUpload({ 
  hasImage, 
  hasAudio, 
  setHasImage, 
  setHasAudio 
}: MediaUploadProps) {
  const uploadImage = () => {
    // In a real implementation, this would open a file picker
    setHasImage(true);
    toast.success("Imagem carregada com sucesso.");
  };

  const uploadAudio = () => {
    // In a real implementation, this would open a file picker or recording interface
    setHasAudio(true);
    toast.success("√Åudio carregado com sucesso.");
  };

  const removeMedia = (type: "image" | "audio") => {
    if (type === "image") {
      setHasImage(false);
      toast.info("Imagem removida.");
    } else {
      setHasAudio(false);
      toast.info("√Åudio removido.");
    }
  };

  return (
    <div className="flex flex-wrap gap-2 mt-2">
      {!hasImage && (
        <Button variant="outline" size="sm" onClick={uploadImage}>
          <Image className="mr-1 h-4 w-4" /> Anexar Imagem
        </Button>
      )}
      
      {hasImage && (
        <div className="flex items-center gap-2 px-3 py-1 bg-muted rounded-md">
          <Image className="h-4 w-4" />
          <span className="text-sm">imagem.jpg</span>
          <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => removeMedia("image")}>
            <span>√ó</span>
          </Button>
        </div>
      )}
      
      {!hasAudio && (
        <Button variant="outline" size="sm" onClick={uploadAudio}>
          <Mic className="mr-1 h-4 w-4" /> Anexar √Åudio
        </Button>
      )}
      
      {hasAudio && (
        <div className="flex items-center gap-2 px-3 py-1 bg-muted rounded-md">
          <Mic className="h-4 w-4" />
          <span className="text-sm">audio.mp3</span>
          <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => removeMedia("audio")}>
            <span>√ó</span>
          </Button>
        </div>
      )}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/ai-sales-agent/CampaignProgress.tsx
================================================================================\n

import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { Play, Pause } from "lucide-react";
import { Campaign } from "@/types/campaign";

interface CampaignProgressProps {
  campaign: Campaign;
  stopCampaign: () => void;
  startCampaign: () => void;
  resetCampaign: () => void;
}

export default function CampaignProgress({ 
  campaign, 
  stopCampaign, 
  startCampaign,
  resetCampaign
}: CampaignProgressProps) {
  const campaignProgress = Math.round(
    ((campaign.sentMessages + campaign.failedMessages) / campaign.totalContacts) * 100
  );

  return (
    <div className="space-y-6">
      {campaign.status === "completed" ? (
        <div className="mt-6 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-900 rounded-md">
          <h3 className="font-medium text-green-700 dark:text-green-300">Campanha Conclu√≠da!</h3>
          <p className="text-sm text-green-600 dark:text-green-400 mt-1">
            {campaign.sentMessages} mensagens enviadas com sucesso. {campaign.failedMessages} falhas.
          </p>
          <div className="mt-4">
            <Button variant="outline" size="sm" onClick={resetCampaign}>
              Criar Nova Campanha
            </Button>
          </div>
        </div>
      ) : (
        <>
          <div className="space-y-2">
            <div className="flex items-center justify-between mb-2">
              <h3 className="font-medium">Progresso da Campanha</h3>
              <span className="text-sm font-medium">{campaignProgress}%</span>
            </div>
            <Progress value={campaignProgress} className="h-2" />
            <div className="flex justify-between text-sm text-muted-foreground">
              <span>Enviadas: {campaign.sentMessages}/{campaign.totalContacts}</span>
              <span>Falhas: {campaign.failedMessages}</span>
            </div>
          </div>
          
          <div className="flex justify-center">
            {campaign.status === "running" ? (
              <Button variant="outline" onClick={stopCampaign}>
                <Pause className="mr-2 h-4 w-4" />
                Pausar Campanha
              </Button>
            ) : (
              <Button onClick={startCampaign}>
                <Play className="mr-2 h-4 w-4" />
                Retomar Campanha
              </Button>
            )}
          </div>
        </>
      )}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/ai-sales-agent/AgentConfigTab.tsx
================================================================================\n
import { useState } from "react";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { toast } from "sonner";
interface AgentConfigTabProps {
  setActiveTab: (tab: string) => void;
}
export default function AgentConfigTab({
  setActiveTab
}: AgentConfigTabProps) {
  const [isAIAgentEnabled, setIsAIAgentEnabled] = useState(false);
  const [apiKey, setApiKey] = useState("");
  const [agentName, setAgentName] = useState("");
  const [agentPrompt, setAgentPrompt] = useState("");
  const [useCalendar, setUseCalendar] = useState(false);
  const saveAgentSettings = () => {
    if (!apiKey.trim() && isAIAgentEnabled) {
      toast.error("Insira uma API Key v√°lida para ativar o agente IA.");
      return;
    }
    if (isAIAgentEnabled) {
      toast.success("Configura√ß√µes do agente IA salvas com sucesso!");
    } else {
      toast.info("Agente IA desativado.");
    }

    // Move to the campaign tab
    setActiveTab("campaign");
  };
  return <Card>
      <CardHeader>
        <CardTitle>Configura√ß√£o do Agente IA</CardTitle>
        <CardDescription>
          Configure seu agente de IA pessoal para responder mensagens automaticamente.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="flex items-center justify-between">
          <div className="space-y-0.5">
            <Label className="text-base">Ativar Agente IA</Label>
            <p className="text-sm text-muted-foreground">
              O agente responder√° automaticamente √†s mensagens recebidas.
            </p>
          </div>
          <Switch checked={isAIAgentEnabled} onCheckedChange={setIsAIAgentEnabled} className="bg-sky-600 hover:bg-sky-500 text-sky-600" />
        </div>
        
        <div className={`space-y-4 ${isAIAgentEnabled ? "" : "opacity-60 pointer-events-none"}`}>
          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="apiKey">API Key da OpenAI</Label>
              <Input id="apiKey" type="password" placeholder="sk-..." value={apiKey} onChange={e => setApiKey(e.target.value)} />
              <p className="text-xs text-muted-foreground">
                Necess√°rio para o funcionamento do agente IA.
              </p>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="agentName">Nome do Agente</Label>
              <Input id="agentName" placeholder="Ex: Vendedor Virtual" value={agentName} onChange={e => setAgentName(e.target.value)} />
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="agentPrompt">Personalidade do Agente (Prompt)</Label>
            <Textarea id="agentPrompt" placeholder="Ex: Voc√™ √© um especialista em vendas de agentes inteligentes para empresas locais..." rows={5} value={agentPrompt} onChange={e => setAgentPrompt(e.target.value)} />
            <p className="text-xs text-muted-foreground">
              Define como o agente se comportar√° ao responder mensagens.
            </p>
          </div>
          
          <Separator />
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label className="text-base">Usar Agenda Pessoal</Label>
              <p className="text-sm text-muted-foreground">
                O agente poder√° marcar reuni√µes na sua agenda.
              </p>
            </div>
            <Switch checked={useCalendar} onCheckedChange={setUseCalendar} disabled={!isAIAgentEnabled} className="bg-sky-600 hover:bg-sky-500" />
          </div>
          
          <div className={`${useCalendar ? "" : "opacity-60 pointer-events-none"}`}>
            <Label className="mb-2 block">Disponibilidade para Agendamentos</Label>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="space-y-2">
                <Label htmlFor="monday" className="text-sm">Segunda</Label>
                <Input id="monday" placeholder="08:00 - 18:00" defaultValue="08:00 - 18:00" disabled={!useCalendar} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="tuesday" className="text-sm">Ter√ßa</Label>
                <Input id="tuesday" placeholder="08:00 - 18:00" defaultValue="08:00 - 18:00" disabled={!useCalendar} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="wednesday" className="text-sm">Quarta</Label>
                <Input id="wednesday" placeholder="08:00 - 18:00" defaultValue="08:00 - 18:00" disabled={!useCalendar} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="thursday" className="text-sm">Quinta</Label>
                <Input id="thursday" placeholder="08:00 - 18:00" defaultValue="08:00 - 18:00" disabled={!useCalendar} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="friday" className="text-sm">Sexta</Label>
                <Input id="friday" placeholder="08:00 - 18:00" defaultValue="08:00 - 18:00" disabled={!useCalendar} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="saturday" className="text-sm">S√°bado</Label>
                <Input id="saturday" placeholder="Indispon√≠vel" defaultValue="" disabled={!useCalendar} />
              </div>
              <div className="space-y-2">
                <Label htmlFor="sunday" className="text-sm">Domingo</Label>
                <Input id="sunday" placeholder="Indispon√≠vel" defaultValue="" disabled={!useCalendar} />
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex justify-end">
          <Button onClick={saveAgentSettings}>
            Salvar Configura√ß√µes
          </Button>
        </div>
      </CardContent>
    </Card>;
}


================================================================================
ARQUIVO: ./src/components/ai-sales-agent/CampaignTab.tsx
================================================================================\n

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { toast } from "sonner";
import CampaignForm from "./CampaignForm";
import CampaignProgress from "./CampaignProgress";
import { Campaign } from "@/types/campaign";

export default function CampaignTab() {
  const [phoneNumbers, setPhoneNumbers] = useState("");
  const [campaignMessage, setCampaignMessage] = useState("");
  const [minutesBetweenMessages, setMinutesBetweenMessages] = useState("1");
  const [dailyLimit, setDailyLimit] = useState("50");
  const [hasImage, setHasImage] = useState(false);
  const [hasAudio, setHasAudio] = useState(false);
  const [activeCampaign, setActiveCampaign] = useState<Campaign | null>(null);

  const startCampaign = () => {
    // Validate inputs
    if (!phoneNumbers.trim()) {
      toast.error("Adicione pelo menos um n√∫mero de telefone.");
      return;
    }

    if (!campaignMessage.trim()) {
      toast.error("Adicione uma mensagem para a campanha.");
      return;
    }

    // Parse phone numbers (simple validation)
    const numbers = phoneNumbers.split("\n").map(n => n.trim()).filter(n => n);
    
    if (numbers.length === 0) {
      toast.error("Nenhum n√∫mero v√°lido encontrado.");
      return;
    }

    // Create a new campaign
    const newCampaign: Campaign = {
      id: `campaign-${Date.now()}`,
      name: `Campanha ${new Date().toLocaleDateString('pt-BR')}`,
      totalContacts: numbers.length,
      sentMessages: 0,
      failedMessages: 0,
      status: "running",
      startedAt: new Date().toISOString(),
      completedAt: null
    };

    setActiveCampaign(newCampaign);
    toast.success(`Campanha iniciada! Enviando para ${numbers.length} contatos.`);
    
    // Simulate message sending progress
    simulateProgress(newCampaign, numbers.length);
  };

  const stopCampaign = () => {
    if (!activeCampaign) return;
    
    setActiveCampaign({
      ...activeCampaign,
      status: "paused"
    });
    
    toast.info("Campanha pausada.");
  };

  const resetCampaign = () => {
    setActiveCampaign(null);
  };

  const simulateProgress = (campaign: Campaign, total: number) => {
    // This is just a simulation - in a real app, this would track actual message sending
    let sent = 0;
    let failed = 0;
    
    const interval = setInterval(() => {
      // Simulate a message being sent
      const success = Math.random() > 0.1; // 90% success rate
      
      if (success) {
        sent++;
      } else {
        failed++;
      }
      
      // Update campaign status
      setActiveCampaign(prev => {
        if (!prev) return null;
        
        const updated = {
          ...prev,
          sentMessages: sent,
          failedMessages: failed
        };
        
        // Check if campaign is complete
        if (sent + failed >= total) {
          clearInterval(interval);
          updated.status = "completed";
          updated.completedAt = new Date().toISOString();
          toast.success("Campanha conclu√≠da!");
        }
        
        return updated;
      });
      
    }, 1000); // Update every second for demo purposes
    
    // Cleanup interval if component unmounts
    return () => clearInterval(interval);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Campanha de Mensagens</CardTitle>
        <CardDescription>
          Configure e inicie campanhas de envio autom√°tico de mensagens.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {activeCampaign && activeCampaign.status !== "completed" ? (
          <CampaignProgress
            campaign={activeCampaign}
            stopCampaign={stopCampaign}
            startCampaign={startCampaign}
            resetCampaign={resetCampaign}
          />
        ) : (
          <CampaignForm
            phoneNumbers={phoneNumbers}
            setPhoneNumbers={setPhoneNumbers}
            campaignMessage={campaignMessage}
            setCampaignMessage={setCampaignMessage}
            minutesBetweenMessages={minutesBetweenMessages}
            setMinutesBetweenMessages={setMinutesBetweenMessages}
            dailyLimit={dailyLimit}
            setDailyLimit={setDailyLimit}
            hasImage={hasImage}
            setHasImage={setHasImage}
            hasAudio={hasAudio}
            setHasAudio={setHasAudio}
            onStartCampaign={startCampaign}
          />
        )}
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/ai-sales-agent/CampaignForm.tsx
================================================================================\n

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Play, Upload } from "lucide-react";
import { toast } from "sonner";
import MediaUpload from "./MediaUpload";

interface CampaignFormProps {
  phoneNumbers: string;
  setPhoneNumbers: (value: string) => void;
  campaignMessage: string;
  setCampaignMessage: (value: string) => void;
  minutesBetweenMessages: string;
  setMinutesBetweenMessages: (value: string) => void;
  dailyLimit: string;
  setDailyLimit: (value: string) => void;
  hasImage: boolean;
  setHasImage: (hasImage: boolean) => void;
  hasAudio: boolean;
  setHasAudio: (hasAudio: boolean) => void;
  onStartCampaign: () => void;
}

export default function CampaignForm({
  phoneNumbers,
  setPhoneNumbers,
  campaignMessage,
  setCampaignMessage,
  minutesBetweenMessages,
  setMinutesBetweenMessages,
  dailyLimit,
  setDailyLimit,
  hasImage,
  setHasImage,
  hasAudio,
  setHasAudio,
  onStartCampaign
}: CampaignFormProps) {
  const handlePhoneNumbersPaste = () => {
    navigator.clipboard.readText().then(text => {
      setPhoneNumbers(text);
      
      // Count numbers
      const count = text.split("\n").filter(line => line.trim().length > 0).length;
      if (count > 0) {
        toast.success(`${count} n√∫meros adicionados!`);
      }
    }).catch(err => {
      toast.error("Erro ao colar da √°rea de transfer√™ncia.");
    });
  };

  return (
    <div className="space-y-6">
      {/* Phone numbers */}
      <div className="space-y-2">
        <Label htmlFor="phoneNumbers">Lista de N√∫meros</Label>
        <div className="relative">
          <Textarea
            id="phoneNumbers"
            placeholder="Cole aqui a lista de n√∫meros (um por linha)"
            rows={6}
            value={phoneNumbers}
            onChange={(e) => setPhoneNumbers(e.target.value)}
            className="pr-24"
          />
          <Button 
            variant="outline" 
            size="sm"
            className="absolute right-2 top-2"
            onClick={handlePhoneNumbersPaste}
          >
            <Upload className="mr-1 h-4 w-4" /> Colar
          </Button>
        </div>
        <p className="text-xs text-muted-foreground">
          Insira um n√∫mero por linha. Formato: pa√≠s + DDD + n√∫mero (Ex: 5511999999999)
        </p>
      </div>
      
      {/* Campaign message */}
      <div className="space-y-2">
        <Label htmlFor="campaignMessage">Mensagem</Label>
        <Textarea
          id="campaignMessage"
          placeholder="Digite a mensagem que ser√° enviada para os contatos..."
          rows={6}
          value={campaignMessage}
          onChange={(e) => setCampaignMessage(e.target.value)}
        />
        <p className="text-xs text-muted-foreground">
          Use {'{nome}'} para personalizar com o nome do contato (se dispon√≠vel).
        </p>
        
        {/* Attach media controls */}
        <MediaUpload
          hasImage={hasImage}
          hasAudio={hasAudio}
          setHasImage={setHasImage}
          setHasAudio={setHasAudio}
        />
      </div>
      
      <div className="grid gap-4 md:grid-cols-2">
        <div className="space-y-2">
          <Label htmlFor="interval">Tempo Entre Mensagens (minutos)</Label>
          <Input
            id="interval"
            type="number"
            min="0.5"
            step="0.5"
            value={minutesBetweenMessages}
            onChange={(e) => setMinutesBetweenMessages(e.target.value)}
          />
          <p className="text-xs text-muted-foreground">
            Tempo de espera entre cada mensagem enviada.
          </p>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="dailyLimit">Limite Di√°rio</Label>
          <Input
            id="dailyLimit"
            type="number"
            min="1"
            value={dailyLimit}
            onChange={(e) => setDailyLimit(e.target.value)}
          />
          <p className="text-xs text-muted-foreground">
            N√∫mero m√°ximo de mensagens enviadas por dia.
          </p>
        </div>
      </div>
      
      <div className="flex justify-end">
        <Button onClick={onStartCampaign}>
          <Play className="mr-2 h-4 w-4" />
          Iniciar Campanha
        </Button>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/ai-sales-agent/WhatsAppConnectionTab.tsx
================================================================================\n

import { useState } from "react";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { CheckCircle, AlertCircle, Info } from "lucide-react";
import WhatsAppQRCode from "@/components/whatsapp/WhatsAppQRCode";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";
import { useAuthCheck } from "@/hooks/useAuthCheck";

interface WhatsAppConnectionTabProps {
  isWhatsAppConnected: boolean;
  setIsWhatsAppConnected: (isConnected: boolean) => void;
  setActiveTab: (tab: string) => void;
}

export default function WhatsAppConnectionTab({
  isWhatsAppConnected,
  setIsWhatsAppConnected,
  setActiveTab
}: WhatsAppConnectionTabProps) {
  const { user } = useAuthCheck();
  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(null);
  const [isGeneratingQr, setIsGeneratingQr] = useState(false);
  const [qrError, setQrError] = useState<string | null>(null);

  const { globalConfigs, testConnection } = useEvolutionAPI(user?.id);

  const connectWhatsApp = () => {
    setTimeout(() => {
      setIsWhatsAppConnected(true);
      toast.success("WhatsApp conectado com sucesso!");
      setActiveTab("agent");
    }, 2000);
  };

  const disconnectWhatsApp = () => {
    setIsWhatsAppConnected(false);
    setQrCodeUrl(null);
    toast.info("WhatsApp desconectado.");
  };

  const handleTestConnection = async () => {
    setIsGeneratingQr(true);
    setQrError(null);
    
    try {
      await testConnection();
      setQrCodeUrl("https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=whatsapp-connection-test-" + Date.now());
      toast.success("Conex√£o testada com sucesso!");
    } catch (error) {
      setQrError("Erro ao testar conex√£o com EvolutionAPI");
      toast.error("Erro ao testar conex√£o");
    } finally {
      setIsGeneratingQr(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Conex√£o do WhatsApp via EvolutionAPI</CardTitle>
        <CardDescription>
          Sistema autom√°tico de WhatsApp com IA. A configura√ß√£o √© gerenciada automaticamente.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Status da configura√ß√£o global */}
        {globalConfigs.length === 0 ? (
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              EvolutionAPI n√£o configurada. Entre em contato com o administrador para ativar a integra√ß√£o.
            </AlertDescription>
          </Alert>
        ) : (
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              EvolutionAPI configurada e pronta para uso. As inst√¢ncias s√£o criadas automaticamente.
            </AlertDescription>
          </Alert>
        )}

        <div className="grid gap-6 md:grid-cols-2">
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <div className={`h-3 w-3 rounded-full ${isWhatsAppConnected ? 'bg-green-500' : 'bg-red-500'}`} />
              <p className="text-sm font-medium">
                Status: {isWhatsAppConnected ? 'Conectado' : 'Desconectado'}
              </p>
            </div>
            
            {globalConfigs.length > 0 && (
              <>
                <Button 
                  onClick={isWhatsAppConnected ? disconnectWhatsApp : connectWhatsApp}
                  variant={isWhatsAppConnected ? "outline" : "default"}
                >
                  {isWhatsAppConnected ? 'Desconectar' : 'Conectar WhatsApp'}
                </Button>
                
                <Button 
                  onClick={handleTestConnection}
                  variant="outline"
                  disabled={isGeneratingQr}
                >
                  Testar Conex√£o EvolutionAPI
                </Button>
              </>
            )}
            
            <div className="mt-6">
              <Alert>
                <Info className="h-4 w-4" />
                <AlertDescription>
                  {globalConfigs.length === 0 
                    ? "Configure a EvolutionAPI primeiro para usar WhatsApp com IA." 
                    : isWhatsAppConnected 
                      ? "Seu WhatsApp est√° conectado via EvolutionAPI e pronto para uso." 
                      : "As inst√¢ncias WhatsApp s√£o criadas automaticamente quando voc√™ cria agentes."}
                </AlertDescription>
              </Alert>
            </div>
          </div>
          
          <div className="flex items-center justify-center">
            {globalConfigs.length > 0 ? (
              <WhatsAppQRCode 
                onConnect={connectWhatsApp}
                onRefresh={handleTestConnection}
                isGenerating={isGeneratingQr}
                qrCodeUrl={qrCodeUrl || undefined}
                error={qrError || undefined}
              />
            ) : (
              <div className="text-center text-muted-foreground">
                <p className="text-sm">EvolutionAPI n√£o configurada</p>
                <p className="text-xs mt-1">Entre em contato com o administrador</p>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/SearchControl.tsx
================================================================================\n

import { Input } from "@/components/ui/input";

interface SearchControlProps {
  searchTerm: string;
  onSearchChange: (term: string) => void;
}

export default function SearchControl({ searchTerm, onSearchChange }: SearchControlProps) {
  return (
    <div className="relative w-full sm:w-auto">
      <Input
        type="search"
        placeholder="Buscar conex√µes..."
        className="w-full sm:w-[250px]"
        value={searchTerm}
        onChange={(e) => onSearchChange(e.target.value)}
      />
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/QRCodeModal.tsx
================================================================================\n

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { QrCode } from "lucide-react";

interface QRCodeModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConnect: () => void;
}

export default function QRCodeModal({ isOpen, onClose, onConnect }: QRCodeModalProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Conectar ao WhatsApp</DialogTitle>
          <DialogDescription>
            Escaneie o c√≥digo QR abaixo com seu WhatsApp para estabelecer a conex√£o.
          </DialogDescription>
        </DialogHeader>
        
        <div className="flex flex-col items-center py-6">
          {/* Placeholder para QR code */}
          <div className="w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center mb-4">
            <div className="text-center">
              <QrCode size={80} className="mx-auto text-gray-400 mb-2" />
              <p className="text-sm text-muted-foreground animate-pulse">Gerando c√≥digo QR...</p>
            </div>
          </div>
          
          <p className="text-sm text-center text-muted-foreground mt-4">
            Abra o WhatsApp no seu celular, acesse Configura√ß√µes &gt; WhatsApp Web e escaneie o c√≥digo QR.
          </p>
        </div>
        
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button onClick={onConnect}>
            Simular Conex√£o
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/ConnectionCard.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { 
  Card, 
  CardHeader, 
  CardTitle, 
  CardDescription, 
  CardContent, 
  CardFooter 
} from "@/components/ui/card";
import { 
  DropdownMenu, 
  DropdownMenuTrigger, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuSeparator 
} from "@/components/ui/dropdown-menu";
import { 
  MoreVertical, 
  RefreshCw, 
  MessageSquare, 
  Settings, 
  Check, 
  X, 
  QrCode, 
  Phone 
} from "lucide-react";
import { WhatsAppConnection } from "@/types/whatsapp";

interface ConnectionCardProps {
  connection: WhatsAppConnection;
  onGenerateQrCode: (connection: WhatsAppConnection) => void;
  onViewMessages: (connection: WhatsAppConnection) => void;
  onOpenSettings: (connection: WhatsAppConnection) => void;
  onDeleteConnection: (connectionId: string) => void;
}

export default function ConnectionCard({
  connection,
  onGenerateQrCode,
  onViewMessages,
  onOpenSettings,
  onDeleteConnection
}: ConnectionCardProps) {
  return (
    <Card key={connection.id} className="overflow-hidden">
      <CardHeader className="pb-3">
        <div className="flex justify-between items-start">
          <div>
            <CardTitle className="text-lg">{connection.name}</CardTitle>
            <CardDescription>{connection.customerName}</CardDescription>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreVertical className="h-4 w-4" />
                <span className="sr-only">Mais op√ß√µes</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onViewMessages(connection)}>
                <MessageSquare className="mr-2 h-4 w-4" /> Ver mensagens
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => onOpenSettings(connection)}>
                <Settings className="mr-2 h-4 w-4" /> Configura√ß√µes
              </DropdownMenuItem>
              {connection.status !== "connected" && (
                <DropdownMenuItem onClick={() => onGenerateQrCode(connection)}>
                  <RefreshCw className="mr-2 h-4 w-4" /> Reconectar
                </DropdownMenuItem>
              )}
              <DropdownMenuSeparator />
              <DropdownMenuItem 
                className="text-destructive focus:text-destructive"
                onClick={() => onDeleteConnection(connection.id)}
              >
                <RefreshCw className="mr-2 h-4 w-4" /> Remover
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <Phone className="h-4 w-4 mr-2 text-muted-foreground" />
              <span className="text-sm">{connection.phoneNumber}</span>
            </div>
            <div className="flex items-center">
              {connection.status === "connected" ? (
                <span className="text-xs bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-500 px-2 py-1 rounded-full flex items-center">
                  <Check className="h-3 w-3 mr-1" /> Conectado
                </span>
              ) : connection.status === "pending" ? (
                <span className="text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-800/30 dark:text-yellow-500 px-2 py-1 rounded-full flex items-center">
                  <QrCode className="h-3 w-3 mr-1" /> Pendente
                </span>
              ) : (
                <span className="text-xs bg-red-100 text-red-800 dark:bg-red-800/30 dark:text-red-500 px-2 py-1 rounded-full flex items-center">
                  <X className="h-3 w-3 mr-1" /> Desconectado
                </span>
              )}
            </div>
          </div>
          
          <div className="flex justify-between text-sm">
            <span className="text-muted-foreground">Mensagens:</span>
            <span className="font-medium">{connection.messageCount.toLocaleString()}</span>
          </div>
          
          <div className="flex justify-between text-sm">
            <span className="text-muted-foreground">√öltima atividade:</span>
            <span className="font-medium">
              {new Date(connection.lastActive).toLocaleDateString()}
            </span>
          </div>
        </div>
      </CardContent>
      
      <CardFooter className="pt-3">
        {connection.status === "connected" ? (
          <Button 
            className="w-full" 
            variant="default"
            onClick={() => onViewMessages(connection)}
          >
            <MessageSquare className="mr-2 h-4 w-4" />
            Ver conversas
          </Button>
        ) : (
          <Button 
            className="w-full" 
            variant="secondary"
            onClick={() => onGenerateQrCode(connection)}
          >
            <QrCode className="mr-2 h-4 w-4" />
            {connection.status === "pending" ? "Conectar WhatsApp" : "Reconectar WhatsApp"}
          </Button>
        )}
      </CardFooter>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/NewConnectionModal.tsx
================================================================================\n

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Customer } from "@/types/whatsapp";

interface NewConnectionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreateConnection: (connection: {
    name: string;
    phoneNumber: string;
    customerId: string;
  }) => void;
  customers: Customer[];
}

export default function NewConnectionModal({
  isOpen,
  onClose,
  onCreateConnection,
  customers
}: NewConnectionModalProps) {
  const [newConnection, setNewConnection] = useState({
    name: "",
    phoneNumber: "",
    customerId: ""
  });

  const handleCreateConnection = () => {
    onCreateConnection(newConnection);
    setNewConnection({ name: "", phoneNumber: "", customerId: "" });
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Nova Conex√£o WhatsApp</DialogTitle>
          <DialogDescription>
            Crie uma nova conex√£o WhatsApp para um cliente. Depois de criar, ser√° necess√°rio conectar via QR Code.
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <label htmlFor="name" className="text-sm font-medium">
              Nome da conex√£o
            </label>
            <Input
              id="name"
              placeholder="Ex: Atendimento Principal"
              value={newConnection.name}
              onChange={(e) => setNewConnection({...newConnection, name: e.target.value})}
            />
          </div>
          
          <div className="space-y-2">
            <label htmlFor="customer" className="text-sm font-medium">
              Cliente
            </label>
            <select
              id="customer"
              className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
              value={newConnection.customerId}
              onChange={(e) => setNewConnection({...newConnection, customerId: e.target.value})}
            >
              <option value="">Selecione um cliente</option>
              {customers.map(customer => (
                <option key={customer.id} value={customer.id}>{customer.name}</option>
              ))}
            </select>
          </div>
          
          <div className="space-y-2">
            <label htmlFor="phone" className="text-sm font-medium">
              N√∫mero de telefone (opcional)
            </label>
            <Input
              id="phone"
              placeholder="Ex: +55 11 99999-9999"
              value={newConnection.phoneNumber}
              onChange={(e) => setNewConnection({...newConnection, phoneNumber: e.target.value})}
            />
            <p className="text-xs text-muted-foreground">
              O n√∫mero ser√° confirmado ap√≥s conex√£o com WhatsApp.
            </p>
          </div>
        </div>
        
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button onClick={handleCreateConnection}>
            Criar Conex√£o
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/WhatsAppQRCode.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { QrCode, RefreshCw, Clock, AlertTriangle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";

interface WhatsAppQRCodeProps {
  onConnect?: () => void;
  onRefresh?: () => void;
  isGenerating?: boolean;
  qrCodeUrl?: string;
  className?: string;
  error?: string;
}

export default function WhatsAppQRCode({ 
  onConnect, 
  onRefresh,
  isGenerating = false,
  qrCodeUrl,
  error,
  className = ""
}: WhatsAppQRCodeProps) {
  const [countdown, setCountdown] = useState(120); // Increased to 2 minutes for EvolutionAPI
  const [expired, setExpired] = useState(false);
  
  // Enhanced countdown for EvolutionAPI QR codes
  useEffect(() => {
    if (!qrCodeUrl || expired || error) return;
    
    let timer: NodeJS.Timeout;
    
    if (countdown > 0) {
      timer = setTimeout(() => setCountdown(countdown - 1), 1000);
    } else {
      setExpired(true);
    }
    
    return () => clearTimeout(timer);
  }, [countdown, qrCodeUrl, expired, error]);
  
  // Reset countdown when new QR code is generated
  useEffect(() => {
    if (qrCodeUrl && !error) {
      setCountdown(120);
      setExpired(false);
    }
  }, [qrCodeUrl, error]);
  
  const handleRefresh = () => {
    if (onRefresh) onRefresh();
    setExpired(false);
    setCountdown(120);
  };
  
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };
  
  return (
    <div className={`flex flex-col items-center space-y-4 ${className}`}>
      {/* Error message */}
      {error && (
        <Alert variant="destructive" className="w-full max-w-md">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Timer display */}
      {qrCodeUrl && !expired && !isGenerating && !error && (
        <div className="flex items-center gap-2 px-3 py-2 bg-blue-50 border border-blue-200 rounded-lg">
          <Clock className="h-4 w-4 text-blue-600" />
          <span className="text-sm font-medium text-blue-800">
            Expira em {formatTime(countdown)}
          </span>
        </div>
      )}

      {/* QR Code Container */}
      <div className="w-64 h-64 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center bg-white relative">
        {isGenerating ? (
          <div className="text-center">
            <QrCode size={80} className="mx-auto text-gray-400 mb-2 animate-pulse" />
            <p className="text-sm text-muted-foreground">
              Conectando com EvolutionAPI...
            </p>
          </div>
        ) : error ? (
          <div className="text-center p-4">
            <AlertTriangle size={60} className="mx-auto text-red-400 mb-2" />
            <p className="text-sm text-red-600 font-medium">Erro ao gerar QR Code</p>
            <p className="text-xs text-red-500 mt-1">Verifique a configura√ß√£o da API</p>
          </div>
        ) : qrCodeUrl ? (
          <div className="w-full h-full p-4 flex items-center justify-center">
            <img
              src={qrCodeUrl}
              alt="WhatsApp QR Code da EvolutionAPI"
              className="w-full h-full object-contain"
              onError={() => {
                console.error('Failed to load QR code image');
              }}
            />
          </div>
        ) : expired ? (
          <div className="text-center p-4">
            <QrCode size={60} className="mx-auto text-red-300 mb-2" />
            <p className="text-sm text-red-600 font-medium">QR Code expirado</p>
          </div>
        ) : (
          <div className="text-center">
            <QrCode size={60} className="mx-auto text-gray-400 mb-2" />
            <p className="text-sm text-muted-foreground">
              Clique em Conectar para gerar QR Code
            </p>
          </div>
        )}
      </div>

      {/* Instructions */}
      <div className="text-center max-w-sm">
        <p className="text-sm text-muted-foreground leading-relaxed">
          {error ? (
            "Verifique a configura√ß√£o da EvolutionAPI e tente novamente."
          ) : (
            <>
              Abra o WhatsApp no seu celular, acesse <span className="font-medium">Configura√ß√µes</span> ‚Üí 
              <span className="font-medium"> WhatsApp Web</span> e escaneie o c√≥digo QR.
            </>
          )}
        </p>
      </div>
      
      {/* Action buttons */}
      <div className="flex flex-col items-center gap-3">
        {(!qrCodeUrl && !isGenerating) || error ? (
          <Button 
            onClick={handleRefresh} 
            className="min-w-[180px]"
            disabled={isGenerating}
          >
            <QrCode className="mr-2 h-4 w-4" />
            {error ? 'Tentar Novamente' : 'Conectar WhatsApp'}
          </Button>
        ) : null}
        
        {expired && !error && (
          <Button onClick={handleRefresh} variant="outline" className="min-w-[180px]">
            <RefreshCw className="mr-2 h-4 w-4" />
            Gerar novo QR Code
          </Button>
        )}
        
        {qrCodeUrl && !expired && !error && onConnect && (
          <Button 
            variant="default" 
            onClick={onConnect}
            className="min-w-[180px]"
          >
            Simular Conex√£o
          </Button>
        )}
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/ConnectionSettings.tsx
================================================================================\n

import { WhatsAppConnection } from "@/types/whatsapp";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription
} from "@/components/ui/sheet";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Trash2 } from "lucide-react";

interface ConnectionSettingsProps {
  isOpen: boolean;
  onClose: () => void;
  connection: WhatsAppConnection | null;
  onDeleteConnection: (connectionId: string) => void;
}

export default function ConnectionSettings({
  isOpen,
  onClose,
  connection,
  onDeleteConnection
}: ConnectionSettingsProps) {
  if (!connection) return null;
  
  const handleDelete = () => {
    onDeleteConnection(connection.id);
    onClose();
  };
  
  return (
    <Sheet open={isOpen} onOpenChange={onClose}>
      <SheetContent>
        <SheetHeader>
          <SheetTitle>Configura√ß√µes da Conex√£o</SheetTitle>
          <SheetDescription>
            {connection.name} - {connection.customerName}
          </SheetDescription>
        </SheetHeader>
        
        <div className="py-6 space-y-6">
          <div className="space-y-4">
            <h3 className="text-sm font-medium">Informa√ß√µes da Conex√£o</h3>
            <div className="grid gap-2">
              <div className="flex justify-between items-center">
                <span className="text-sm text-muted-foreground">Status:</span>
                <span className="text-sm font-medium">
                  {connection.status === "connected" ? (
                    <span className="text-green-600">Conectado</span>
                  ) : connection.status === "pending" ? (
                    <span className="text-yellow-600">Pendente</span>
                  ) : (
                    <span className="text-red-600">Desconectado</span>
                  )}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-muted-foreground">N√∫mero:</span>
                <span className="text-sm font-medium">{connection.phoneNumber}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-muted-foreground">Mensagens:</span>
                <span className="text-sm font-medium">{connection.messageCount.toLocaleString()}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-muted-foreground">√öltima atividade:</span>
                <span className="text-sm font-medium">
                  {connection.lastActive ? new Date(connection.lastActive).toLocaleDateString() : "-"}
                </span>
              </div>
            </div>
          </div>
          
          <div className="space-y-4">
            <h3 className="text-sm font-medium">Configura√ß√µes</h3>
            <div className="space-y-2">
              <label htmlFor="conn-name" className="text-sm">Nome da conex√£o</label>
              <Input 
                id="conn-name"
                defaultValue={connection.name}
              />
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex flex-col">
                <span className="font-medium text-sm">Receber notifica√ß√µes</span>
                <span className="text-xs text-muted-foreground">Alertas sobre desconex√µes</span>
              </div>
              <div>
                {/* Aqui seria implementado um switch/toggle */}
                <button className="bg-primary h-5 w-10 rounded-full relative">
                  <span className="absolute right-1 top-1 h-3 w-3 rounded-full bg-white"></span>
                </button>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex flex-col">
                <span className="font-medium text-sm">Resposta autom√°tica</span>
                <span className="text-xs text-muted-foreground">Usar IA para responder mensagens</span>
              </div>
              <div>
                {/* Aqui seria implementado um switch/toggle */}
                <button className="bg-muted h-5 w-10 rounded-full relative">
                  <span className="absolute left-1 top-1 h-3 w-3 rounded-full bg-white"></span>
                </button>
              </div>
            </div>
          </div>
          
          <div className="pt-4">
            <Button variant="outline" className="w-full" onClick={onClose}>
              Salvar Configura√ß√µes
            </Button>
          </div>
          
          <div className="pt-2">
            <Button 
              variant="destructive" 
              className="w-full"
              onClick={handleDelete}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              Remover Conex√£o
            </Button>
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/StatisticsSection.tsx
================================================================================\n

import { Phone, MessageSquare } from "lucide-react";
import { WhatsAppConnection } from "@/types/whatsapp";

interface StatisticsSectionProps {
  connections: WhatsAppConnection[];
}

export default function StatisticsSection({ connections }: StatisticsSectionProps) {
  const activeConnections = connections.filter(c => c.status === "connected").length;
  const totalMessages = connections.reduce((acc, conn) => acc + conn.messageCount, 0);
  
  return (
    <div className="flex items-center gap-4 w-full md:w-auto">
      <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm border flex items-center gap-2">
        <Phone className="text-green-500 h-5 w-5" />
        <div>
          <p className="text-sm text-muted-foreground">Conex√µes</p>
          <p className="font-medium">
            {activeConnections} <span className="text-xs text-muted-foreground">/ {connections.length} total</span>
          </p>
        </div>
      </div>
      
      <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm border flex items-center gap-2">
        <MessageSquare className="text-blue-500 h-5 w-5" />
        <div>
          <p className="text-sm text-muted-foreground">Mensagens</p>
          <p className="font-medium">
            {totalMessages.toLocaleString()}
          </p>
        </div>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/ConnectionsList.tsx
================================================================================\n

import { WhatsAppConnection } from "@/types/whatsapp";
import ConnectionCard from "./ConnectionCard";
import { Smartphone } from "lucide-react";
import { Button } from "@/components/ui/button";

interface ConnectionsListProps {
  connections: WhatsAppConnection[];
  searchTerm: string;
  onClearSearch: () => void;
  onGenerateQrCode: (connection: WhatsAppConnection) => void;
  onViewMessages: (connection: WhatsAppConnection) => void;
  onOpenSettings: (connection: WhatsAppConnection) => void;
  onDeleteConnection: (connectionId: string) => void;
}

export default function ConnectionsList({
  connections,
  searchTerm,
  onClearSearch,
  onGenerateQrCode,
  onViewMessages,
  onOpenSettings,
  onDeleteConnection
}: ConnectionsListProps) {
  if (connections.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <Smartphone size={48} className="text-muted-foreground/30 mb-4" />
        <p className="text-muted-foreground mb-2">Nenhuma conex√£o encontrada.</p>
        {searchTerm && (
          <Button variant="link" onClick={onClearSearch}>
            Limpar busca
          </Button>
        )}
      </div>
    );
  }
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {connections.map(connection => (
        <ConnectionCard
          key={connection.id}
          connection={connection}
          onGenerateQrCode={onGenerateQrCode}
          onViewMessages={onViewMessages}
          onOpenSettings={onOpenSettings}
          onDeleteConnection={onDeleteConnection}
        />
      ))}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/WhatsAppConnectionCard.tsx
================================================================================\n

import { useState } from "react";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { QrCode, RefreshCw, CheckCircle2, AlertCircle } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import WhatsAppQRCode from "@/components/whatsapp/WhatsAppQRCode";
import { Agent } from "@/types";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";
import { useAuthCheck } from "@/hooks/useAuthCheck";

interface WhatsAppConnectionCardProps {
  agent: Agent;
  onRefresh?: (agent: Agent) => void;
}

export default function WhatsAppConnectionCard({ agent, onRefresh }: WhatsAppConnectionCardProps) {
  const { user } = useAuthCheck();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(null);
  const [qrError, setQrError] = useState<string | null>(null);
  
  const { configs, aiAgents, connectInstance, globalConfigs, createAgentWithAutoInstance } = useEvolutionAPI(user?.id);

  const handleGenerateQR = async () => {
    if (!user?.id) {
      setQrError('Usu√°rio n√£o autenticado');
      return;
    }

    // Verificar se h√° configura√ß√£o global
    if (globalConfigs.length === 0) {
      setQrError('EvolutionAPI n√£o configurada. Entre em contato com o administrador.');
      return;
    }

    // Encontrar ou criar configura√ß√£o para este agente
    let aiAgent = aiAgents.find(ai => ai.agent_id === agent.id);
    let evolutionConfigId = aiAgent?.evolution_config_id;

    if (!evolutionConfigId) {
      try {
        console.log('Criando inst√¢ncia autom√°tica para agente:', agent.id);
        toast.loading('Criando inst√¢ncia WhatsApp...');
        
        const evolutionConfig = await createAgentWithAutoInstance(
          agent.id, 
          agent.name, 
          agent.phoneNumber
        );
        
        evolutionConfigId = evolutionConfig.id;
        toast.dismiss();
        toast.success('Inst√¢ncia WhatsApp criada automaticamente');
      } catch (error) {
        console.error('Erro ao criar inst√¢ncia autom√°tica:', error);
        toast.dismiss();
        setQrError('Erro ao criar inst√¢ncia autom√°tica. Tente novamente.');
        return;
      }
    }

    setIsGenerating(true);
    setQrError(null);
    
    try {
      console.log('Gerando QR para agente:', agent.id, 'com config:', evolutionConfigId);
      
      const qrCodeData = await connectInstance(evolutionConfigId);
      
      if (qrCodeData) {
        // Handle different QR code formats
        let qrCodeUrl = qrCodeData;
        if (typeof qrCodeData === 'string' && !qrCodeData.startsWith('data:') && !qrCodeData.startsWith('http')) {
          qrCodeUrl = `data:image/png;base64,${qrCodeData}`;
        }
        setQrCodeUrl(qrCodeUrl);
        toast.success('QR code gerado! Escaneie com o WhatsApp.');
      } else {
        throw new Error('QR code n√£o foi retornado pela EvolutionAPI');
      }
    } catch (error) {
      console.error('Error generating QR code:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      setQrError(`Erro ao gerar QR code: ${errorMessage}`);
      toast.error('Erro ao conectar com EvolutionAPI');
    } finally {
      setIsGenerating(false);
    }
  };
  
  const handleConnect = () => {
    setTimeout(() => {
      setIsModalOpen(false);
      if (onRefresh) onRefresh(agent);
      toast.success("Conex√£o realizada com sucesso!");
    }, 1000);
  };
  
  return (
    <>
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg">WhatsApp Conex√£o</CardTitle>
          <CardDescription>
            Status da conex√£o do WhatsApp com EvolutionAPI
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between">
            <div>
              <p className="font-medium">{agent.name}</p>
              <p className="text-sm text-muted-foreground">{agent.sector}</p>
            </div>
            
            {agent.whatsappConnected ? (
              <div className="flex items-center text-green-500">
                <CheckCircle2 className="mr-1 h-4 w-4" />
                <span className="text-sm">Conectado</span>
              </div>
            ) : (
              <div className="flex items-center text-yellow-500">
                <AlertCircle className="mr-1 h-4 w-4" />
                <span className="text-sm">Desconectado</span>
              </div>
            )}
          </div>
        </CardContent>
        <CardFooter>
          <Button
            variant={agent.whatsappConnected ? "outline" : "default"}
            className="w-full"
            onClick={() => setIsModalOpen(true)}
            disabled={globalConfigs.length === 0}
          >
            {agent.whatsappConnected ? (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                Reconectar WhatsApp
              </>
            ) : (
              <>
                <QrCode className="mr-2 h-4 w-4" />
                {globalConfigs.length === 0 ? 'EvolutionAPI n√£o configurada' : 'Conectar WhatsApp'}
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
      
      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Conectar WhatsApp</DialogTitle>
            <DialogDescription>
              {globalConfigs.length === 0 
                ? "EvolutionAPI n√£o configurada. Entre em contato com o administrador."
                : "Conecte usando a EvolutionAPI para WhatsApp real."
              }
            </DialogDescription>
          </DialogHeader>
          
          {globalConfigs.length > 0 && (
            <WhatsAppQRCode
              isGenerating={isGenerating}
              qrCodeUrl={qrCodeUrl || undefined}
              error={qrError || undefined}
              onRefresh={handleGenerateQR}
              onConnect={handleConnect}
              className="my-4"
            />
          )}
          
          {globalConfigs.length === 0 && (
            <div className="text-center py-8">
              <AlertCircle className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground">
                EvolutionAPI n√£o configurada globalmente.
              </p>
              <p className="text-sm text-muted-foreground mt-2">
                Entre em contato com o administrador para ativar a integra√ß√£o.
              </p>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/CustomerFilter.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Customer } from "@/types/whatsapp";

interface CustomerFilterProps {
  customers: Customer[];
  selectedCustomerId: string | null;
  onSelectCustomer: (customerId: string | null) => void;
}

export default function CustomerFilter({
  customers,
  selectedCustomerId,
  onSelectCustomer
}: CustomerFilterProps) {
  return (
    <div className="flex flex-wrap gap-2">
      <Button 
        variant={!selectedCustomerId ? "secondary" : "outline"} 
        size="sm"
        onClick={() => onSelectCustomer(null)}
      >
        Todos os clientes
      </Button>
      
      {customers.map(customer => (
        <Button
          key={customer.id}
          variant={selectedCustomerId === customer.id ? "secondary" : "outline"}
          size="sm"
          onClick={() => onSelectCustomer(customer.id)}
        >
          {customer.name}
        </Button>
      ))}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/whatsapp/QRCodeGeneratorModal.tsx
================================================================================\n

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { RefreshCw, Copy, CheckCircle, AlertCircle } from "lucide-react";
import { useState, useEffect } from "react";
import { toast } from "sonner";

interface QRCodeGeneratorModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConnect: () => void;
  instanceName: string;
  agentName?: string;
}

export default function QRCodeGeneratorModal({ 
  isOpen, 
  onClose, 
  onConnect,
  instanceName,
  agentName 
}: QRCodeGeneratorModalProps) {
  const [qrCode, setQrCode] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [timeLeft, setTimeLeft] = useState<number>(120); // 2 minutos
  const [isExpired, setIsExpired] = useState(false);

  // Gerar QR code automaticamente quando o modal abre
  useEffect(() => {
    if (isOpen && !qrCode) {
      generateQRCode();
    }
  }, [isOpen]);

  // Timer para expira√ß√£o do QR code
  useEffect(() => {
    if (!qrCode || isExpired) return;

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          setIsExpired(true);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [qrCode, isExpired]);

  const generateQRCode = async () => {
    setIsGenerating(true);
    setIsExpired(false);
    setTimeLeft(120);

    try {
      // Simular chamada para API do Evolution
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Gerar QR code usando um servi√ßo p√∫blico para demonstra√ß√£o
      const qrData = `whatsapp-connection-${instanceName}-${Date.now()}`;
      const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qrData)}`;
      
      setQrCode(qrCodeUrl);
      toast.success("QR Code gerado com sucesso!");
    } catch (error) {
      toast.error("Erro ao gerar QR Code. Tente novamente.");
      console.error('Erro ao gerar QR code:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = () => {
    if (qrCode) {
      navigator.clipboard.writeText(qrCode);
      toast.success('Link do QR Code copiado!');
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleConnect = () => {
    toast.success("Conectando ao WhatsApp...");
    setTimeout(() => {
      onConnect();
      toast.success("WhatsApp conectado com sucesso!");
    }, 1500);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="text-center">
            Conectar WhatsApp
            {agentName && <div className="text-sm font-normal text-muted-foreground mt-1">{agentName}</div>}
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {/* QR Code Display */}
          <div className="flex justify-center p-4 border-2 border-dashed border-gray-200 rounded-lg bg-gray-50">
            {isGenerating ? (
              <div className="flex flex-col items-center space-y-3">
                <RefreshCw className="h-12 w-12 animate-spin text-blue-500" />
                <p className="text-sm text-muted-foreground">Gerando QR Code...</p>
              </div>
            ) : qrCode && !isExpired ? (
              <div className="flex flex-col items-center space-y-3">
                <img 
                  src={qrCode} 
                  alt="QR Code para conex√£o WhatsApp"
                  className="w-64 h-64 border rounded"
                />
                <div className="flex items-center gap-2 text-sm text-green-600">
                  <CheckCircle className="h-4 w-4" />
                  Expira em: {formatTime(timeLeft)}
                </div>
              </div>
            ) : isExpired ? (
              <div className="flex flex-col items-center space-y-3">
                <AlertCircle className="h-12 w-12 text-red-500" />
                <p className="text-sm text-red-600">QR Code expirado</p>
                <Button onClick={generateQRCode} size="sm">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Gerar Novo
                </Button>
              </div>
            ) : (
              <div className="flex flex-col items-center space-y-3">
                <div className="w-64 h-64 border-2 border-dashed border-gray-300 rounded flex items-center justify-center">
                  <p className="text-sm text-muted-foreground">QR Code n√£o dispon√≠vel</p>
                </div>
                <Button onClick={generateQRCode} size="sm">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Gerar QR Code
                </Button>
              </div>
            )}
          </div>

          {/* Instru√ß√µes */}
          <div className="text-sm text-center text-muted-foreground space-y-2">
            <p className="font-medium">Como conectar:</p>
            <ol className="text-left space-y-1">
              <li>1. Abra o WhatsApp no seu celular</li>
              <li>2. Toque em Configura√ß√µes ‚Üí Aparelhos conectados</li>
              <li>3. Toque em "Conectar um aparelho"</li>
              <li>4. Escaneie o c√≥digo QR acima</li>
            </ol>
          </div>

          {/* Bot√µes de a√ß√£o */}
          <div className="flex flex-col gap-2">
            {qrCode && !isExpired && (
              <>
                <Button onClick={handleConnect} className="w-full">
                  Simular Conex√£o
                </Button>
                <Button onClick={copyToClipboard} variant="outline" className="w-full">
                  <Copy className="h-4 w-4 mr-2" />
                  Copiar Link
                </Button>
              </>
            )}
            <Button onClick={onClose} variant="outline" className="w-full">
              Cancelar
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptsLibraryModal.tsx
================================================================================\n

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Prompt } from "@/types/prompts";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Copy, Filter, Search, Plus, Zap } from "lucide-react";
import { toast } from "sonner";
import { useIsMobile } from "@/hooks/use-mobile";

interface PromptsLibraryModalProps {
  isOpen: boolean;
  onClose: () => void;
  prompts: Prompt[];
  onSelect: (prompt: Prompt) => void;
  onEdit: (prompt: Prompt) => void;
  onDelete: (id: string) => void;
  onCreateNew: () => void;
  niches: string[];
}

export default function PromptsLibraryModal({
  isOpen,
  onClose,
  prompts,
  onSelect,
  onCreateNew,
  niches
}: PromptsLibraryModalProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [activeNiche, setActiveNiche] = useState<string>("all");
  const isMobile = useIsMobile();

  const filteredPrompts = prompts.filter(prompt => {
    const matchesSearch = prompt.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          prompt.text.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesNiche = activeNiche === "all" || prompt.niche === activeNiche;
    
    return matchesSearch && matchesNiche;
  });

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className={`
        ${isMobile ? 'w-[95vw] h-[90vh] max-w-none' : 'w-full max-w-4xl h-[85vh]'} 
        p-0 flex flex-col max-h-[90vh]
      `}>
        <DialogHeader className="px-6 py-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 flex-shrink-0">
          <DialogTitle className="text-xl font-semibold flex items-center gap-2">
            <Filter className="h-5 w-5 text-primary" />
            Biblioteca de Prompts
          </DialogTitle>
          <p className="text-sm text-muted-foreground mt-1">
            Selecione um prompt para usar na cria√ß√£o do agente
          </p>
        </DialogHeader>
        
        <div className="px-6 py-4 border-b bg-muted/30 flex-shrink-0">
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Buscar prompts por nome ou conte√∫do..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Button onClick={onCreateNew} className="sm:w-auto w-full">
              <Plus className="mr-2 h-4 w-4" />
              Criar Novo
            </Button>
          </div>
        </div>
        
        <Tabs defaultValue="all" value={activeNiche} onValueChange={setActiveNiche} className="flex-1 flex flex-col min-h-0">
          <div className="px-6 py-3 border-b flex-shrink-0">
            <TabsList className={`
              ${isMobile ? 'flex-wrap h-auto gap-1 p-1' : 'h-10'}
              w-full justify-start
            `}>
              <TabsTrigger value="all" className={`
                ${isMobile ? 'text-xs px-2 py-1' : 'text-sm px-4 py-2'}
                flex-shrink-0
              `}>
                Todos ({prompts.length})
              </TabsTrigger>
              {niches.map((niche) => {
                const nicheCount = prompts.filter(p => p.niche === niche).length;
                return (
                  <TabsTrigger 
                    key={niche} 
                    value={niche} 
                    className={`
                      ${isMobile ? 'text-xs px-2 py-1' : 'text-sm px-4 py-2'}
                      flex-shrink-0
                    `}
                  >
                    {niche} ({nicheCount})
                  </TabsTrigger>
                );
              })}
            </TabsList>
          </div>
          
          <div className="flex-1 min-h-0">
            <ScrollArea className="h-full">
              <div className="px-6 py-4">
                <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-2'}`}>
                  {filteredPrompts.length > 0 ? (
                    filteredPrompts.map((prompt) => (
                      <div 
                        key={prompt.id} 
                        className="group p-4 border rounded-lg hover:border-primary/50 transition-all duration-200 bg-card hover:shadow-md"
                      >
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <h3 className="font-semibold text-base truncate">{prompt.name}</h3>
                              {prompt.isDefault && (
                                <span className="px-2 py-0.5 bg-primary/10 text-primary rounded-full text-xs font-medium flex-shrink-0">
                                  Padr√£o
                                </span>
                              )}
                            </div>
                            <p className="text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded inline-block">
                              Nicho: {prompt.niche}
                            </p>
                          </div>
                          <div className="flex items-center gap-1 ml-2">
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-8 w-8 p-0 opacity-60 hover:opacity-100" 
                              onClick={() => {
                                navigator.clipboard.writeText(prompt.text);
                                toast.success("Prompt copiado!");
                              }}
                              title="Copiar prompt"
                            >
                              <Copy size={14} />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-8 w-8 p-0 text-primary hover:text-primary opacity-60 hover:opacity-100"
                              onClick={() => {
                                onSelect(prompt);
                                onClose();
                              }}
                              title="Usar este prompt para criar agente"
                            >
                              <Zap size={14} />
                            </Button>
                          </div>
                        </div>
                        
                        <div className="mb-4">
                          <p className="text-sm text-foreground/80 line-clamp-4 leading-relaxed">
                            {prompt.text}
                          </p>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="col-span-full">
                      <div className="text-center py-12">
                        <div className="mx-auto w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
                          <Search className="h-8 w-8 text-muted-foreground" />
                        </div>
                        <h3 className="text-lg font-medium mb-2">Nenhum prompt encontrado</h3>
                        <p className="text-muted-foreground mb-4">
                          {searchTerm ? 
                            "Tente ajustar os filtros ou termos de busca" : 
                            "Comece criando seu primeiro prompt personalizado"
                          }
                        </p>
                        <Button onClick={onCreateNew} variant="outline">
                          <Plus className="mr-2 h-4 w-4" />
                          Criar novo prompt
                        </Button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </ScrollArea>
          </div>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptsManagementModal.tsx
================================================================================\n

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs } from "@/components/ui/tabs";
import { FileText } from "lucide-react";
import { toast } from "sonner";
import { Prompt } from "@/types/prompts";
import { useIsMobile } from "@/hooks/use-mobile";
import PromptStatsCards from "./PromptStatsCards";
import PromptSearchAndActions from "./PromptSearchAndActions";
import PromptTabs from "./PromptTabs";
import PromptList from "./PromptList";

interface PromptsManagementModalProps {
  isOpen: boolean;
  onClose: () => void;
  prompts: Prompt[];
  onCreatePrompt: () => void;
  onEditPrompt: (prompt: Prompt) => void;
  onDeletePrompt: (id: string) => void;
  allNiches: string[];
}

export default function PromptsManagementModal({
  isOpen,
  onClose,
  prompts,
  onCreatePrompt,
  onEditPrompt,
  onDeletePrompt,
  allNiches
}: PromptsManagementModalProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [activeNiche, setActiveNiche] = useState<string>("all");
  const isMobile = useIsMobile();

  const filteredPrompts = prompts.filter(prompt => {
    const matchesSearch = prompt.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          prompt.text.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesNiche = activeNiche === "all" || prompt.niche === activeNiche;
    
    return matchesSearch && matchesNiche;
  });

  const handleCopyPrompt = (text: string, name: string) => {
    navigator.clipboard.writeText(text);
    toast.success(`Prompt "${name}" copiado!`);
  };

  const handleDeletePrompt = (id: string, name: string) => {
    onDeletePrompt(id);
  };

  if (isMobile) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="w-screen h-screen max-w-none max-h-none m-0 p-0 rounded-none border-0 flex flex-col">
          {/* Fixed Header */}
          <div className="flex-shrink-0 px-4 py-4 border-b bg-background">
            <DialogHeader>
              <DialogTitle className="text-lg font-semibold flex items-center gap-2">
                <FileText className="h-4 w-4 text-primary" />
                Biblioteca de Prompts
              </DialogTitle>
              <p className="text-sm text-muted-foreground mt-1">
                Gerencie prompts personalizados para seus agentes IA
              </p>
            </DialogHeader>
          </div>
          
          {/* Scrollable Content */}
          <div className="flex-1 overflow-hidden">
            <div className="h-full overflow-y-auto">
              <div className="px-4 py-4 space-y-4">
                {/* Stats Cards */}
                <PromptStatsCards 
                  prompts={prompts} 
                  allNiches={allNiches} 
                  isMobile={isMobile} 
                />

                {/* Search and Actions */}
                <PromptSearchAndActions
                  searchTerm={searchTerm}
                  onSearchChange={setSearchTerm}
                  onCreatePrompt={onCreatePrompt}
                  isMobile={isMobile}
                />

                {/* Tabs */}
                <Tabs defaultValue="all" value={activeNiche} onValueChange={setActiveNiche}>
                  <PromptTabs
                    activeNiche={activeNiche}
                    onNicheChange={setActiveNiche}
                    prompts={prompts}
                    allNiches={allNiches}
                    isMobile={isMobile}
                  />

                  <PromptList
                    activeNiche={activeNiche}
                    filteredPrompts={filteredPrompts}
                    searchTerm={searchTerm}
                    onCreatePrompt={onCreatePrompt}
                    onCopyPrompt={handleCopyPrompt}
                    onEditPrompt={onEditPrompt}
                    onDeletePrompt={handleDeletePrompt}
                    isMobile={isMobile}
                  />
                </Tabs>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  // Desktop version
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="w-full max-w-5xl h-[85vh] max-h-[85vh] rounded-lg p-0 overflow-hidden flex flex-col">
        {/* Fixed Header */}
        <div className="flex-shrink-0 border-b bg-background px-6 py-4">
          <DialogHeader>
            <DialogTitle className="text-xl font-semibold flex items-center gap-2">
              <FileText className="h-5 w-5 text-primary" />
              Biblioteca de Prompts
            </DialogTitle>
            <p className="text-sm text-muted-foreground mt-1">
              Gerencie prompts personalizados para seus agentes IA
            </p>
          </DialogHeader>
        </div>
        
        {/* Scrollable Content */}
        <div className="flex-1 min-h-0 overflow-hidden">
          <ScrollArea className="h-full">
            <div className="space-y-4 pb-6">
              {/* Stats Cards */}
              <div className="bg-muted/20 px-6 py-4">
                <PromptStatsCards 
                  prompts={prompts} 
                  allNiches={allNiches} 
                  isMobile={isMobile} 
                />
              </div>

              {/* Search and Actions */}
              <div className="px-6">
                <PromptSearchAndActions
                  searchTerm={searchTerm}
                  onSearchChange={setSearchTerm}
                  onCreatePrompt={onCreatePrompt}
                  isMobile={isMobile}
                />
              </div>

              {/* Tabs and Content */}
              <div className="px-6">
                <Tabs defaultValue="all" value={activeNiche} onValueChange={setActiveNiche}>
                  <PromptTabs
                    activeNiche={activeNiche}
                    onNicheChange={setActiveNiche}
                    prompts={prompts}
                    allNiches={allNiches}
                    isMobile={isMobile}
                  />

                  <PromptList
                    activeNiche={activeNiche}
                    filteredPrompts={filteredPrompts}
                    searchTerm={searchTerm}
                    onCreatePrompt={onCreatePrompt}
                    onCopyPrompt={handleCopyPrompt}
                    onEditPrompt={onEditPrompt}
                    onDeletePrompt={handleDeletePrompt}
                    isMobile={isMobile}
                  />
                </Tabs>
              </div>
            </div>
          </ScrollArea>
        </div>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentTestDialog.tsx
================================================================================\n

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Bot, Send, X } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Agent, Message } from "@/types";

interface AgentTestDialogProps {
  agent: Agent | null;
  isOpen: boolean;
  onClose: () => void;
}

export default function AgentTestDialog({ agent, isOpen, onClose }: AgentTestDialogProps) {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);

  if (!agent) return null;

  const handleSendMessage = () => {
    if (!message.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: `msg-${Date.now()}`,
      content: message,
      timestamp: new Date().toISOString(),
      sender: "user",
      agentId: agent.id,
      isAi: false
    };
    
    setMessages([...messages, userMessage]);
    setMessage("");
    setIsTyping(true);

    // Simulate agent response after a delay
    setTimeout(() => {
      const agentResponse: Message = {
        id: `msg-${Date.now() + 1}`,
        content: generateAgentResponse(message, agent),
        timestamp: new Date().toISOString(),
        sender: "agent",
        agentId: agent.id,
        isAi: true
      };
      
      setMessages(prevMessages => [...prevMessages, agentResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAgentResponse = (userMessage: string, agent: Agent) => {
    // Simple response generator for testing
    const responses = [
      `Como agente de ${agent.sector}, posso ajudar com isso.`,
      `Obrigado por sua mensagem. Estou aqui para ajudar com quest√µes de ${agent.sector}.`,
      `Entendi sua d√∫vida sobre ${userMessage.substring(0, 20)}... Posso esclarecer isso para voc√™.`,
      `Agradecemos seu contato. Vou analisar sua solicita√ß√£o relacionada a ${agent.sector}.`
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleSendMessage();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md max-h-[80vh] flex flex-col">
        <DialogHeader className="border-b pb-2">
          <DialogTitle className="flex items-center">
            <Bot className="mr-2 h-5 w-5" />
            Testar Agente de IA
          </DialogTitle>
          <p className="text-sm text-muted-foreground">
            Digite uma mensagem para ver como o agente "{agent.name}" responder√°.
          </p>
        </DialogHeader>

        <div className="flex flex-col flex-1 overflow-hidden">
          <div className="bg-muted/30 p-2 rounded-md text-center text-sm">
            <h3 className="font-medium">Conversa de Teste</h3>
          </div>
          
          <div className="flex-1 overflow-y-auto p-4 space-y-4 min-h-[300px]">
            {messages.length === 0 ? (
              <div className="h-full flex flex-col items-center justify-center text-center text-muted-foreground">
                <Bot className="h-16 w-16 mb-4 opacity-20" />
                <p>Digite uma mensagem para iniciar a conversa de teste.</p>
              </div>
            ) : (
              messages.map(msg => (
                <div 
                  key={msg.id} 
                  className={`flex ${msg.isAi ? "justify-start" : "justify-end"}`}
                >
                  <div 
                    className={`max-w-[80%] p-3 rounded-lg ${
                      msg.isAi 
                        ? "bg-muted text-foreground" 
                        : "bg-primary text-primary-foreground"
                    }`}
                  >
                    <p>{msg.content}</p>
                    <p className="text-xs opacity-70 text-right mt-1">
                      {new Date(msg.timestamp).toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              ))
            )}

            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-muted p-3 rounded-lg">
                  <div className="flex space-x-2">
                    <div className="h-2 w-2 rounded-full bg-zinc-400 animate-bounce"></div>
                    <div className="h-2 w-2 rounded-full bg-zinc-400 animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    <div className="h-2 w-2 rounded-full bg-zinc-400 animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="p-4 border-t mt-auto">
            <div className="flex items-center space-x-2">
              <Input
                placeholder="Digite uma mensagem para testar..."
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={handleKeyDown}
                disabled={isTyping}
                className="flex-1"
              />
              <Button onClick={handleSendMessage} disabled={!message.trim() || isTyping}>
                <Send className="h-4 w-4" />
                <span className="sr-only">Enviar</span>
              </Button>
            </div>
            
            <div className="flex items-center mt-2 text-xs text-muted-foreground">
              <Bot className="h-3 w-3 mr-1" />
              <span>Modelo: GPT-4</span>
              <p className="ml-auto">
                Este √© um ambiente de teste. As mensagens n√£o ser√£o salvas ou enviadas para clientes reais.
              </p>
            </div>
          </div>
        </div>
        
        <Button variant="outline" className="mt-2" onClick={onClose}>
          Fechar
        </Button>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PlanInfoCard.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useNavigate } from "react-router-dom";
import { Settings, TrendingUp } from "lucide-react";

interface PlanInfoCardProps {
  planName: string;
  agentLimit: number;
  billingCycle: string;
  agentsUsed: number;
  compact?: boolean;
}

export default function PlanInfoCard({
  planName,
  agentLimit,
  billingCycle,
  agentsUsed,
  compact = false
}: PlanInfoCardProps) {
  const navigate = useNavigate();
  const usagePercentage = (agentsUsed / agentLimit) * 100;
  
  // Define colors based on usage percentage
  const getProgressColor = () => {
    if (usagePercentage >= 90) return "bg-gradient-to-r from-red-500 to-red-600";
    if (usagePercentage >= 70) return "bg-gradient-to-r from-yellow-500 to-orange-500";
    return "bg-gradient-to-r from-blue-500 to-purple-600";
  };
  
  if (compact) {
    return (
      <Card className="bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border-gray-200 dark:border-gray-700">
        <CardHeader className="pb-2">
          <CardTitle className="text-xs font-medium text-gray-700 dark:text-gray-300 flex items-center gap-1">
            <TrendingUp className="h-3 w-3" />
            Plano Atual
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-0 space-y-2">
          <div className="flex items-center justify-between">
            <div className="min-w-0 flex-1">
              <h3 className="font-semibold text-sm truncate text-gray-900 dark:text-gray-100">{planName}</h3>
              <p className="text-xs text-gray-600 dark:text-gray-400">
                {agentsUsed}/{agentLimit} agentes ‚Ä¢ {billingCycle === "monthly" ? "Mensal" : "Anual"}
              </p>
            </div>
          </div>
          
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 overflow-hidden">
            <div 
              className={`${getProgressColor()} h-1.5 rounded-full transition-all duration-500 ease-out`}
              style={{ width: `${Math.min(usagePercentage, 100)}%` }}
            ></div>
          </div>
          
          <div className="flex items-center justify-between pt-1">
            <span className="text-xs text-gray-500 dark:text-gray-400 font-medium">
              {usagePercentage.toFixed(1)}% utilizado
            </span>
            <Button 
              variant="outline" 
              size="sm" 
              className="h-6 px-2 text-xs bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-200 hover:border-blue-300 dark:border-blue-700 text-blue-700 hover:text-blue-800 dark:text-blue-300 font-medium transition-all duration-200"
              onClick={() => navigate("/franchisee/plans")}
            >
              <Settings className="w-3 h-3 mr-1" />
              Gerenciar
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <div className="bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl p-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 shadow-sm hover:shadow-md transition-shadow duration-200">
      <div className="flex-1">
        <div className="flex items-center gap-2 mb-1">
          <TrendingUp className="w-5 h-5 text-blue-600 dark:text-blue-400" />
          <h3 className="font-semibold text-gray-900 dark:text-gray-100">Plano atual: {planName}</h3>
        </div>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
          Limite de {agentLimit} agentes ‚Ä¢ {billingCycle === "monthly" ? "Mensal" : "Anual"}
        </p>
        <div className="w-full sm:max-w-xs">
          <div className="flex justify-between text-xs mb-2 text-gray-600 dark:text-gray-400">
            <span className="font-medium">{agentsUsed} agentes usados</span>
            <span className="font-medium">{agentLimit} total</span>
          </div>
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden shadow-inner">
            <div 
              className={`${getProgressColor()} h-3 rounded-full transition-all duration-500 ease-out shadow-sm relative`}
              style={{ width: `${Math.min(usagePercentage, 100)}%` }}
            >
              <div className="absolute inset-0 bg-white/20 rounded-full"></div>
            </div>
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400 mt-1 font-medium">
            {usagePercentage.toFixed(1)}% utilizado
          </div>
        </div>
      </div>
      <Button 
        variant="outline" 
        size="sm" 
        className="shrink-0 px-6 py-3 bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 dark:hover:from-blue-800/30 dark:hover:to-indigo-800/30 border-blue-200 hover:border-blue-300 dark:border-blue-700 dark:hover:border-blue-600 text-blue-700 hover:text-blue-800 dark:text-blue-300 dark:hover:text-blue-200 font-semibold transition-all duration-200 shadow-sm hover:shadow-md"
        onClick={() => navigate("/franchisee/plans")}
      >
        <Settings className="w-4 h-4 mr-2" />
        Gerenciar Plano
      </Button>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/WhatsAppConnectionModal.tsx
================================================================================\n

import { useState, useEffect, useRef } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { CheckCircle2, AlertCircle, Smartphone, Wifi, Clock, RefreshCw, Zap } from "lucide-react";
import WhatsAppQRCode from "@/components/whatsapp/WhatsAppQRCode";
import { Agent, Customer } from "@/types";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";
import { useAuthCheck } from "@/hooks/useAuthCheck";

interface WhatsAppConnectionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onConnect: () => void;
  agent: Agent | null;
  customer: Customer | null;
}

export default function WhatsAppConnectionModal({
  isOpen,
  onClose,
  onConnect,
  agent,
  customer
}: WhatsAppConnectionModalProps) {
  const { user } = useAuthCheck();
  const [isGeneratingQr, setIsGeneratingQr] = useState(false);
  const [currentQrCode, setCurrentQrCode] = useState<string | null>(null);
  const [qrError, setQrError] = useState<string | null>(null);
  const [connectionStep, setConnectionStep] = useState<'loading' | 'instructions' | 'qr' | 'connecting' | 'connected' | 'error'>('loading');
  const [evolutionConfigId, setEvolutionConfigId] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const [isCreatingInstance, setIsCreatingInstance] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<string>('unknown');
  const [lastStatusCheck, setLastStatusCheck] = useState<Date | null>(null);
  
  const statusCheckInterval = useRef<NodeJS.Timeout | null>(null);
  const { 
    configs, 
    aiAgents, 
    connectInstance, 
    checkInstanceStatus, 
    forceStatusSync,
    globalConfigs, 
    createAgentWithAutoInstance, 
    refreshData,
    isMonitoring
  } = useEvolutionAPI(user?.id);

  // Reset state when modal opens
  useEffect(() => {
    if (isOpen && agent) {
      console.log('üöÄ Modal opened for agent:', agent.id);
      resetModalState();
      
      // Small delay to allow data to load
      setTimeout(() => {
        initializeEvolutionConfig();
      }, 500);
    }
  }, [isOpen, agent?.id]);

  // Cleanup interval on unmount or modal close
  useEffect(() => {
    return () => {
      if (statusCheckInterval.current) {
        clearInterval(statusCheckInterval.current);
        statusCheckInterval.current = null;
      }
    };
  }, []);

  const resetModalState = () => {
    setConnectionStep('loading');
    setQrError(null);
    setCurrentQrCode(null);
    setEvolutionConfigId(null);
    setRetryCount(0);
    setIsCreatingInstance(false);
    setConnectionStatus('unknown');
    setLastStatusCheck(null);
    
    // Clear any existing interval
    if (statusCheckInterval.current) {
      clearInterval(statusCheckInterval.current);
      statusCheckInterval.current = null;
    }
  };

  const startEnhancedStatusChecking = (configId: string) => {
    if (statusCheckInterval.current) {
      clearInterval(statusCheckInterval.current);
    }

    console.log('üîÑ Iniciando verifica√ß√£o de status APRIMORADA para:', configId);

    // Primeira verifica√ß√£o imediatamente
    performStatusCheck(configId);

    // Configurar polling mais inteligente
    statusCheckInterval.current = setInterval(async () => {
      await performStatusCheck(configId);
    }, 2000); // Verificar a cada 2 segundos
  };

  const performStatusCheck = async (configId: string) => {
    try {
      console.log('üîç Verificando status...');
      const statusData = await checkInstanceStatus(configId);
      
      setLastStatusCheck(new Date());
      setConnectionStatus(statusData?.status || 'unknown');
      
      console.log('üìä Status retornado:', statusData);
      
      if (statusData && statusData.status === 'connected') {
        console.log('üéâ CONEX√ÉO WHATSAPP DETECTADA!');
        handleConnectionSuccess();
      } else {
        console.log('‚è≥ Ainda aguardando conex√£o. Status atual:', statusData?.status);
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar status:', error);
      // Continuar tentando em caso de erro tempor√°rio
    }
  };

  const handleConnectionSuccess = () => {
    console.log('üéâ Executando handleConnectionSuccess');
    
    // Parar o polling
    if (statusCheckInterval.current) {
      clearInterval(statusCheckInterval.current);
      statusCheckInterval.current = null;
    }
    
    setConnectionStep('connected');
    
    // Mostrar toast de sucesso
    toast.success('üéâ WhatsApp conectado com sucesso!');
    
    // Aguardar um pouco para o usu√°rio ver a mensagem e fechar automaticamente
    setTimeout(() => {
      onConnect();
      onClose();
    }, 2500);
  };

  const initializeEvolutionConfig = async () => {
    if (!agent || !user?.id || isCreatingInstance) {
      console.log('Cannot initialize - missing data or already creating');
      return;
    }

    console.log('Initializing Evolution config for agent:', agent.id);
    setConnectionStep('loading');
    setQrError(null);
    
    try {
      // Verificar se h√° configura√ß√£o global
      if (globalConfigs.length === 0) {
        console.log('No global configs found');
        setQrError('EvolutionAPI n√£o configurada. Entre em contato com o administrador.');
        setConnectionStep('error');
        return;
      }

      // Primeiro, refresh dos dados para garantir estado atualizado
      await refreshData();

      // Encontrar configura√ß√£o AI Agent existente para este agente
      const aiAgent = aiAgents.find(ai => ai.agent_id === agent.id);
      
      if (aiAgent && aiAgent.evolution_config_id) {
        console.log('Found existing AI Agent configuration:', aiAgent.evolution_config_id);
        setEvolutionConfigId(aiAgent.evolution_config_id);
        
        // Verificar o status atual da configura√ß√£o
        const currentConfig = configs.find(c => c.id === aiAgent.evolution_config_id);
        if (currentConfig) {
          setConnectionStatus(currentConfig.status);
          
          if (currentConfig.status === 'connected') {
            setConnectionStep('connected');
            setTimeout(() => handleConnectionSuccess(), 1000);
            return;
          } else if (currentConfig.status === 'qr_ready' && currentConfig.qr_code) {
            setCurrentQrCode(currentConfig.qr_code);
            setConnectionStep('qr');
            startEnhancedStatusChecking(currentConfig.id);
            return;
          }
        }
        
        setConnectionStep('instructions');
        return;
      }

      // Procurar por configura√ß√£o Evolution existente para este usu√°rio
      const existingConfig = configs.find(c => c.instance_name.includes(agent.id));
      
      if (existingConfig) {
        console.log('Found existing Evolution config:', existingConfig.id);
        setEvolutionConfigId(existingConfig.id);
        setConnectionStatus(existingConfig.status);
        
        if (existingConfig.status === 'connected') {
          setConnectionStep('connected');
          setTimeout(() => handleConnectionSuccess(), 1000);
          return;
        }
        
        setConnectionStep('instructions');
        return;
      }

      // Se n√£o existe, criar nova inst√¢ncia (apenas uma vez)
      if (!isCreatingInstance) {
        console.log('Creating new Evolution instance for agent:', agent.id);
        setIsCreatingInstance(true);
        
        try {
          const evolutionConfig = await createAgentWithAutoInstance(
            agent.id, 
            agent.name, 
            agent.phoneNumber
          );
          
          if (evolutionConfig && evolutionConfig.id) {
            console.log('Successfully created Evolution config:', evolutionConfig.id);
            setEvolutionConfigId(evolutionConfig.id);
            setConnectionStatus(evolutionConfig.status || 'disconnected');
            setConnectionStep('instructions');
            toast.success('Inst√¢ncia WhatsApp criada automaticamente');
            
            // Refresh data after creation
            await refreshData();
          } else {
            throw new Error('Falha ao criar inst√¢ncia autom√°tica');
          }
        } catch (error) {
          console.error('Error creating automatic instance:', error);
          setQrError('Erro ao criar inst√¢ncia autom√°tica. Tente novamente ou entre em contato com o suporte.');
          setConnectionStep('error');
        } finally {
          setIsCreatingInstance(false);
        }
      }
    } catch (error) {
      console.error('Error initializing Evolution config:', error);
      setQrError('Erro ao inicializar configura√ß√£o EvolutionAPI');
      setConnectionStep('error');
      setIsCreatingInstance(false);
    }
  };

  const handleGenerateQrCode = async () => {
    if (!evolutionConfigId) {
      setQrError('Configura√ß√£o EvolutionAPI n√£o encontrada');
      return;
    }

    setIsGeneratingQr(true);
    setConnectionStep('qr');
    setQrError(null);
    setCurrentQrCode(null);
    
    try {
      console.log('üéØ Generating QR code with EvolutionAPI for config:', evolutionConfigId);
      
      const qrCodeData = await connectInstance(evolutionConfigId);
      
      if (qrCodeData) {
        // Tratar diferentes formatos de QR code da EvolutionAPI
        let qrCodeUrl = qrCodeData;
        
        // Se for base64, converter para data URL
        if (typeof qrCodeData === 'string' && !qrCodeData.startsWith('data:') && !qrCodeData.startsWith('http')) {
          qrCodeUrl = `data:image/png;base64,${qrCodeData}`;
        }
        
        setCurrentQrCode(qrCodeUrl);
        setRetryCount(0);
        setConnectionStatus('qr_ready');
        console.log('‚úÖ QR code generated successfully');
        toast.success('QR code gerado! Escaneie com o WhatsApp.');
        
        // Iniciar verifica√ß√£o de status aprimorada
        startEnhancedStatusChecking(evolutionConfigId);
      } else {
        throw new Error('QR code n√£o foi retornado pela EvolutionAPI');
      }
    } catch (error) {
      console.error('Error generating QR code:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      setQrError(`Erro ao gerar QR code: ${errorMessage}`);
      setRetryCount(prev => prev + 1);
      
      if (retryCount < 2) {
        toast.error('Erro ao conectar. Tentando novamente em 3 segundos...');
        setTimeout(() => {
          handleGenerateQrCode();
        }, 3000);
      } else {
        toast.error('Erro ao conectar com EvolutionAPI ap√≥s v√°rias tentativas');
      }
    } finally {
      setIsGeneratingQr(false);
    }
  };

  const handleForceSync = async () => {
    if (!evolutionConfigId) return;
    
    try {
      console.log('üîÑ Forcing status sync...');
      toast.loading('Sincronizando status...');
      
      const statusData = await forceStatusSync(evolutionConfigId);
      
      toast.dismiss();
      
      if (statusData?.status === 'connected') {
        handleConnectionSuccess();
      } else {
        setConnectionStatus(statusData?.status || 'unknown');
        toast.success('Status sincronizado');
      }
    } catch (error) {
      toast.dismiss();
      console.error('Error forcing sync:', error);
      toast.error('Erro ao sincronizar status');
    }
  };

  const handleConnect = () => {
    setConnectionStep('connecting');
    onConnect();
  };

  const handleRetryConnection = () => {
    resetModalState();
    initializeEvolutionConfig();
  };

  const handleClose = () => {
    // Parar verifica√ß√£o de status
    if (statusCheckInterval.current) {
      clearInterval(statusCheckInterval.current);
      statusCheckInterval.current = null;
    }
    
    onClose();
  };

  const getStatusBadge = () => {
    const statusConfig = {
      connected: { color: 'bg-green-500', icon: CheckCircle2, text: 'Conectado' },
      qr_ready: { color: 'bg-blue-500', icon: Clock, text: 'QR Pronto' },
      disconnected: { color: 'bg-red-500', icon: AlertCircle, text: 'Desconectado' },
      connecting: { color: 'bg-yellow-500', icon: RefreshCw, text: 'Conectando' },
      unknown: { color: 'bg-gray-500', icon: AlertCircle, text: 'Desconhecido' }
    };

    const config = statusConfig[connectionStatus as keyof typeof statusConfig] || statusConfig.unknown;
    const Icon = config.icon;

    return (
      <Badge variant="secondary" className="flex items-center gap-1">
        <div className={`w-2 h-2 rounded-full ${config.color}`} />
        <Icon className="h-3 w-3" />
        {config.text}
      </Badge>
    );
  };

  const renderStepContent = () => {
    switch (connectionStep) {
      case 'loading':
        return (
          <div className="space-y-4 text-center">
            <Clock className="h-12 w-12 text-blue-500 mx-auto animate-spin" />
            <div>
              <h4 className="font-medium">
                {isCreatingInstance ? 'Criando inst√¢ncia...' : 'Configurando...'}
              </h4>
              <p className="text-sm text-muted-foreground mt-1">
                {isCreatingInstance 
                  ? 'Criando inst√¢ncia autom√°tica para o agente' 
                  : 'Verificando configura√ß√µes existentes'
                }
              </p>
            </div>
          </div>
        );

      case 'error':
        return (
          <div className="space-y-4">
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                {qrError}
              </AlertDescription>
            </Alert>
            
            <div className="space-y-3">
              <h4 className="font-medium text-sm">Informa√ß√µes do Agente:</h4>
              <div className="bg-muted p-3 rounded-lg space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Cliente:</span>
                  <span className="text-sm font-medium">{customer?.businessName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Agente:</span>
                  <span className="text-sm font-medium">{agent?.name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Status:</span>
                  <span className="text-sm font-medium text-red-600">Erro na Configura√ß√£o</span>
                </div>
              </div>
            </div>
          </div>
        );
      
      case 'instructions':
        return (
          <div className="space-y-4">
            <Alert>
              <Smartphone className="h-4 w-4" />
              <AlertDescription>
                Inst√¢ncia WhatsApp configurada automaticamente. Clique em "Conectar WhatsApp" para gerar o QR code.
              </AlertDescription>
            </Alert>
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <h4 className="font-medium text-sm">Status da Inst√¢ncia:</h4>
                {getStatusBadge()}
              </div>
              
              <div className="bg-muted p-3 rounded-lg space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Cliente:</span>
                  <span className="text-sm font-medium">{customer?.businessName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Agente:</span>
                  <span className="text-sm font-medium">{agent?.name}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Setor:</span>
                  <span className="text-sm font-medium">{agent?.sector}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">Status API:</span>
                  <span className="text-sm font-medium text-green-600">Configurada</span>
                </div>
                {isMonitoring && (
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Monitoramento:</span>
                    <span className="text-sm font-medium text-blue-600 flex items-center gap-1">
                      <Wifi className="h-3 w-3" />
                      Ativo
                    </span>
                  </div>
                )}
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="font-medium text-sm">Como conectar:</h4>
              <ol className="text-sm text-muted-foreground space-y-2">
                <li className="flex items-start gap-2">
                  <span className="bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium mt-0.5">1</span>
                  <span>Clique em "Conectar WhatsApp" para gerar o QR code</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium mt-0.5">2</span>
                  <span>Abra o WhatsApp no celular</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium mt-0.5">3</span>
                  <span>V√° em Configura√ß√µes ‚Üí WhatsApp Web/Desktop</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium mt-0.5">4</span>
                  <span>Escaneie o c√≥digo QR</span>
                </li>
                <li className="flex items-start gap-2">
                  <span className="bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium mt-0.5">5</span>
                  <span>üéâ O sistema detectar√° automaticamente a conex√£o!</span>
                </li>
              </ol>
            </div>
          </div>
        );
      
      case 'qr':
        return (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Alert className="flex-1">
                <Wifi className="h-4 w-4" />
                <AlertDescription>
                  {qrError 
                    ? "Erro ao conectar com EvolutionAPI. Verifique a configura√ß√£o."
                    : "Escaneie o c√≥digo QR com o WhatsApp."
                  }
                </AlertDescription>
              </Alert>
              {getStatusBadge()}
            </div>
            
            {lastStatusCheck && (
              <div className="text-center">
                <div className="inline-flex items-center gap-2 px-3 py-2 bg-blue-50 border border-blue-200 rounded-lg">
                  <RefreshCw className="h-4 w-4 text-blue-600 animate-spin" />
                  <span className="text-sm font-medium text-blue-800">
                    üîÑ Verificando conex√£o automaticamente...
                  </span>
                  <span className="text-xs text-blue-600">
                    (√∫ltima: {lastStatusCheck.toLocaleTimeString()})
                  </span>
                </div>
              </div>
            )}
            
            <WhatsAppQRCode
              isGenerating={isGeneratingQr}
              qrCodeUrl={currentQrCode || undefined}
              error={qrError || undefined}
              onRefresh={handleGenerateQrCode}
              onConnect={handleConnect}
              className="flex justify-center"
            />
          </div>
        );
      
      case 'connecting':
        return (
          <div className="space-y-4 text-center">
            <CheckCircle2 className="h-12 w-12 text-green-500 mx-auto animate-pulse" />
            <div>
              <h4 className="font-medium">Conectando...</h4>
              <p className="text-sm text-muted-foreground mt-1">
                Estabelecendo conex√£o com o WhatsApp via EvolutionAPI
              </p>
            </div>
          </div>
        );

      case 'connected':
        return (
          <div className="space-y-4 text-center">
            <CheckCircle2 className="h-12 w-12 text-green-500 mx-auto" />
            <div>
              <h4 className="font-medium text-green-600">üéâ WhatsApp Conectado!</h4>
              <p className="text-sm text-muted-foreground mt-1">
                Conex√£o estabelecida com sucesso. Fechando automaticamente...
              </p>
            </div>
          </div>
        );
      
      default:
        return null;
    }
  };

  const getDialogTitle = () => {
    switch (connectionStep) {
      case 'loading':
        return isCreatingInstance ? 'Criando Inst√¢ncia' : 'Configurando Inst√¢ncia';
      case 'error':
        return 'Erro na Configura√ß√£o';
      case 'instructions':
        return 'Conectar Agente ao WhatsApp';
      case 'qr':
        return 'Escaneie o QR Code';
      case 'connecting':
        return 'Conectando WhatsApp';
      case 'connected':
        return 'Conectado com Sucesso!';
      default:
        return 'Conectar WhatsApp';
    }
  };

  const getDialogDescription = () => {
    switch (connectionStep) {
      case 'loading':
        return isCreatingInstance 
          ? 'Criando inst√¢ncia autom√°tica da EvolutionAPI para o agente...'
          : 'Verificando configura√ß√µes existentes...';
      case 'error':
        return 'Erro na configura√ß√£o. Verifique se a EvolutionAPI est√° configurada corretamente.';
      case 'instructions':
        return 'Inst√¢ncia configurada automaticamente. Pronto para conectar ao WhatsApp.';
      case 'qr':
        return 'QR Code gerado. Sistema verificando conex√£o automaticamente a cada 2 segundos.';
      case 'connecting':
        return 'Estabelecendo conex√£o com o WhatsApp...';
      case 'connected':
        return 'WhatsApp conectado com sucesso! O modal ser√° fechado automaticamente.';
      default:
        return '';
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{getDialogTitle()}</DialogTitle>
          <DialogDescription>
            {getDialogDescription()}
          </DialogDescription>
        </DialogHeader>
        
        <div className="py-4">
          {renderStepContent()}
        </div>
        
        <DialogFooter className="flex-col sm:flex-row gap-2">
          {connectionStep === 'error' && (
            <>
              <Button variant="outline" onClick={handleClose} className="w-full sm:w-auto">
                Fechar
              </Button>
              <Button onClick={handleRetryConnection} className="w-full sm:w-auto">
                Tentar Novamente
              </Button>
            </>
          )}

          {connectionStep === 'instructions' && (
            <>
              <Button variant="outline" onClick={handleClose} className="w-full sm:w-auto">
                Configurar depois
              </Button>
              {connectionStatus !== 'unknown' && (
                <Button variant="outline" onClick={handleForceSync} className="w-full sm:w-auto">
                  <Zap className="h-4 w-4 mr-2" />
                  Sincronizar Status
                </Button>
              )}
              <Button onClick={handleGenerateQrCode} className="w-full sm:w-auto">
                Conectar WhatsApp
              </Button>
            </>
          )}
          
          {connectionStep === 'qr' && (
            <>
              <Button variant="outline" onClick={() => setConnectionStep('instructions')} className="w-full sm:w-auto">
                Voltar
              </Button>
              <Button variant="outline" onClick={handleForceSync} className="w-full sm:w-auto">
                <Zap className="h-4 w-4 mr-2" />
                For√ßar Sync
              </Button>
              {qrError && (
                <Button onClick={handleRetryConnection} className="w-full sm:w-auto">
                  Tentar Novamente
                </Button>
              )}
              <Button variant="outline" onClick={handleClose} className="w-full sm:w-auto">
                Configurar depois
              </Button>
            </>
          )}
          
          {(connectionStep === 'connecting' || connectionStep === 'connected') && (
            <Button variant="outline" onClick={handleClose} disabled={connectionStep === 'connected'} className="w-full sm:w-auto">
              {connectionStep === 'connected' ? 'Fechando...' : 'Conectando...'}
            </Button>
          )}

          {connectionStep === 'loading' && (
            <Button variant="outline" onClick={handleClose} className="w-full sm:w-auto">
              Cancelar
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptStatsCards.tsx
================================================================================\n

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Prompt } from "@/types/prompts";

interface PromptStatsCardsProps {
  prompts: Prompt[];
  allNiches: string[];
  isMobile?: boolean;
}

export default function PromptStatsCards({ prompts, allNiches, isMobile }: PromptStatsCardsProps) {
  const cardClass = isMobile 
    ? "bg-gradient-to-br border-200 dark:border-800/30"
    : "bg-gradient-to-br border-200 dark:border-800/30";
  
  const headerClass = isMobile ? "pb-1 px-3 pt-3" : "pb-1";
  const contentClass = isMobile ? "pt-0 px-3 pb-3" : "pt-0";
  const titleClass = "text-xs font-medium";
  const valueClass = "text-lg font-bold";

  return (
    <div className="grid grid-cols-3 gap-2">
      <Card className={`${cardClass} from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-200 dark:border-blue-800/30`}>
        <CardHeader className={headerClass}>
          <CardTitle className={`${titleClass} text-blue-700 dark:text-blue-300`}>
            Total
          </CardTitle>
        </CardHeader>
        <CardContent className={contentClass}>
          <div className={`${valueClass} text-blue-900 dark:text-blue-100`}>
            {prompts.length}
          </div>
        </CardContent>
      </Card>

      <Card className={`${cardClass} from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-green-200 dark:border-green-800/30`}>
        <CardHeader className={headerClass}>
          <CardTitle className={`${titleClass} text-green-700 dark:text-green-300`}>
            Nichos
          </CardTitle>
        </CardHeader>
        <CardContent className={contentClass}>
          <div className={`${valueClass} text-green-900 dark:text-green-100`}>
            {allNiches.length}
          </div>
        </CardContent>
      </Card>

      <Card className={`${cardClass} from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-purple-200 dark:border-purple-800/30`}>
        <CardHeader className={headerClass}>
          <CardTitle className={`${titleClass} text-purple-700 dark:text-purple-300`}>
            Padr√£o
          </CardTitle>
        </CardHeader>
        <CardContent className={contentClass}>
          <div className={`${valueClass} text-purple-900 dark:text-purple-100`}>
            {prompts.filter(p => p.isDefault).length}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentChatInterface.tsx
================================================================================\n

import { useState, useRef, useEffect } from "react";
import { MessageSquare, Send, Mic, X, Paperclip, Bot, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Message } from "@/types";

interface AgentChatInterfaceProps {
  agentId: string;
  agentName: string;
  messages?: Message[];
  onSendMessage: (message: string) => void;
  isProcessing?: boolean;
  allowVoiceInput?: boolean;
  allowAttachments?: boolean;
  className?: string;
}

export default function AgentChatInterface({
  agentId,
  agentName,
  messages = [],
  onSendMessage,
  isProcessing = false,
  allowVoiceInput = false,
  allowAttachments = false,
  className = ""
}: AgentChatInterfaceProps) {
  const [inputValue, setInputValue] = useState("");
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Rolagem autom√°tica para a √∫ltima mensagem
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);
  
  const handleSendMessage = () => {
    if (inputValue.trim() && !isProcessing) {
      onSendMessage(inputValue);
      setInputValue("");
    }
  };
  
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  
  const toggleRecording = () => {
    setIsRecording(!isRecording);
    
    // Simula√ß√£o de grava√ß√£o de voz
    if (!isRecording) {
      setTimeout(() => {
        setIsRecording(false);
        onSendMessage("[Mensagem de voz]");
      }, 3000);
    }
  };
  
  // Formata√ß√£o de timestamp para exibi√ß√£o
  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };
  
  return (
    <div className={`flex flex-col h-full ${className}`}>
      {/* Cabe√ßalho do chat */}
      <div className="bg-muted px-4 py-3 flex items-center border-b">
        <Bot className="h-5 w-5 mr-2 text-primary" />
        <div>
          <h3 className="font-medium">{agentName}</h3>
          <p className="text-xs text-muted-foreground">ID: {agentId}</p>
        </div>
      </div>
      
      {/* √Årea de mensagens */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length > 0 ? (
          messages.map((message, index) => (
            <div 
              key={index} 
              className={`flex ${message.isAi ? "justify-start" : "justify-end"} mb-2`}
            >
              <div 
                className={`max-w-[75%] p-3 rounded-lg ${
                  message.isAi 
                    ? "bg-muted text-foreground" 
                    : "bg-primary text-primary-foreground"
                }`}
              >
                <p>{message.content}</p>
                <div className={`text-xs mt-1 ${message.isAi ? "text-muted-foreground" : "text-primary-foreground/80"}`}>
                  {formatTime(message.timestamp)}
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="h-full flex flex-col items-center justify-center text-center text-muted-foreground p-6">
            <MessageSquare className="h-12 w-12 mb-4 opacity-20" />
            <h3 className="font-medium mb-1">Nenhuma mensagem</h3>
            <p className="text-sm">Envie uma mensagem para iniciar a conversa com o agente.</p>
          </div>
        )}
        
        {isProcessing && (
          <div className="flex justify-start mb-2">
            <div className="bg-muted p-3 rounded-lg">
              <div className="flex space-x-2 items-center h-6">
                <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: "0.4s" }}></div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef}></div>
      </div>
      
      {/* √Årea de entrada de mensagem */}
      <div className="p-3 border-t">
        {isRecording && (
          <div className="mb-3 bg-red-50 dark:bg-red-900/20 text-red-600 dark:text-red-400 p-2 rounded-md flex items-center justify-between">
            <div className="flex items-center">
              <div className="w-2 h-2 bg-red-600 dark:bg-red-400 rounded-full animate-pulse mr-2"></div>
              <span className="text-sm">Gravando √°udio...</span>
            </div>
            <Button 
              variant="ghost" 
              size="icon" 
              className="h-6 w-6 rounded-full" 
              onClick={() => setIsRecording(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        )}
        
        <div className="flex items-center gap-2">
          {allowAttachments && (
            <Button variant="ghost" size="icon">
              <Paperclip className="h-5 w-5 text-muted-foreground" />
            </Button>
          )}
          
          <Input
            placeholder="Digite sua mensagem..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={isProcessing || isRecording}
            className="flex-1"
          />
          
          {allowVoiceInput && (
            <Button 
              variant={isRecording ? "destructive" : "ghost"}
              size="icon"
              onClick={toggleRecording}
              disabled={isProcessing}
            >
              <Mic className="h-5 w-5" />
            </Button>
          )}
          
          <Button 
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isProcessing || isRecording}
          >
            <Send className="h-5 w-5" />
          </Button>
        </div>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptList.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { TabsContent } from "@/components/ui/tabs";
import { Plus, FileText } from "lucide-react";
import { Prompt } from "@/types/prompts";
import PromptCard from "./PromptCard";

interface PromptListProps {
  activeNiche: string;
  filteredPrompts: Prompt[];
  searchTerm: string;
  onCreatePrompt: () => void;
  onCopyPrompt: (text: string, name: string) => void;
  onEditPrompt: (prompt: Prompt) => void;
  onDeletePrompt: (id: string, name: string) => void;
  isMobile?: boolean;
}

export default function PromptList({
  activeNiche,
  filteredPrompts,
  searchTerm,
  onCreatePrompt,
  onCopyPrompt,
  onEditPrompt,
  onDeletePrompt,
  isMobile
}: PromptListProps) {
  const gridClass = isMobile ? "space-y-3 pb-6" : "grid gap-3 grid-cols-1";

  if (filteredPrompts.length > 0) {
    return (
      <TabsContent value={activeNiche} className="mt-0">
        <div className={gridClass}>
          {filteredPrompts.map((prompt) => (
            <PromptCard
              key={prompt.id}
              prompt={prompt}
              onCopy={onCopyPrompt}
              onEdit={onEditPrompt}
              onDelete={onDeletePrompt}
              isMobile={isMobile}
            />
          ))}
        </div>
      </TabsContent>
    );
  }

  return (
    <TabsContent value={activeNiche}>
      <div className="text-center py-12 px-4">
        <div className="mx-auto w-16 h-16 bg-muted/50 rounded-full flex items-center justify-center mb-6">
          <FileText className="h-8 w-8 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold mb-3">Nenhum prompt encontrado</h3>
        <p className="text-sm text-muted-foreground mb-6 max-w-md mx-auto leading-relaxed">
          {searchTerm ? 
            "Tente ajustar os filtros ou termos de busca para encontrar o que procura" : 
            "Comece criando seu primeiro prompt personalizado para seus agentes IA"
          }
        </p>
        <Button 
          onClick={onCreatePrompt} 
          variant="outline" 
          size="default"
          className="px-6 py-3 h-11"
        >
          <Plus className="mr-2 h-4 w-4" />
          Criar novo prompt
        </Button>
      </div>
    </TabsContent>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/CreateAgentModalContent.tsx
================================================================================\n

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import AgentFormTab from "./AgentFormTab";
import CustomerFormTab from "./CustomerFormTab";
import { Agent, Customer } from "@/types";
import { Prompt } from "@/types/prompts";

interface CreateAgentModalContentProps {
  activeTab: string;
  setActiveTab: (tab: string) => void;
  isNewCustomer: boolean;
  setIsNewCustomer: (isNew: boolean) => void;
  selectedCustomerId: string;
  formData: Partial<Agent>;
  customerData: Partial<Customer>;
  knowledgeBaseFile: File | null;
  selectedPromptId: string;
  editing?: Agent;
  existingCustomers: Customer[];
  prompts: Prompt[];
  onFormChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  onCustomerChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  onCustomerSelect: (value: string) => void;
  onSwitchChange: (checked: boolean) => void;
  onFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onPromptSelect: (value: string) => void;
  onOpenPromptsLibrary?: () => void;
  onNext: () => void;
  onPrevious: () => void;
  onClose: () => void;
  onSubmit: () => void;
}

export default function CreateAgentModalContent({
  activeTab,
  setActiveTab,
  isNewCustomer,
  setIsNewCustomer,
  selectedCustomerId,
  formData,
  customerData,
  knowledgeBaseFile,
  selectedPromptId,
  editing,
  existingCustomers,
  prompts,
  onFormChange,
  onCustomerChange,
  onCustomerSelect,
  onSwitchChange,
  onFileChange,
  onPromptSelect,
  onOpenPromptsLibrary,
  onNext,
  onPrevious,
  onClose,
  onSubmit,
}: CreateAgentModalContentProps) {
  return (
    <ScrollArea className="max-h-[calc(90vh-130px)] px-6 flex-1 min-h-0">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="agent">Dados do Agente</TabsTrigger>
          <TabsTrigger value="customer">Dados do Cliente</TabsTrigger>
        </TabsList>
        
        <form className="space-y-4 py-4">
          <TabsContent value="agent">
            <AgentFormTab
              formData={formData}
              prompts={prompts}
              selectedPromptId={selectedPromptId}
              onFormChange={onFormChange}
              onSwitchChange={onSwitchChange}
              onFileChange={onFileChange}
              onPromptSelect={onPromptSelect}
              onOpenPromptsLibrary={onOpenPromptsLibrary}
              onNext={onNext}
              knowledgeBaseFile={knowledgeBaseFile}
            />
          </TabsContent>

          <TabsContent value="customer">
            <CustomerFormTab
              isNewCustomer={isNewCustomer}
              selectedCustomerId={selectedCustomerId}
              customerData={customerData}
              existingCustomers={existingCustomers}
              editing={!!editing}
              onNewCustomerChange={setIsNewCustomer}
              onCustomerSelect={onCustomerSelect}
              onCustomerDataChange={onCustomerChange}
              onPrevious={onPrevious}
              onClose={onClose}
              onSubmit={onSubmit}
              isEditing={!!editing}
            />
          </TabsContent>
        </form>
      </Tabs>
    </ScrollArea>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/CreateAgentModal.tsx
================================================================================\n

import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Agent, Customer } from "@/types";
import { Prompt } from "@/types/prompts";
import { toast } from "sonner";
import { useIsMobile } from "@/hooks/use-mobile";
import { useCreateAgentModal } from "@/hooks/useCreateAgentModal";
import CreateAgentModalHeader from "./CreateAgentModalHeader";
import CreateAgentModalContent from "./CreateAgentModalContent";

interface CreateAgentModalProps {
  open: boolean;
  onClose: () => void;
  onSubmit: (agent: Partial<Agent>, customer?: Partial<Customer>, isNewCustomer?: boolean) => void;
  editing?: Agent;
  existingCustomers?: Customer[];
  prompts?: Prompt[];
  selectedPrompt?: Prompt | null;
  onOpenPromptsLibrary?: () => void;
}

export default function CreateAgentModal({ 
  open, 
  onClose, 
  onSubmit, 
  editing, 
  existingCustomers = [],
  prompts = [],
  selectedPrompt = null,
  onOpenPromptsLibrary
}: CreateAgentModalProps) {
  const isMobile = useIsMobile();
  
  const {
    activeTab,
    setActiveTab,
    isNewCustomer,
    setIsNewCustomer,
    selectedCustomerId,
    formData,
    customerData,
    knowledgeBaseFile,
    selectedPromptId,
    handleChange,
    handleCustomerChange,
    handleCustomerSelect,
    handleSwitchChange,
    handleFileChange,
    handlePromptSelect,
    validateAgentForm,
    validateCustomerForm,
    nextTab,
    prevTab,
  } = useCreateAgentModal({ editing, selectedPrompt, open });

  // Update the prompt selection handler to work with the prompts array
  const handlePromptSelectWithPrompts = (value: string) => {
    handlePromptSelect(value);
    
    if (value) {
      const selectedPrompt = prompts.find(p => p.id === value);
      if (selectedPrompt) {
        // This will be handled by the hook's effect
      }
    }
  };

  const handleSubmit = () => {
    if (!validateAgentForm() || !validateCustomerForm()) {
      return;
    }
    
    // Submit with customer data if it's a new customer
    if (isNewCustomer) {
      onSubmit(formData, customerData, true);
    } else {
      // If using existing customer, just pass the ID
      onSubmit(
        { 
          ...formData, 
          customerId: selectedCustomerId 
        }, 
        undefined, 
        false
      );
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className={`
        ${isMobile ? 'w-[95vw] h-[90vh] max-w-none' : 'w-full max-w-4xl h-[85vh]'} 
        p-0 flex flex-col max-h-[90vh] overflow-hidden
      `}>
        <CreateAgentModalHeader editing={!!editing} />
        
        <CreateAgentModalContent
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          isNewCustomer={isNewCustomer}
          setIsNewCustomer={setIsNewCustomer}
          selectedCustomerId={selectedCustomerId}
          formData={formData}
          customerData={customerData}
          knowledgeBaseFile={knowledgeBaseFile}
          selectedPromptId={selectedPromptId}
          editing={editing}
          existingCustomers={existingCustomers}
          prompts={prompts}
          onFormChange={handleChange}
          onCustomerChange={handleCustomerChange}
          onCustomerSelect={handleCustomerSelect}
          onSwitchChange={handleSwitchChange}
          onFileChange={handleFileChange}
          onPromptSelect={handlePromptSelectWithPrompts}
          onOpenPromptsLibrary={onOpenPromptsLibrary}
          onNext={nextTab}
          onPrevious={prevTab}
          onClose={onClose}
          onSubmit={handleSubmit}
        />
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptTabs.tsx
================================================================================\n

import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Prompt } from "@/types/prompts";

interface PromptTabsProps {
  activeNiche: string;
  onNicheChange: (niche: string) => void;
  prompts: Prompt[];
  allNiches: string[];
  isMobile?: boolean;
}

export default function PromptTabs({ 
  activeNiche, 
  onNicheChange, 
  prompts, 
  allNiches, 
  isMobile 
}: PromptTabsProps) {
  const containerClass = isMobile ? "mb-4 -mx-4 px-4" : "mb-4";
  const maxWidthClass = isMobile ? "max-w-[80px]" : "max-w-[120px]";

  if (isMobile) {
    return (
      <div className={containerClass}>
        <div className="overflow-x-auto">
          <TabsList className="flex w-max min-w-full h-auto p-1 bg-muted rounded-md">
            <TabsTrigger 
              value="all" 
              className="text-xs px-3 py-2 whitespace-nowrap font-medium h-8 flex-shrink-0"
            >
              Todos ({prompts.length})
            </TabsTrigger>
            {allNiches.map((niche) => {
              const nicheCount = prompts.filter(p => p.niche === niche).length;
              return (
                <TabsTrigger 
                  key={niche} 
                  value={niche} 
                  className="text-xs px-3 py-2 whitespace-nowrap font-medium h-8 flex-shrink-0"
                >
                  <span className={`${maxWidthClass} truncate`}>
                    {niche}
                  </span>
                  <span className="ml-1">({nicheCount})</span>
                </TabsTrigger>
              );
            })}
          </TabsList>
        </div>
      </div>
    );
  }

  return (
    <div className={containerClass}>
      <ScrollArea className="w-full whitespace-nowrap">
        <TabsList className="inline-flex w-max h-auto p-1 bg-muted rounded-md">
          <TabsTrigger 
            value="all" 
            className="text-xs px-3 py-2 whitespace-nowrap font-medium h-8"
          >
            Todos ({prompts.length})
          </TabsTrigger>
          {allNiches.map((niche) => {
            const nicheCount = prompts.filter(p => p.niche === niche).length;
            return (
              <TabsTrigger 
                key={niche} 
                value={niche} 
                className="text-xs px-3 py-2 whitespace-nowrap font-medium h-8"
              >
                <span className={`${maxWidthClass} truncate`}>
                  {niche}
                </span>
                <span className="ml-1">({nicheCount})</span>
              </TabsTrigger>
            );
          })}
        </TabsList>
      </ScrollArea>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptCard.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Copy, Edit, Trash2, Sparkles } from "lucide-react";
import { Prompt } from "@/types/prompts";

interface PromptCardProps {
  prompt: Prompt;
  onCopy: (text: string, name: string) => void;
  onEdit: (prompt: Prompt) => void;
  onDelete: (id: string, name: string) => void;
  isMobile?: boolean;
}

export default function PromptCard({ prompt, onCopy, onEdit, onDelete, isMobile }: PromptCardProps) {
  const titleClass = isMobile 
    ? "text-sm font-semibold break-words leading-tight min-w-0 flex-1"
    : "text-base font-semibold break-words leading-tight min-w-0 flex-1";
  
  const descriptionClass = isMobile
    ? "text-sm leading-relaxed flex-1 break-words overflow-hidden text-foreground/70 line-clamp-3"
    : "text-sm leading-relaxed flex-1 break-words overflow-hidden text-foreground/70 line-clamp-3";
  
  const headerPadding = isMobile ? "pb-3 flex-shrink-0" : "pb-4 flex-shrink-0";
  const footerPadding = isMobile ? "mt-3 pt-2" : "mt-4 pt-3";

  return (
    <Card className="group hover:shadow-md transition-all duration-200 border-border/50">
      <CardHeader className={headerPadding}>
        <div className="flex items-start justify-between gap-3">
          <div className="flex-1 min-w-0">
            <div className="space-y-2">
              <div className="flex items-start gap-2 flex-wrap">
                <CardTitle className={titleClass}>
                  {prompt.name}
                </CardTitle>
                {prompt.isDefault && (
                  <Badge variant="secondary" className="bg-primary/10 text-primary text-xs flex-shrink-0">
                    <Sparkles className="mr-1 h-3 w-3" />
                    <span>Padr√£o</span>
                  </Badge>
                )}
              </div>
              <Badge variant="outline" className="text-xs w-fit font-medium">
                {prompt.niche}
              </Badge>
            </div>
          </div>
          
          <div className="flex items-center gap-1 flex-shrink-0">
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-8 w-8 p-0 hover:bg-muted"
              onClick={() => onCopy(prompt.text, prompt.name)}
              title="Copiar prompt"
            >
              <Copy size={14} />
            </Button>
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-8 w-8 p-0 hover:bg-muted"
              onClick={() => onEdit(prompt)}
              title="Editar prompt"
            >
              <Edit size={14} />
            </Button>
            <Button 
              variant="ghost" 
              size="sm" 
              className="h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10"
              onClick={() => onDelete(prompt.id, prompt.name)}
              disabled={prompt.isDefault}
              title={prompt.isDefault ? "N√£o √© poss√≠vel excluir prompts padr√£o" : "Excluir prompt"}
            >
              <Trash2 size={14} />
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="flex-1 flex flex-col pt-0">
        <CardDescription className={descriptionClass}>
          {prompt.text}
        </CardDescription>
        <div className={`${footerPadding} border-t border-border/30`}>
          <div className="text-xs text-muted-foreground">
            Criado em {new Date(prompt.createdAt).toLocaleDateString('pt-BR')}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentModals.tsx
================================================================================\n

import { Agent, Customer, CustomerPortalAccess } from "@/types";
import { Prompt } from "@/types/prompts";
import CreateAgentModal from "@/components/agents/CreateAgentModal";
import WhatsAppConnectionModal from "@/components/agents/WhatsAppConnectionModal";
import CustomerPortalModal from "@/components/agents/CustomerPortalModal";
import PlanLimitModal from "@/components/agents/PlanLimitModal";
import PromptModal from "@/components/agents/PromptModal";
import PromptsLibraryModal from "@/components/agents/PromptsLibraryModal";
import PromptsManagementModal from "@/components/agents/PromptsManagementModal";

interface AgentModalsProps {
  isCreateModalOpen: boolean;
  isEditModalOpen: boolean;
  isWhatsAppModalOpen: boolean;
  isCustomerPortalModalOpen: boolean;
  isPlanLimitModalOpen: boolean;
  isPromptModalOpen: boolean;
  isPromptsLibraryModalOpen: boolean;
  isPromptsManagementModalOpen: boolean;
  currentAgent: Agent | null;
  currentCustomer: Customer | null;
  currentCustomerPortal: CustomerPortalAccess | null;
  currentPrompt: Prompt | null;
  customers: Customer[];
  prompts: Prompt[];
  agentLimit: number;
  allNiches: string[];
  onCloseCreateModal: () => void;
  onCloseEditModal: () => void;
  onCloseWhatsAppModal: () => void;
  onCloseCustomerPortalModal: () => void;
  onClosePlanLimitModal: () => void;
  onClosePromptModal: () => void;
  onClosePromptsLibraryModal: () => void;
  onClosePromptsManagementModal: () => void;
  onSubmitAgent: (agentData: Partial<Agent>, customerData?: Partial<Customer>, isNewCustomer?: boolean) => void;
  onConnectWhatsApp: () => void;
  onSendEmail: () => void;
  onSubmitPrompt: (promptData: Omit<Prompt, 'id' | 'createdAt'>) => void;
  onSelectPrompt: (prompt: Prompt) => void;
  onEditPrompt: (prompt: Prompt) => void;
  onDeletePrompt: (id: string) => void;
  onCreatePrompt: () => void;
  selectedPromptForAgent: Prompt | null;
}

export default function AgentModals({
  isCreateModalOpen,
  isEditModalOpen,
  isWhatsAppModalOpen,
  isCustomerPortalModalOpen,
  isPlanLimitModalOpen,
  isPromptModalOpen,
  isPromptsLibraryModalOpen,
  isPromptsManagementModalOpen,
  currentAgent,
  currentCustomer,
  currentCustomerPortal,
  currentPrompt,
  customers,
  prompts,
  agentLimit,
  allNiches,
  onCloseCreateModal,
  onCloseEditModal,
  onCloseWhatsAppModal,
  onCloseCustomerPortalModal,
  onClosePlanLimitModal,
  onClosePromptModal,
  onClosePromptsLibraryModal,
  onClosePromptsManagementModal,
  onSubmitAgent,
  onConnectWhatsApp,
  onSendEmail,
  onSubmitPrompt,
  onSelectPrompt,
  onEditPrompt,
  onDeletePrompt,
  onCreatePrompt,
  selectedPromptForAgent
}: AgentModalsProps) {
  return (
    <>
      <CreateAgentModal
        open={isCreateModalOpen || isEditModalOpen}
        onClose={() => {
          isCreateModalOpen ? onCloseCreateModal() : onCloseEditModal();
        }}
        onSubmit={onSubmitAgent}
        editing={isEditModalOpen ? currentAgent! : undefined}
        existingCustomers={customers}
        prompts={prompts}
        selectedPrompt={selectedPromptForAgent}
        onOpenPromptsLibrary={() => {
          if (isCreateModalOpen) {
            onCloseCreateModal();
          } else if (isEditModalOpen) {
            onCloseEditModal();
          }
        }}
      />

      <WhatsAppConnectionModal
        isOpen={isWhatsAppModalOpen}
        onClose={onCloseWhatsAppModal}
        onConnect={onConnectWhatsApp}
        agent={currentAgent}
        customer={currentCustomer}
      />

      <CustomerPortalModal
        isOpen={isCustomerPortalModalOpen}
        onClose={onCloseCustomerPortalModal}
        portalAccess={currentCustomerPortal}
        onSendEmail={onSendEmail}
      />

      <PlanLimitModal
        isOpen={isPlanLimitModalOpen}
        onClose={onClosePlanLimitModal}
        agentLimit={agentLimit}
      />

      <PromptModal
        isOpen={isPromptModalOpen}
        onClose={onClosePromptModal}
        onSubmit={onSubmitPrompt}
        editing={currentPrompt}
        allNiches={allNiches}
      />

      <PromptsLibraryModal
        isOpen={isPromptsLibraryModalOpen}
        onClose={onClosePromptsLibraryModal}
        prompts={prompts}
        onSelect={onSelectPrompt}
        onEdit={onEditPrompt}
        onDelete={onDeletePrompt}
        onCreateNew={onCreatePrompt}
        niches={allNiches}
      />

      <PromptsManagementModal
        isOpen={isPromptsManagementModalOpen}
        onClose={onClosePromptsManagementModal}
        prompts={prompts}
        onCreatePrompt={onCreatePrompt}
        onEditPrompt={onEditPrompt}
        onDeletePrompt={onDeletePrompt}
        allNiches={allNiches}
      />
    </>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentsContainer.tsx
================================================================================\n
import { Agent, Customer } from "@/types";
import AgentHeader from "./AgentHeader";
import AgentStats from "./AgentStats";
import AgentsList from "./AgentsList";
import AgentModals from "./AgentModals";
import PlanInfoCard from "./PlanInfoCard";
import useAgentManagement from "@/hooks/useAgentManagement";
import usePromptManagement from "@/hooks/usePromptManagement";
import EvolutionIntegration from "@/components/evolution/EvolutionIntegration";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

interface AgentsContainerProps {
  initialAgents: Agent[];
  initialCustomers: Customer[];
  franchiseeId: string;
}

export default function AgentsContainer({ 
  initialAgents, 
  initialCustomers, 
  franchiseeId 
}: AgentsContainerProps) {
  const agentLimit = 5; // This would come from the user's plan
  const planName = "Profissional";
  const billingCycle = "monthly" as const;

  const {
    agents,
    customers,
    currentAgent,
    currentCustomer,
    currentCustomerPortal,
    isCreateModalOpen,
    isEditModalOpen,
    isWhatsAppModalOpen,
    isCustomerPortalModalOpen,
    isPlanLimitModalOpen,
    totalAgents,
    connectedAgents,
    setIsCreateModalOpen,
    setIsEditModalOpen,
    setIsWhatsAppModalOpen,
    setIsPlanLimitModalOpen,
    setIsCustomerPortalModalOpen,
    setCurrentAgent,
    handleViewAgent,
    handleEditAgent,
    handleConnectAgent,
    handleCreateAgentClick,
    handleSubmitAgent,
    handleConnectWhatsApp,
    handleClosePortalModal,
    handleSendCredentialsEmail
  } = useAgentManagement(initialAgents, initialCustomers, franchiseeId);

  const {
    prompts,
    currentPrompt,
    isPromptModalOpen,
    isPromptsLibraryModalOpen,
    isPromptsManagementModalOpen,
    selectedPromptForAgent,
    allNiches,
    setIsPromptModalOpen,
    setIsPromptsLibraryModalOpen,
    setIsPromptsManagementModalOpen,
    handleSubmitPrompt,
    handleSelectPrompt,
    handleEditPrompt,
    handleDeletePrompt,
    handleCreatePrompt,
  } = usePromptManagement();

  // Handler for testing agents
  const handleTestAgent = (agent: Agent) => {
    console.log("Testing agent:", agent.name);
    // This would open a test dialog or similar functionality
  };

  const handleCreateAgentWithLimit = () => {
    handleCreateAgentClick(agentLimit);
  };

  const handleManagePrompts = () => {
    setIsPromptsManagementModalOpen(true);
  };

  return (
    <div className="space-y-6">
      <AgentHeader 
        totalAgents={totalAgents}
        agentLimit={agentLimit}
        connectedAgents={connectedAgents}
        planName={planName}
        billingCycle={billingCycle}
        onCreateClick={handleCreateAgentWithLimit}
        onManagePromptsClick={handleManagePrompts}
      />

      <Tabs defaultValue="traditional" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="traditional">Agentes Tradicionais</TabsTrigger>
          <TabsTrigger value="evolution">Integra√ß√£o EvolutionAPI</TabsTrigger>
        </TabsList>

        <TabsContent value="traditional" className="space-y-6">
          <AgentStats 
            totalAgents={totalAgents}
            connectedAgents={connectedAgents}
            agentLimit={agentLimit}
          />

          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            <div className="lg:col-span-3">
              <AgentsList
                agents={agents}
                onViewAgent={handleViewAgent}
                onEditAgent={handleEditAgent}
                onConnectAgent={handleConnectAgent}
                onTest={handleTestAgent}
              />
            </div>
            
            <div className="space-y-6">
              <PlanInfoCard 
                planName={planName}
                billingCycle={billingCycle}
                agentsUsed={totalAgents}
                agentLimit={agentLimit}
              />
            </div>
          </div>
        </TabsContent>

        <TabsContent value="evolution" className="space-y-6">
          <EvolutionIntegration franchiseeId={franchiseeId} />
        </TabsContent>
      </Tabs>

      <AgentModals
        isCreateModalOpen={isCreateModalOpen}
        isEditModalOpen={isEditModalOpen}
        isWhatsAppModalOpen={isWhatsAppModalOpen}
        isCustomerPortalModalOpen={isCustomerPortalModalOpen}
        isPlanLimitModalOpen={isPlanLimitModalOpen}
        isPromptModalOpen={isPromptModalOpen}
        isPromptsLibraryModalOpen={isPromptsLibraryModalOpen}
        isPromptsManagementModalOpen={isPromptsManagementModalOpen}
        currentAgent={currentAgent}
        currentCustomer={currentCustomer}
        currentCustomerPortal={currentCustomerPortal}
        currentPrompt={currentPrompt}
        customers={customers}
        prompts={prompts}
        agentLimit={agentLimit}
        allNiches={allNiches}
        onCloseCreateModal={() => setIsCreateModalOpen(false)}
        onCloseEditModal={() => setIsEditModalOpen(false)}
        onCloseWhatsAppModal={() => setIsWhatsAppModalOpen(false)}
        onCloseCustomerPortalModal={handleClosePortalModal}
        onClosePlanLimitModal={() => setIsPlanLimitModalOpen(false)}
        onClosePromptModal={() => setIsPromptModalOpen(false)}
        onClosePromptsLibraryModal={() => setIsPromptsLibraryModalOpen(false)}
        onClosePromptsManagementModal={() => setIsPromptsManagementModalOpen(false)}
        onSubmitAgent={handleSubmitAgent}
        onConnectWhatsApp={handleConnectWhatsApp}
        onSendEmail={handleSendCredentialsEmail}
        onSubmitPrompt={handleSubmitPrompt}
        onSelectPrompt={handleSelectPrompt}
        onEditPrompt={handleEditPrompt}
        onDeletePrompt={handleDeletePrompt}
        onCreatePrompt={handleCreatePrompt}
        selectedPromptForAgent={selectedPromptForAgent}
      />
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PlanLimitModal.tsx
================================================================================\n

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Bot, ArrowRight } from "lucide-react";
import { useNavigate } from "react-router-dom";

interface PlanLimitModalProps {
  isOpen: boolean;
  onClose: () => void;
  agentLimit: number;
}

export default function PlanLimitModal({
  isOpen,
  onClose,
  agentLimit
}: PlanLimitModalProps) {
  const navigate = useNavigate();

  const handleUpgradePlan = () => {
    onClose();
    navigate("/franchisee/plans");
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Limite de Agentes Atingido</DialogTitle>
          <DialogDescription>
            Voc√™ atingiu o limite de agentes do seu plano atual.
          </DialogDescription>
        </DialogHeader>
        
        <div className="py-4 text-center space-y-4">
          <div className="bg-muted p-4 rounded-lg inline-block mx-auto">
            <Bot size={36} className="text-muted-foreground mx-auto mb-2" />
            <p className="text-lg font-medium">{agentLimit}/{agentLimit} Agentes</p>
            <p className="text-sm text-muted-foreground">Limite m√°ximo atingido</p>
          </div>
          
          <p>
            Para criar mais agentes, voc√™ precisa fazer upgrade para um plano com maior capacidade.
          </p>
        </div>
        
        <DialogFooter className="flex-col sm:flex-row gap-2">
          <Button variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button onClick={handleUpgradePlan}>
            Ver planos dispon√≠veis
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/CustomerPortalModal.tsx
================================================================================\n

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Check, Copy } from "lucide-react";
import { toast } from "sonner";
import { CustomerPortalAccess } from "@/types";

interface CustomerPortalModalProps {
  isOpen: boolean;
  onClose: () => void;
  portalAccess: CustomerPortalAccess | null;
  onSendEmail: () => void;
}

export default function CustomerPortalModal({
  isOpen,
  onClose,
  portalAccess,
  onSendEmail
}: CustomerPortalModalProps) {
  const handleCopyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success("Copiado para a √°rea de transfer√™ncia!");
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Acesso ao Portal do Cliente</DialogTitle>
          <DialogDescription>
            O portal do cliente foi criado com sucesso. Compartilhe estas informa√ß√µes com o cliente.
          </DialogDescription>
        </DialogHeader>
        
        {portalAccess && (
          <div className="space-y-6 py-4">
            <div className="bg-muted p-4 rounded-lg text-center">
              <Check size={40} className="mx-auto text-green-500 mb-2" />
              <h3 className="text-lg font-medium">Cliente e Agente criados com sucesso!</h3>
              <p className="text-sm text-muted-foreground">
                O cliente j√° pode acessar seu portal e configurar seu WhatsApp
              </p>
            </div>
            
            <div className="space-y-4">
              <div>
                <p className="text-sm font-medium mb-1">URL do Portal</p>
                <div className="flex">
                  <Input readOnly value={portalAccess.url} className="flex-1" />
                  <Button 
                    variant="outline" 
                    className="ml-2" 
                    size="icon"
                    onClick={() => handleCopyToClipboard(portalAccess.url)}
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium mb-1">Usu√°rio</p>
                  <div className="flex">
                    <Input readOnly value={portalAccess.username} />
                    <Button 
                      variant="outline" 
                      className="ml-2" 
                      size="icon"
                      onClick={() => handleCopyToClipboard(portalAccess.username)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
                <div>
                  <p className="text-sm font-medium mb-1">Senha</p>
                  <div className="flex">
                    <Input readOnly value={portalAccess.password} type="text" />
                    <Button 
                      variant="outline" 
                      className="ml-2" 
                      size="icon"
                      onClick={() => handleCopyToClipboard(portalAccess.password)}
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Fechar
          </Button>
          <Button onClick={onSendEmail}>
            Enviar credenciais por Email
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentHeader.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Bot, Zap, FileText, Library } from "lucide-react";
import PlanInfoCard from "./PlanInfoCard";

interface AgentHeaderProps {
  totalAgents: number;
  agentLimit: number;
  connectedAgents: number;
  planName: string;
  billingCycle: 'monthly' | 'yearly';
  onCreateClick: () => void;
  onManagePromptsClick: () => void;
}

export default function AgentHeader({
  totalAgents,
  agentLimit,
  connectedAgents,
  planName,
  billingCycle,
  onCreateClick,
  onManagePromptsClick
}: AgentHeaderProps) {
  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-start gap-3">
        <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg shadow-sm flex-shrink-0">
          <Bot className="h-5 w-5 text-white" />
        </div>
        <div className="flex-1 min-w-0">
          <h1 className="text-xl font-bold text-foreground mb-1">
            Agentes de IA
          </h1>
          <p className="text-muted-foreground text-sm leading-relaxed">
            Gerencie seus agentes virtuais para atendimento automatizado
          </p>
        </div>
        <div className="flex flex-col sm:flex-row gap-2 sm:items-center">
          <Button 
            onClick={onManagePromptsClick} 
            variant="outline" 
            size="sm"
            className="flex items-center gap-2"
          >
            <Library className="h-4 w-4" />
            Biblioteca de Prompts
          </Button>
          <Button onClick={onCreateClick} size="sm" className="flex items-center gap-2">
            <Plus className="h-4 w-4" />
            Novo Agente
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-200 dark:border-blue-800/30">
          <CardHeader className="pb-2">
            <CardTitle className="text-xs font-medium text-blue-700 dark:text-blue-300 flex items-center gap-1">
              <Bot className="h-3 w-3" />
              Total de Agentes
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-xl font-bold text-blue-900 dark:text-blue-100">
              {totalAgents}
            </div>
            <p className="text-xs text-blue-600 dark:text-blue-400 mt-1">
              de {agentLimit} dispon√≠veis
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-green-200 dark:border-green-800/30">
          <CardHeader className="pb-2">
            <CardTitle className="text-xs font-medium text-green-700 dark:text-green-300 flex items-center gap-1">
              <Zap className="h-3 w-3" />
              Agentes Conectados
            </CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="text-xl font-bold text-green-900 dark:text-green-100">
              {connectedAgents}
            </div>
            <p className="text-xs text-green-600 dark:text-green-400 mt-1">
              WhatsApp conectado
            </p>
          </CardContent>
        </Card>

        <PlanInfoCard 
          planName={planName}
          billingCycle={billingCycle}
          agentsUsed={totalAgents}
          agentLimit={agentLimit}
          compact={true}
        />
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentStats.tsx
================================================================================\n

import { Bot, QrCode } from "lucide-react";
import { Agent } from "@/types";

interface AgentStatsProps {
  totalAgents: number;
  agentLimit: number;
  connectedAgents: number;
}

export default function AgentStats({ 
  totalAgents, 
  agentLimit,
  connectedAgents
}: AgentStatsProps) {
  const usagePercentage = (totalAgents / agentLimit) * 100;
  const connectionPercentage = totalAgents > 0 ? (connectedAgents / totalAgents) * 100 : 0;
  
  return (
    <div className="flex items-center gap-4 w-full md:w-auto">
      <div className="bg-gradient-to-br from-white to-blue-50 dark:from-gray-800 dark:to-blue-900/20 p-4 rounded-xl shadow-sm border border-blue-100 dark:border-blue-800/30 flex items-center gap-3 flex-1 md:flex-none hover:shadow-md transition-shadow duration-200">
        <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg shadow-sm">
          <Bot className="text-white h-5 w-5" />
        </div>
        <div>
          <p className="text-sm text-gray-600 dark:text-gray-400 font-medium">Agentes</p>
          <p className="font-bold text-lg text-gray-900 dark:text-gray-100">
            {totalAgents} <span className="text-sm text-gray-500 dark:text-gray-400 font-normal">/ {agentLimit}</span>
          </p>
          <div className="w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-1 overflow-hidden">
            <div 
              className="bg-gradient-to-r from-blue-500 to-purple-600 h-1.5 rounded-full transition-all duration-500"
              style={{ width: `${Math.min(usagePercentage, 100)}%` }}
            ></div>
          </div>
        </div>
      </div>
      
      <div className="bg-gradient-to-br from-white to-green-50 dark:from-gray-800 dark:to-green-900/20 p-4 rounded-xl shadow-sm border border-green-100 dark:border-green-800/30 flex items-center gap-3 flex-1 md:flex-none hover:shadow-md transition-shadow duration-200">
        <div className="p-2 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg shadow-sm">
          <QrCode className="text-white h-5 w-5" />
        </div>
        <div>
          <p className="text-sm text-gray-600 dark:text-gray-400 font-medium">Conectados</p>
          <p className="font-bold text-lg text-gray-900 dark:text-gray-100">
            {connectedAgents} <span className="text-sm text-gray-500 dark:text-gray-400 font-normal">/ {totalAgents}</span>
          </p>
          <div className="w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-1.5 mt-1 overflow-hidden">
            <div 
              className="bg-gradient-to-r from-green-500 to-emerald-600 h-1.5 rounded-full transition-all duration-500"
              style={{ width: `${Math.min(connectionPercentage, 100)}%` }}
            ></div>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptSearchAndActions.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Plus, Search, Filter } from "lucide-react";

interface PromptSearchAndActionsProps {
  searchTerm: string;
  onSearchChange: (value: string) => void;
  onCreatePrompt: () => void;
  isMobile?: boolean;
}

export default function PromptSearchAndActions({ 
  searchTerm, 
  onSearchChange, 
  onCreatePrompt, 
  isMobile 
}: PromptSearchAndActionsProps) {
  const inputHeight = isMobile ? "h-12" : "h-10";
  const buttonHeight = isMobile ? "h-12" : "";
  const inputClass = isMobile 
    ? `pl-10 ${inputHeight} text-base` 
    : `pl-10 bg-background border-input ${inputHeight} text-base`;

  return (
    <div className="space-y-3">
      <div className={isMobile ? "space-y-3" : "flex flex-col gap-3"}>
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground z-10" />
          <Input
            placeholder="Buscar prompts..."
            value={searchTerm}
            onChange={(e) => onSearchChange(e.target.value)}
            className={inputClass}
          />
        </div>
        <Button onClick={onCreatePrompt} className={`w-full ${buttonHeight}`}>
          <Plus className="mr-2 h-4 w-4" />
          Novo Prompt
        </Button>
      </div>
      
      <div className="flex items-center gap-2 text-sm text-muted-foreground">
        <Filter className="h-4 w-4 flex-shrink-0" />
        <span>Filtrar por nicho:</span>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentsList.tsx
================================================================================\n

import { useState } from "react";
import { Bot, Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import AgentCard from "@/components/agents/AgentCard";
import { Agent } from "@/types";
import AgentTestDialog from "@/components/agents/AgentTestDialog";
import { Dialog } from "@/components/ui/dialog";

interface AgentsListProps {
  agents: Agent[];
  onViewAgent: (agent: Agent) => void;
  onEditAgent: (agent: Agent) => void;
  onConnectAgent: (agent: Agent) => void;
  onTest: (agent: Agent) => void;
}

export default function AgentsList({ 
  agents, 
  onViewAgent, 
  onEditAgent, 
  onConnectAgent,
  onTest 
}: AgentsListProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [testingAgent, setTestingAgent] = useState<Agent | null>(null);
  
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value.toLowerCase());
  };

  const handleTestAgent = (agent: Agent) => {
    setTestingAgent(agent);
  };

  const filteredAgents = agents.filter(agent => 
    agent.name.toLowerCase().includes(searchTerm) ||
    agent.sector.toLowerCase().includes(searchTerm)
  );

  return (
    <div className="space-y-6">
      <div className="relative w-full sm:w-[250px]">
        <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
        <Input
          type="search"
          placeholder="Buscar agentes..."
          className="w-full pl-8"
          value={searchTerm}
          onChange={handleSearch}
        />
      </div>

      {filteredAgents.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredAgents.map(agent => (
            <AgentCard 
              key={agent.id} 
              agent={agent} 
              onView={onViewAgent}
              onEdit={onEditAgent}
              onConnect={onConnectAgent}
              onTest={onTest}
            />
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center h-64">
          <Bot size={48} className="text-muted-foreground/30 mb-4" />
          <p className="text-muted-foreground mb-2">Nenhum agente encontrado.</p>
          {searchTerm && (
            <button 
              className="text-primary hover:underline"
              onClick={() => setSearchTerm("")}
            >
              Limpar busca
            </button>
          )}
        </div>
      )}
      
      {/* Dialog for testing agent */}
      {testingAgent && (
        <AgentTestDialog 
          agent={testingAgent}
          isOpen={!!testingAgent}
          onClose={() => setTestingAgent(null)}
        />
      )}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentActionButtons.tsx
================================================================================\n

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { PlusCircle } from "lucide-react";
import { toast } from "sonner";
import { Agent } from "@/types";

interface AgentActionButtonsProps {
  totalAgents: number;
  agentLimit: number;
  onCreateClick: () => void;
}

export default function AgentActionButtons({ 
  totalAgents, 
  agentLimit, 
  onCreateClick 
}: AgentActionButtonsProps) {
  const availableAgents = agentLimit - totalAgents;

  return (
    <div className="flex w-full md:w-auto">
      <Button 
        onClick={onCreateClick}
        disabled={availableAgents <= 0}
        className="w-full md:w-auto"
      >
        <PlusCircle className="mr-2 h-4 w-4" />
        Novo Agente
        {availableAgents > 0 && (
          <span className="ml-2 text-xs bg-white/20 px-1.5 py-0.5 rounded-full">
            {availableAgents} dispon√≠vel
          </span>
        )}
      </Button>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentFormTab.tsx
================================================================================\n

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Upload } from "lucide-react";
import { Agent } from "@/types";
import { Prompt } from "@/types/prompts";

interface AgentFormTabProps {
  formData: Partial<Agent>;
  prompts: Prompt[];
  selectedPromptId: string;
  onFormChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  onSwitchChange: (checked: boolean) => void;
  onFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onPromptSelect: (value: string) => void;
  onOpenPromptsLibrary?: () => void;
  onNext: () => void;
  knowledgeBaseFile: File | null;
}

export default function AgentFormTab({
  formData,
  prompts,
  selectedPromptId,
  onFormChange,
  onSwitchChange,
  onFileChange,
  onPromptSelect,
  onOpenPromptsLibrary,
  onNext,
  knowledgeBaseFile
}: AgentFormTabProps) {
  
  const handleNextClick = () => {
    console.log('Next button clicked in AgentFormTab');
    console.log('Form data:', formData);
    onNext();
  };

  return (
    <div className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="name">Nome do Agente *</Label>
        <Input
          id="name"
          name="name"
          value={formData.name || ""}
          onChange={onFormChange}
          placeholder="Ex: Atendente Virtual"
          required
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="sector">Setor / Especialidade *</Label>
        <Input
          id="sector"
          name="sector"
          value={formData.sector || ""}
          onChange={onFormChange}
          placeholder="Ex: Atendimento ao Cliente"
          required
        />
      </div>
      
      {/* Prompt Selection */}
      <div className="space-y-2">
        <Label htmlFor="promptSelector" className="flex justify-between">
          <span>Selecionar Prompt</span>
          {onOpenPromptsLibrary && (
            <Button 
              type="button" 
              variant="link" 
              className="h-auto p-0 text-xs"
              onClick={onOpenPromptsLibrary}
            >
              Ver biblioteca de prompts
            </Button>
          )}
        </Label>
        <Select value={selectedPromptId} onValueChange={onPromptSelect}>
          <SelectTrigger>
            <SelectValue placeholder="Selecione um prompt pr√©-definido" />
          </SelectTrigger>
          <SelectContent>
            {prompts.map(prompt => (
              <SelectItem key={prompt.id} value={prompt.id}>
                {prompt.name} ({prompt.niche})
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="prompt" className="flex justify-between">
          <span>Prompt da IA</span>
          <span className="text-xs text-muted-foreground">
            Instru√ß√µes para o comportamento do agente
          </span>
        </Label>
        <Textarea
          id="prompt"
          name="prompt"
          value={formData.prompt || ""}
          onChange={onFormChange}
          placeholder="Descreva como o agente deve se comportar, que tipo de respostas dar, etc."
          rows={5}
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="openAiKey" className="flex justify-between">
          <span>Chave da API OpenAI *</span>
          <a 
            href="https://platform.openai.com/api-keys" 
            target="_blank" 
            rel="noreferrer" 
            className="text-xs text-primary hover:underline"
          >
            Obter chave
          </a>
        </Label>
        <Input
          id="openAiKey"
          name="openAiKey"
          value={formData.openAiKey || ""}
          onChange={onFormChange}
          type="password"
          placeholder="sk-..."
          required
        />
        <p className="text-xs text-muted-foreground">
          Sua chave ficar√° armazenada de forma segura e ser√° usada apenas para este agente.
        </p>
      </div>

      {/* Voice Recognition Switch */}
      <div className="flex items-center justify-between space-y-0 py-4 border-t">
        <div>
          <h4 className="font-medium text-sm">Habilitar reconhecimento de voz</h4>
          <p className="text-xs text-muted-foreground">
            Permite que o agente processe mensagens de √°udio usando a Whisper API.
          </p>
        </div>
        <Switch 
          checked={formData.enableVoiceRecognition || false} 
          onCheckedChange={onSwitchChange}
        />
      </div>
      
      {/* Knowledge Base Upload */}
      <div className="space-y-2 border-t pt-4">
        <Label className="text-base">Base de conhecimento</Label>
        <div className="grid gap-2">
          <div className="flex flex-col gap-1">
            <p className="text-xs text-muted-foreground">
              Opcional: Adicione uma base de conhecimento para seu agente (PDF, DOC, URL).
            </p>
            
            <div className="flex gap-2">
              <Input
                id="knowledgeBase"
                name="knowledgeBase"
                value={formData.knowledgeBase || ""}
                onChange={onFormChange}
                placeholder="Insira URL ou selecione um arquivo"
              />
              
              <div className="relative">
                <Input 
                  type="file" 
                  id="file-upload" 
                  className="absolute inset-0 opacity-0 cursor-pointer" 
                  accept=".pdf,.doc,.docx,.txt" 
                  onChange={onFileChange}
                />
                <Button type="button" variant="outline" className="flex items-center h-full">
                  <Upload size={18} className="mr-1" />
                  Arquivo
                </Button>
              </div>
            </div>
            
            {knowledgeBaseFile && (
              <p className="text-xs text-muted-foreground mt-1">
                Arquivo selecionado: {knowledgeBaseFile.name}
              </p>
            )}
          </div>
        </div>
      </div>

      <div className="flex justify-end pt-4">
        <Button 
          type="button" 
          onClick={handleNextClick}
          className="bg-primary hover:bg-primary/90"
        >
          Pr√≥ximo
        </Button>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/CreateAgentModalHeader.tsx
================================================================================\n

import { DialogHeader, DialogTitle } from "@/components/ui/dialog";

interface CreateAgentModalHeaderProps {
  editing?: boolean;
}

export default function CreateAgentModalHeader({ editing }: CreateAgentModalHeaderProps) {
  return (
    <DialogHeader className="p-6 pb-2 flex-shrink-0">
      <DialogTitle>{editing ? "Editar Agente" : "Criar Novo Agente"}</DialogTitle>
    </DialogHeader>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/AgentCard.tsx
================================================================================\n

import { Bot, BarChart3, MessageCircle, Clock, QrCode, ExternalLink } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";
import { Agent } from "@/types";

interface AgentCardProps {
  agent: Agent;
  onView: (agent: Agent) => void;
  onEdit: (agent: Agent) => void;
  onConnect: (agent: Agent) => void;
  onTest: (agent: Agent) => void;
}

export default function AgentCard({ 
  agent, 
  onView, 
  onEdit, 
  onConnect, 
  onTest 
}: AgentCardProps) {
  return (
    <Card className="overflow-hidden border border-gray-200 dark:border-gray-800">
      <CardHeader className="bg-gray-50 dark:bg-gray-800/50 p-4 flex flex-row items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className={cn(
            "w-9 h-9 rounded-full flex items-center justify-center",
            agent.isActive ? "bg-green-100 text-green-700" : "bg-gray-100 text-gray-600"
          )}>
            <Bot size={20} />
          </div>
          <div>
            <CardTitle className="text-base font-medium">{agent.name}</CardTitle>
            <div className="text-xs text-muted-foreground">{agent.sector}</div>
          </div>
        </div>
        <Badge className={cn(
          agent.isActive ? "bg-green-100 hover:bg-green-100 text-green-800 border-green-200" :
          "bg-gray-100 hover:bg-gray-100 text-gray-800 border-gray-200"
        )}>
          {agent.isActive ? "Ativo" : "Inativo"}
        </Badge>
      </CardHeader>

      <CardContent className="p-4 space-y-4">
        {/* Cliente vinculado */}
        <div className="text-sm border-b pb-2 mb-2">
          <span className="text-muted-foreground">Cliente: </span>
          <span className="font-medium">
            {agent.customerId && agent.customerId.startsWith('customer') ? 
              `Cliente ${agent.customerId.replace('customer', '')}` : 
              agent.customerId}
          </span>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div className="flex items-center">
            <MessageCircle className="mr-2 h-4 w-4 text-muted-foreground" />
            <span className="text-sm">
              <strong>{agent.messageCount.toLocaleString()}</strong> msgs
            </span>
          </div>
          <div className="flex items-center">
            <Clock className="mr-2 h-4 w-4 text-muted-foreground" />
            <span className="text-sm">
              <strong>{agent.responseTime}s</strong> resp.
            </span>
          </div>
        </div>

        <div className="flex items-center text-sm">
          <QrCode className="mr-2 h-4 w-4 text-muted-foreground" />
          <span className={cn(
            agent.whatsappConnected ? "text-green-600" : "text-yellow-600"
          )}>
            {agent.whatsappConnected ? "WhatsApp Conectado" : "Desconectado"}
          </span>
        </div>

        {agent.demoUrl && (
          <div className="flex items-center text-sm text-primary">
            <ExternalLink className="mr-2 h-4 w-4" />
            <a 
              href={agent.demoUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              className="underline underline-offset-2"
            >
              Link de Demonstra√ß√£o
            </a>
          </div>
        )}

        <div className="flex space-x-2 pt-2">
          <Button variant="outline" size="sm" onClick={() => onView(agent)} className="flex-1">
            <BarChart3 className="mr-1 h-3.5 w-3.5" />
            Estat√≠sticas
          </Button>
          <Button variant="outline" size="sm" onClick={() => onTest(agent)} className="flex-1">
            <MessageCircle className="mr-1 h-3.5 w-3.5" />
            Testar
          </Button>
          <Button variant="outline" size="sm" onClick={() => onEdit(agent)} className="flex-1">
            Editar
          </Button>
        </div>
        
        {!agent.whatsappConnected && (
          <Button variant="default" size="sm" onClick={() => onConnect(agent)} className="w-full mt-2">
            <QrCode className="mr-1 h-3.5 w-3.5" />
            Conectar WhatsApp
          </Button>
        )}
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/PromptModal.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Prompt } from "@/types/prompts";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface PromptModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (promptData: Omit<Prompt, 'id' | 'createdAt'>) => void;
  editing?: Prompt | null;
  allNiches: string[];
}

export default function PromptModal({ 
  isOpen, 
  onClose, 
  onSubmit, 
  editing, 
  allNiches 
}: PromptModalProps) {
  const [formData, setFormData] = useState<{
    name: string;
    text: string;
    niche: string;
    customNiche: string;
  }>({
    name: "",
    text: "",
    niche: "",
    customNiche: "",
  });

  // Reset form when modal opens/closes or editing changes
  useEffect(() => {
    if (isOpen) {
      if (editing) {
        setFormData({
          name: editing.name,
          text: editing.text,
          niche: editing.niche,
          customNiche: "",
        });
      } else {
        setFormData({
          name: "",
          text: "",
          niche: "",
          customNiche: "",
        });
      }
    }
  }, [isOpen, editing]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSelectChange = (value: string) => {
    setFormData((prev) => ({
      ...prev,
      niche: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name || !formData.text) {
      return;
    }

    // Use custom niche if selected or entered
    const finalNiche = formData.niche === "custom" 
      ? formData.customNiche 
      : formData.niche;

    if (!finalNiche) {
      return;
    }

    onSubmit({
      name: formData.name,
      text: formData.text,
      niche: finalNiche,
      isDefault: editing?.isDefault || false
    });
    
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>{editing ? "Editar Prompt" : "Criar Novo Prompt"}</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="name">Nome do Prompt</Label>
            <Input
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Ex: Vendedor de Im√≥veis"
              disabled={editing?.isDefault}
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="niche">Nicho</Label>
            <Select 
              value={formData.niche} 
              onValueChange={handleSelectChange}
              disabled={editing?.isDefault}
            >
              <SelectTrigger>
                <SelectValue placeholder="Selecione um nicho" />
              </SelectTrigger>
              <SelectContent>
                {allNiches.map(niche => (
                  <SelectItem key={niche} value={niche}>{niche}</SelectItem>
                ))}
                <SelectItem value="custom">Outro (personalizado)</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          {formData.niche === "custom" && (
            <div className="space-y-2">
              <Label htmlFor="customNiche">Nicho Personalizado</Label>
              <Input
                id="customNiche"
                name="customNiche"
                value={formData.customNiche}
                onChange={handleChange}
                placeholder="Ex: Educa√ß√£o Online"
              />
            </div>
          )}
          
          <div className="space-y-2">
            <Label htmlFor="text">Texto do Prompt</Label>
            <Textarea
              id="text"
              name="text"
              value={formData.text}
              onChange={handleChange}
              placeholder="Descreva como o agente deve se comportar..."
              rows={8}
            />
          </div>
          
          <DialogFooter className="pt-4">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button type="submit">
              {editing ? "Atualizar" : "Criar"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/agents/CustomerFormTab.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DialogFooter } from "@/components/ui/dialog";
import { Customer } from "@/types";

interface CustomerFormTabProps {
  isNewCustomer: boolean;
  selectedCustomerId: string;
  customerData: Partial<Customer>;
  existingCustomers: Customer[];
  editing?: boolean;
  onNewCustomerChange: (checked: boolean) => void;
  onCustomerSelect: (value: string) => void;
  onCustomerDataChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  onPrevious: () => void;
  onClose: () => void;
  onSubmit: () => void;
  isEditing: boolean;
}

export default function CustomerFormTab({
  isNewCustomer,
  selectedCustomerId,
  customerData,
  existingCustomers,
  editing,
  onNewCustomerChange,
  onCustomerSelect,
  onCustomerDataChange,
  onPrevious,
  onClose,
  onSubmit,
  isEditing
}: CustomerFormTabProps) {
  return (
    <div className="space-y-4">
      {!editing && (
        <div className="flex items-center space-x-2 mb-4">
          <Checkbox 
            id="isNewCustomer" 
            checked={!isNewCustomer} 
            onCheckedChange={(checked) => onNewCustomerChange(!checked)}
          />
          <Label htmlFor="isNewCustomer">Vincular a um cliente existente</Label>
        </div>
      )}

      {!isNewCustomer ? (
        <div className="space-y-2">
          <Label htmlFor="customerId">Selecione um cliente</Label>
          <Select value={selectedCustomerId} onValueChange={onCustomerSelect}>
            <SelectTrigger>
              <SelectValue placeholder="Selecione um cliente" />
            </SelectTrigger>
            <SelectContent>
              {existingCustomers.map(customer => (
                <SelectItem key={customer.id} value={customer.id}>
                  {customer.businessName}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      ) : (
        <>
          <div className="space-y-2">
            <Label htmlFor="businessName">Nome da Empresa</Label>
            <Input
              id="businessName"
              name="businessName"
              value={customerData.businessName || ""}
              onChange={onCustomerDataChange}
              placeholder="Nome da empresa cliente"
              required={isNewCustomer}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="customerName">Nome do Respons√°vel</Label>
            <Input
              id="name"
              name="name"
              value={customerData.name || ""}
              onChange={onCustomerDataChange}
              placeholder="Nome da pessoa respons√°vel"
              required={isNewCustomer}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="document">CNPJ/CPF</Label>
            <Input
              id="document"
              name="document"
              value={customerData.document || ""}
              onChange={onCustomerDataChange}
              placeholder="Documento do cliente (CNPJ ou CPF)"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="customerEmail">E-mail</Label>
            <Input
              id="email"
              name="email"
              type="email"
              value={customerData.email || ""}
              onChange={onCustomerDataChange}
              placeholder="Email para acesso ao painel"
              required={isNewCustomer}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="contactPhone">WhatsApp para contato</Label>
            <Input
              id="contactPhone"
              name="contactPhone"
              value={customerData.contactPhone || ""}
              onChange={onCustomerDataChange}
              placeholder="N√∫mero para contato do respons√°vel"
            />
            <p className="text-xs text-muted-foreground">
              Este √© apenas para contato com o respons√°vel, n√£o √© o n√∫mero que ser√° vinculado ao agente.
            </p>
          </div>
        </>
      )}

      <DialogFooter className="flex justify-between pt-4">
        <Button type="button" variant="outline" onClick={onPrevious}>
          Voltar
        </Button>
        <div className="flex gap-2">
          <Button type="button" variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button type="button" onClick={onSubmit}>
            {isEditing ? "Salvar Altera√ß√µes" : "Criar Agente"}
          </Button>
        </div>
      </DialogFooter>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/franchisees/FranchiseeCard.tsx
================================================================================\n

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Franchisee } from "@/types";
import { Bot, Users, Calendar, Calendar as CalendarIcon } from "lucide-react";
import { cn } from "@/lib/utils";

interface FranchiseeCardProps {
  franchisee: Franchisee;
  onView: (franchisee: Franchisee) => void;
  onEdit: (franchisee: Franchisee) => void;
}

export default function FranchiseeCard({ franchisee, onView, onEdit }: FranchiseeCardProps) {
  const formattedDate = new Date(franchisee.createdAt).toLocaleDateString("pt-BR");

  return (
    <Card className="overflow-hidden border border-gray-200 dark:border-gray-800 h-full">
      <CardHeader className="bg-gray-50 dark:bg-gray-800/50 p-3 md:p-4 flex flex-row items-center justify-between">
        <div className="flex items-center space-x-2 md:space-x-3">
          <div className={cn(
            "w-8 h-8 md:w-9 md:h-9 rounded-full flex items-center justify-center",
            franchisee.isActive ? "bg-primary/10 text-primary" : "bg-gray-100 text-gray-600"
          )}>
            <Users size={18} />
          </div>
          <div>
            <CardTitle className="text-sm md:text-base font-medium line-clamp-1">{franchisee.name}</CardTitle>
            <div className="text-xs text-muted-foreground line-clamp-1">{franchisee.email}</div>
          </div>
        </div>
        <Badge className={cn(
          "text-xs",
          franchisee.isActive 
            ? "bg-green-100 hover:bg-green-100 text-green-800 border-green-200" 
            : "bg-red-100 hover:bg-red-100 text-red-800 border-red-200"
        )}>
          {franchisee.isActive ? "Ativo" : "Inativo"}
        </Badge>
      </CardHeader>

      <CardContent className="p-3 md:p-4 space-y-3 md:space-y-4">
        <div className="grid grid-cols-2 gap-2 md:gap-4">
          <div className="flex items-center">
            <Bot className="mr-1.5 h-3.5 w-3.5 md:mr-2 md:h-4 md:w-4 text-muted-foreground" />
            <span className="text-xs md:text-sm">
              <strong>{franchisee.agentCount}</strong> agentes
            </span>
          </div>
          <div className="flex items-center">
            <Users className="mr-1.5 h-3.5 w-3.5 md:mr-2 md:h-4 md:w-4 text-muted-foreground" />
            <span className="text-xs md:text-sm">
              <strong>{franchisee.customerCount}</strong> clientes
            </span>
          </div>
          <div className="flex items-center">
            <CalendarIcon className="mr-1.5 h-3.5 w-3.5 md:mr-2 md:h-4 md:w-4 text-muted-foreground" />
            <span className="text-xs md:text-sm">
              Desde <strong>{formattedDate}</strong>
            </span>
          </div>
          <div className="flex items-center">
            {/* Removed CircleDollarSign since it's not in the approved icons list */}
            <Bot className="mr-1.5 h-3.5 w-3.5 md:mr-2 md:h-4 md:w-4 text-muted-foreground" />
            <span className="text-xs md:text-sm">
              <strong>R$ {franchisee.revenue.toLocaleString()}</strong>
            </span>
          </div>
        </div>

        <div className="flex space-x-2 pt-1 md:pt-2">
          <Button variant="outline" size="sm" onClick={() => onView(franchisee)} className="flex-1 text-xs md:text-sm h-8 md:h-9">
            Detalhes
          </Button>
          <Button variant="default" size="sm" onClick={() => onEdit(franchisee)} className="flex-1 text-xs md:text-sm h-8 md:h-9">
            Editar
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/SidebarToggle.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { ChevronLeft } from "lucide-react";

interface SidebarToggleProps {
  isCollapsed: boolean;
  onToggle: () => void;
  isMobile: boolean;
}

export function SidebarToggle({ isCollapsed, onToggle, isMobile }: SidebarToggleProps) {
  if (isMobile) return null;

  return (
    <Button 
      variant="ghost" 
      size="icon" 
      onClick={onToggle} 
      className={`flex-shrink-0 transition-all duration-300 ease-in-out hover:bg-gray-200 dark:hover:bg-gray-700 ${
        isCollapsed ? 'ml-auto' : ''
      }`}
    >
      <ChevronLeft className={`h-5 w-5 transition-transform duration-300 ease-in-out ${
        isCollapsed ? 'rotate-180' : ''
      }`} />
      <span className="sr-only">Toggle sidebar</span>
    </Button>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/AppSidebar.tsx
================================================================================\n

import { useAuth } from "@/context/AuthContext";
import { useNavigate } from "react-router-dom";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarSeparator,
} from "@/components/ui/sidebar";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  LayoutDashboard,
  Users,
  BarChart2,
  Bot,
  Store,
  Calendar,
  Search,
  MessageSquareText,
  BookOpen,
  LogOut,
  FileText,
  Settings
} from "lucide-react";
import { UserRole, NavItem } from "@/types";

export function AppSidebar() {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  if (!user) return null;

  // Menu de navega√ß√£o para cada tipo de usu√°rio
  const NAV_ITEMS: { [key in UserRole]: NavItem[] } = {
    admin: [
      { label: "Dashboard", icon: LayoutDashboard, href: "/dashboard" },
      { label: "Franqueados", icon: Users, href: "/admin/franchisees" },
      { label: "Estat√≠sticas", icon: BarChart2, href: "/admin/analytics" },
      { label: "Evolution API", icon: Settings, href: "/admin/evolution-config" },
      { label: "Aulas", icon: BookOpen, href: "/admin/lessons" },
    ],
    franchisee: [
      { label: "Dashboard", icon: LayoutDashboard, href: "/dashboard" },
      { label: "Agentes", icon: Bot, href: "/franchisee/agents" },
      { label: "Prompts", icon: FileText, href: "/franchisee/prompts" },
      { label: "Clientes", icon: Store, href: "/franchisee/customers" },
      { label: "Prospec√ß√£o", icon: Search, href: "/franchisee/prospecting" },
      { label: "Vendedor IA", icon: MessageSquareText, href: "/franchisee/ai-sales-agent" },
      { label: "Agenda", icon: Calendar, href: "/franchisee/schedule" },
      { label: "Aulas", icon: BookOpen, href: "/franchisee/lessons" },
    ],
    customer: [
      { label: "Dashboard", icon: LayoutDashboard, href: "/dashboard" },
      { label: "Estat√≠sticas", icon: BarChart2, href: "/customer/dashboard" },
      { label: "Configurar IA", icon: Bot, href: "/customer/ai-agents" },
      { label: "Agenda", icon: Calendar, href: "/customer/schedule" },
    ],
  };

  const handleNavigate = (href: string) => {
    navigate(href);
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const getRoleDisplay = () => {
    switch (user?.role) {
      case "admin":
        return "Administrador Master";
      case "franchisee":
        return "Franqueado";
      case "customer":
        return "Cliente";
      default:
        return "";
    }
  };

  return (
    <Sidebar className="border-r border-border bg-background" translate="no">
      <SidebarHeader>
        <div className="flex items-center gap-3 px-2 py-2">
          <Avatar className="w-9 h-9">
            <AvatarImage src="https://github.com/shadcn.png" alt="Avatar" />
            <AvatarFallback>{user.name.charAt(0).toUpperCase()}</AvatarFallback>
          </Avatar>
          <div className="flex-1 min-w-0">
            <p className="font-medium text-sm truncate">{user.name}</p>
            <p className="text-xs text-muted-foreground truncate">{user.email}</p>
            <span className="text-xs px-1.5 py-0.5 bg-primary/10 text-primary rounded-full inline-block mt-1">
              {getRoleDisplay()}
            </span>
          </div>
        </div>
        <SidebarSeparator />
      </SidebarHeader>

      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Menu Principal</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {NAV_ITEMS[user.role].map((item) => {
                const Icon = item.icon;
                return (
                  <SidebarMenuItem key={item.label}>
                    <SidebarMenuButton 
                      onClick={() => handleNavigate(item.href)}
                      tooltip={item.label}
                      className="w-full justify-start"
                    >
                      <Icon className="h-4 w-4" />
                      <span>{item.label}</span>
                    </SidebarMenuButton>
                  </SidebarMenuItem>
                );
              })}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>

      <SidebarFooter>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton 
              onClick={handleLogout} 
              tooltip="Sair"
              className="w-full justify-start text-destructive hover:text-destructive hover:bg-destructive/10"
            >
              <LogOut className="h-4 w-4" />
              <span>Sair</span>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarFooter>
    </Sidebar>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/Header.tsx
================================================================================\n

import { Bell, Search } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { SidebarTrigger } from "@/components/ui/sidebar";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { useAuth } from "@/context/AuthContext";
import { useIsMobile } from "@/hooks/use-mobile";

interface HeaderProps {
  title: string;
}

export default function Header({ title }: HeaderProps) {
  const { user } = useAuth();
  const isMobile = useIsMobile();

  // Get greeting based on time of day
  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return "Bom dia";
    if (hour < 18) return "Boa tarde";
    return "Boa noite";
  };

  return (
    <header className="bg-background border-b border-border sticky top-0 z-40" translate="no">
      <div className="flex items-center justify-between p-4">
        {/* Left Section - Sidebar Trigger & Title */}
        <div className="flex items-center gap-3">
          <SidebarTrigger />
          
          <div className="min-w-0 flex-1">
            <h1 className="text-lg font-semibold text-foreground truncate">{title}</h1>
            {user && (
              <p className="text-muted-foreground text-xs sm:text-sm">
                {getGreeting()}, {user.name}
              </p>
            )}
          </div>
        </div>

        {/* Right Section - Search, Theme, Notifications */}
        <div className="flex items-center gap-2">
          {/* Search - Hidden on mobile */}
          {!isMobile && (
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input 
                type="search" 
                placeholder="Buscar..." 
                className="w-[200px] lg:w-[300px] pl-8" 
              />
            </div>
          )}
          
          {/* Theme Toggle */}
          <ThemeToggle />
          
          {/* Notifications */}
          <Button variant="ghost" size="icon" className="relative">
            <Bell className="h-5 w-5" />
            <span className="absolute -top-1 -right-1 w-4 h-4 bg-destructive rounded-full text-destructive-foreground text-xs flex items-center justify-center">
              2
            </span>
            <span className="sr-only">Notifica√ß√µes</span>
          </Button>
        </div>
      </div>
    </header>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/ResponsiveLayout.tsx
================================================================================\n

import { ReactNode } from "react";
import { cn } from "@/lib/utils";

interface ResponsiveLayoutProps {
  children: ReactNode;
  className?: string;
  variant?: "default" | "centered" | "wide";
}

export function ResponsiveLayout({ 
  children, 
  className,
  variant = "default"
}: ResponsiveLayoutProps) {
  return (
    <div className={cn(
      "w-full",
      variant === "centered" && "max-w-4xl mx-auto",
      variant === "wide" && "max-w-7xl mx-auto",
      variant === "default" && "max-w-6xl mx-auto",
      "container-padding",
      className
    )}>
      {children}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/SidebarUserInfo.tsx
================================================================================\n

import { User, LogOut } from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

export function SidebarUserInfo() {
  const { user, logout } = useAuth();

  if (!user) return null;

  const getRoleBadgeVariant = (role: string) => {
    switch (role) {
      case 'admin':
        return 'destructive';
      case 'franchisee':
        return 'default';
      case 'customer':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const getRoleLabel = (role: string) => {
    switch (role) {
      case 'admin':
        return 'Admin';
      case 'franchisee':
        return 'Franqueado';
      case 'customer':
        return 'Cliente';
      default:
        return role;
    }
  };

  return (
    <Card className="mt-auto">
      <CardContent className="p-3">
        <div className="flex items-start justify-between">
          <div className="flex items-start space-x-2 min-w-0 flex-1">
            <div className="h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0">
              <User size={16} className="text-primary" />
            </div>
            <div className="min-w-0 flex-1">
              <p className="text-sm font-medium truncate">{user.name}</p>
              <p className="text-xs text-muted-foreground truncate">{user.email}</p>
              <Badge 
                variant={getRoleBadgeVariant(user.role)} 
                className="text-xs mt-1"
              >
                {getRoleLabel(user.role)}
              </Badge>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={logout}
            className="h-8 w-8 p-0 flex-shrink-0 ml-2"
            title="Sair"
          >
            <LogOut size={14} />
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/SidebarLogout.tsx
================================================================================\n

import { LogOut } from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import { Button } from "@/components/ui/button";

export function SidebarLogout() {
  const { logout } = useAuth();

  return (
    <Button
      variant="ghost"
      className="w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950"
      onClick={logout}
    >
      <LogOut className="mr-2 h-4 w-4" />
      Sair
    </Button>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/ResponsiveGrid.tsx
================================================================================\n

import { ReactNode } from "react";
import { cn } from "@/lib/utils";

interface ResponsiveGridProps {
  children: ReactNode;
  className?: string;
  cols?: {
    base?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
  };
  gap?: "sm" | "md" | "lg";
}

export function ResponsiveGrid({ 
  children, 
  className,
  cols = { base: 1, sm: 2, lg: 3 },
  gap = "md"
}: ResponsiveGridProps) {
  const gapClasses = {
    sm: "gap-3",
    md: "gap-4 md:gap-6",
    lg: "gap-6 md:gap-8"
  };

  const gridClasses = cn(
    "grid",
    gapClasses[gap],
    cols.base && `grid-cols-${cols.base}`,
    cols.sm && `sm:grid-cols-${cols.sm}`,
    cols.md && `md:grid-cols-${cols.md}`,
    cols.lg && `lg:grid-cols-${cols.lg}`,
    cols.xl && `xl:grid-cols-${cols.xl}`,
    className
  );

  return (
    <div className={gridClasses}>
      {children}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/DashboardLayout.tsx
================================================================================\n

import { ReactNode, useEffect, useState } from "react";
import { SidebarProvider, SidebarInset } from "@/components/ui/sidebar";
import { AppSidebar } from "./AppSidebar";
import Header from "./Header";
import { ScrollArea } from "@/components/ui/scroll-area";

interface DashboardLayoutProps {
  children: ReactNode;
  title: string;
}

export default function DashboardLayout({ children, title }: DashboardLayoutProps) {
  const [isReady, setIsReady] = useState(false);

  useEffect(() => {
    // For√ßa uma re-renderiza√ß√£o ap√≥s a montagem para garantir
    // que o layout seja preservado mesmo ap√≥s tradu√ß√£o
    const timer = setTimeout(() => {
      setIsReady(true);
    }, 100);

    return () => clearTimeout(timer);
  }, []);

  // Previne flash de conte√∫do n√£o estilizado durante carregamento
  if (!isReady) {
    return (
      <div className="min-h-screen flex w-full bg-background">
        <div className="flex items-center justify-center w-full">
          <div className="animate-pulse text-primary">Carregando...</div>
        </div>
      </div>
    );
  }

  return (
    <SidebarProvider defaultOpen={true}>
      <div className="min-h-screen flex w-full bg-background" translate="no">
        <AppSidebar />
        <SidebarInset className="flex-1 bg-background min-w-0">
          <Header title={title} />
          <ScrollArea className="flex-1 h-[calc(100vh-4rem)] bg-background">
            <main className="w-full bg-background min-w-0">
              <div className="w-full mx-auto py-2 px-2 sm:py-4 sm:px-4 pb-16 bg-background">
                {children}
              </div>
            </main>
          </ScrollArea>
        </SidebarInset>
      </div>
    </SidebarProvider>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/Sidebar.tsx
================================================================================\n

import { useState } from "react";
import { useAuth } from "@/context/AuthContext";
import { cn } from "@/lib/utils";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useIsMobile } from "@/hooks/use-mobile";
import { SidebarUserInfo } from "./SidebarUserInfo";
import { SidebarToggle } from "./SidebarToggle";
import { SidebarNav } from "./SidebarNav";
import { SidebarLogout } from "./SidebarLogout";

interface SidebarProps {
  onNavigate?: () => void;
}

export default function Sidebar({ onNavigate }: SidebarProps) {
  const { user } = useAuth();
  const [isCollapsed, setIsCollapsed] = useState(false);
  const isMobile = useIsMobile();

  const toggleSidebar = () => {
    setIsCollapsed(!isCollapsed);
  };

  if (!user) return null;

  return (
    <aside
      data-sidebar="true"
      className={cn(
        "bg-background h-full transition-all duration-300 ease-in-out",
        isMobile
          ? "w-64 relative border-none"
          : cn(
              "fixed top-0 left-0 z-40 border-r border-border",
              isCollapsed ? "w-16" : "w-64"
            )
      )}
    >
      <ScrollArea className="py-4 h-full">
        <div className="space-y-4 flex flex-col justify-between h-full">
          <div className="space-y-4">
            <div
              className={cn(
                "flex items-center px-3",
                isCollapsed && !isMobile ? "justify-center" : "justify-between"
              )}
            >
              {(!isCollapsed || isMobile) && (
                <SidebarUserInfo />
              )}
              <SidebarToggle
                isCollapsed={isCollapsed}
                onToggle={toggleSidebar}
                isMobile={isMobile}
              />
            </div>
            <SidebarNav
              userRole={user.role}
              isCollapsed={isCollapsed}
              isMobile={isMobile}
              onNavigate={onNavigate}
            />
          </div>
          <SidebarLogout />
        </div>
      </ScrollArea>
    </aside>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/Section.tsx
================================================================================\n

import { ReactNode } from "react";
import { cn } from "@/lib/utils";

interface SectionProps {
  children: ReactNode;
  className?: string;
  title?: string;
  description?: string;
  spacing?: "sm" | "md" | "lg";
}

export function Section({ 
  children, 
  className,
  title,
  description,
  spacing = "md"
}: SectionProps) {
  const spacingClasses = {
    sm: "space-y-4",
    md: "space-y-6",
    lg: "space-y-8"
  };

  return (
    <section className={cn(spacingClasses[spacing], className)}>
      {(title || description) && (
        <div className="space-y-2">
          {title && (
            <h2 className="text-2xl font-semibold text-foreground">{title}</h2>
          )}
          {description && (
            <p className="text-muted-foreground">{description}</p>
          )}
        </div>
      )}
      {children}
    </section>
  );
}



================================================================================
ARQUIVO: ./src/components/layout/SidebarNav.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import {
  LayoutDashboard,
  Users,
  BarChart2,
  Bot,
  Store,
  Calendar,
  Search,
  MessageSquareText,
  BookOpen,
  FileText,
  Settings
} from "lucide-react";
import { UserRole, NavItem } from "@/types";

interface SidebarNavProps {
  userRole: UserRole;
  isCollapsed: boolean;
  isMobile: boolean;
  onNavigate?: () => void;
}

export function SidebarNav({ userRole, isCollapsed, isMobile, onNavigate }: SidebarNavProps) {
  const navigate = useNavigate();

  // Menu de navega√ß√£o para cada tipo de usu√°rio
  const NAV_ITEMS: { [key in UserRole]: NavItem[] } = {
    admin: [
      { 
        label: "Dashboard", 
        icon: LayoutDashboard, 
        href: "/dashboard" 
      },
      { 
        label: "Franqueados", 
        icon: Users, 
        href: "/admin/franchisees" 
      },
      { 
        label: "Estat√≠sticas", 
        icon: BarChart2, 
        href: "/admin/analytics" 
      },
      { 
        label: "Evolution API", 
        icon: Settings, 
        href: "/admin/evolution-config" 
      },
      { 
        label: "Aulas", 
        icon: BookOpen, 
        href: "/admin/lessons" 
      },
    ],
    franchisee: [
      { 
        label: "Dashboard", 
        icon: LayoutDashboard, 
        href: "/dashboard" 
      },
      { 
        label: "Agentes", 
        icon: Bot, 
        href: "/franchisee/agents" 
      },
      { 
        label: "Prompts", 
        icon: FileText, 
        href: "/franchisee/prompts" 
      },
      { 
        label: "Clientes", 
        icon: Store, 
        href: "/franchisee/customers" 
      },
      { 
        label: "Prospec√ß√£o", 
        icon: Search, 
        href: "/franchisee/prospecting" 
      },
      { 
        label: "Vendedor IA", 
        icon: MessageSquareText, 
        href: "/franchisee/ai-sales-agent" 
      },
      { 
        label: "Agenda", 
        icon: Calendar, 
        href: "/franchisee/schedule" 
      },
      { 
        label: "Aulas", 
        icon: BookOpen, 
        href: "/franchisee/lessons" 
      },
    ],
    customer: [
      { 
        label: "Dashboard", 
        icon: LayoutDashboard, 
        href: "/dashboard" 
      },
      { 
        label: "Estat√≠sticas", 
        icon: BarChart2, 
        href: "/customer/dashboard" 
      },
      { 
        label: "Configurar IA", 
        icon: Bot, 
        href: "/customer/ai-agents" 
      },
      { 
        label: "Agenda", 
        icon: Calendar, 
        href: "/customer/schedule" 
      },
    ],
  };

  const handleNavigate = (href: string) => {
    console.log("SidebarNav: Navigating to:", href);
    navigate(href);
    if (onNavigate) {
      onNavigate();
    }
  };

  return (
    <div className="space-y-1 px-3">
      {NAV_ITEMS[userRole].map((item) => {
        const Icon = item.icon;
        return (
          <Button
            key={item.label}
            variant="ghost"
            className="w-full justify-start text-left text-foreground hover:bg-accent hover:text-accent-foreground transition-all duration-200"
            onClick={() => handleNavigate(item.href)}
          >
            <Icon className="h-4 w-4 flex-shrink-0" size={18} />
            <span className={`ml-2 transition-all duration-300 ease-in-out ${isCollapsed && !isMobile ? 'opacity-0 w-0 overflow-hidden' : 'opacity-100'}`}>
              {item.label}
            </span>
          </Button>
        );
      })}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/plans/PlanCard.tsx
================================================================================\n
import { Plan } from "@/types";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Check, DollarSign } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { formatCurrency } from "@/constants/plans";
import { cn } from "@/lib/utils";
interface PlanCardProps {
  plan: Plan;
  currentPlanId?: string;
  onSelect: (planId: string) => void;
}
export default function PlanCard({
  plan,
  currentPlanId,
  onSelect
}: PlanCardProps) {
  const isCurrentPlan = currentPlanId === plan.id;
  const isAnnualPlan = plan.billingCycle === "annual";

  // Calculate monthly equivalent price for annual plans
  const monthlyEquivalent = isAnnualPlan ? plan.price / 12 : null;
  return <Card className={cn("flex flex-col border-2 transition-all", plan.recommended ? "border-primary shadow-md" : isCurrentPlan ? "border-green-500 shadow-sm" : "border-border")}>
      {(plan.recommended || isCurrentPlan) && <div className="absolute top-0 right-0 translate-x-2 -translate-y-2">
          
        </div>}
      
      <CardHeader>
        <CardTitle className="text-xl">{plan.name}</CardTitle>
        <CardDescription>{plan.description}</CardDescription>
      </CardHeader>
      
      <CardContent className="flex-grow">
        <div className="mb-6">
          {isAnnualPlan && monthlyEquivalent ? <>
              <p className="text-3xl font-bold">{formatCurrency(monthlyEquivalent)}<span className="text-sm font-normal">/m√™s</span></p>
              
              <div className="mt-2 flex items-center gap-1.5 text-muted-foreground">
                <DollarSign className="h-4 w-4" />
                <p className="text-sm">
                  {formatCurrency(plan.price)} por ano
                </p>
              </div>
              
              <Badge className="mt-2 bg-green-100 text-green-800 hover:bg-green-100">
                Economia de 20%
              </Badge>
            </> : <>
              <p className="text-3xl font-bold">{formatCurrency(plan.price)}</p>
              <p className="text-sm text-muted-foreground">
                por m√™s
              </p>
            </>}
        </div>
        
        <div className="space-y-2">
          {plan.features?.map((feature, index) => <div key={index} className="flex items-center">
              <Check className="h-4 w-4 text-green-500 mr-2 flex-shrink-0" />
              <span className="text-sm">{feature}</span>
            </div>)}
        </div>
      </CardContent>
      
      <CardFooter>
        <Button className="w-full" variant={isCurrentPlan ? "outline" : "default"} disabled={isCurrentPlan} onClick={() => onSelect(plan.id)}>
          {isCurrentPlan ? "Plano Atual" : "Selecionar Plano"}
        </Button>
      </CardFooter>
    </Card>;
}


================================================================================
ARQUIVO: ./src/components/lessons/VideoUploader.tsx
================================================================================\n

import { useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { VideoLesson } from "@/types";
import { 
  Form, 
  FormControl, 
  FormDescription, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { FilePlusIcon, UploadIcon, X, Youtube } from "lucide-react";
import { toast } from "sonner";

interface VideoUploaderProps {
  onSubmit: (lesson: VideoLesson) => void;
  onCancel: () => void;
}

// Form schema
const formSchema = z.object({
  title: z.string().min(5, "T√≠tulo deve ter pelo menos 5 caracteres"),
  description: z.string().min(10, "Descri√ß√£o deve ter pelo menos 10 caracteres"),
  youtubeUrl: z.string().url("URL inv√°lida").refine(
    (url) => url.includes("youtube.com") || url.includes("youtu.be"),
    "Deve ser uma URL v√°lida do YouTube"
  ),
  thumbnailUrl: z.string().optional(),
});

type FormValues = z.infer<typeof formSchema>;

export function VideoUploader({ onSubmit, onCancel }: VideoUploaderProps) {
  const [files, setFiles] = useState<File[]>([]);
  const [thumbnailPreview, setThumbnailPreview] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      description: "",
      youtubeUrl: "",
      thumbnailUrl: "",
    },
  });

  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const fileList = e.target.files;
    if (!fileList || fileList.length === 0) return;

    const file = fileList[0];
    if (!file.type.startsWith("image/")) {
      toast.error("Apenas imagens s√£o permitidas como thumbnail");
      return;
    }

    // Create preview
    const reader = new FileReader();
    reader.onload = () => {
      setThumbnailPreview(reader.result as string);
      form.setValue("thumbnailUrl", reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const fileList = e.target.files;
    if (!fileList) return;

    const newFiles = Array.from(fileList);
    setFiles((prev) => [...prev, ...newFiles]);
  };

  const removeFile = (index: number) => {
    setFiles(files.filter((_, i) => i !== index));
  };

  const handleFormSubmit = (values: FormValues) => {
    setIsUploading(true);

    // In a real app, you would upload files to a server here
    setTimeout(() => {
      // Create new lesson with mock data
      const newLesson: VideoLesson = {
        id: `lesson-${Date.now()}`,
        title: values.title,
        description: values.description,
        youtubeUrl: values.youtubeUrl,
        thumbnailUrl: thumbnailPreview || "https://images.unsplash.com/photo-1588702547923-7093a6c3ba33?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3",
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        attachments: files.map((file, index) => ({
          id: `attachment-${Date.now()}-${index}`,
          lessonId: `lesson-${Date.now()}`,
          name: file.name,
          fileUrl: URL.createObjectURL(file),
          fileType: file.type,
          fileSize: file.size,
          createdAt: new Date().toISOString(),
        })),
      };

      setIsUploading(false);
      onSubmit(newLesson);
      toast.success("Aula adicionada com sucesso!");
    }, 1500);
  };

  // Format file size for display
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' bytes';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>T√≠tulo da Aula</FormLabel>
                  <FormControl>
                    <Input placeholder="Digite o t√≠tulo da videoaula" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Descri√ß√£o</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="Descreva o conte√∫do desta aula"
                      className="min-h-[120px]" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="youtubeUrl"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>URL do YouTube</FormLabel>
                  <FormControl>
                    <div className="flex">
                      <div className="bg-gray-100 dark:bg-gray-800 px-3 flex items-center rounded-l-md border-y border-l border-input">
                        <Youtube className="h-4 w-4 text-red-600" />
                      </div>
                      <Input 
                        className="rounded-l-none"
                        placeholder="https://www.youtube.com/watch?v=..." 
                        {...field} 
                      />
                    </div>
                  </FormControl>
                  <FormDescription>
                    Cole o link do v√≠deo do YouTube
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>

          <div className="space-y-4">
            <FormItem>
              <FormLabel>Thumbnail da Aula</FormLabel>
              <FormControl>
                <div className="border-2 border-dashed rounded-md p-4 flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-800/50">
                  {thumbnailPreview ? (
                    <div className="relative w-full">
                      <img 
                        src={thumbnailPreview} 
                        alt="Thumbnail preview"
                        className="w-full h-[180px] object-cover rounded-md" 
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute top-2 right-2 bg-black/50 hover:bg-black/70 text-white rounded-full p-1"
                        onClick={() => {
                          setThumbnailPreview(null);
                          form.setValue("thumbnailUrl", "");
                        }}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ) : (
                    <div className="text-center py-6">
                      <UploadIcon className="mx-auto h-10 w-10 text-muted-foreground mb-4" />
                      <label htmlFor="thumbnail-upload" className="cursor-pointer">
                        <span className="font-medium text-primary hover:underline">
                          Clique para fazer upload
                        </span>
                        <span className="text-muted-foreground"> ou arraste e solte</span>
                        <p className="text-xs text-muted-foreground mt-2">
                          Recomendado: 1280x720px (16:9)
                        </p>
                        <input
                          id="thumbnail-upload"
                          type="file"
                          className="hidden"
                          accept="image/*"
                          onChange={handleThumbnailChange}
                        />
                      </label>
                    </div>
                  )}
                </div>
              </FormControl>
              <FormDescription>
                Carregue uma imagem para ser a miniatura da aula
              </FormDescription>
            </FormItem>

            <FormItem>
              <FormLabel>Materiais de Apoio</FormLabel>
              <FormControl>
                <div className="border rounded-md p-4 space-y-4">
                  {files.length > 0 && (
                    <div className="space-y-2">
                      {files.map((file, index) => (
                        <div 
                          key={index}
                          className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800/50 rounded-md"
                        >
                          <div className="flex items-center overflow-hidden">
                            <div className="shrink-0 mr-2">
                              <FilePlusIcon className="h-4 w-4 text-primary" />
                            </div>
                            <div className="min-w-0">
                              <p className="text-sm font-medium truncate">{file.name}</p>
                              <p className="text-xs text-muted-foreground">{formatFileSize(file.size)}</p>
                            </div>
                          </div>
                          <Button 
                            type="button" 
                            variant="ghost" 
                            size="icon" 
                            onClick={() => removeFile(index)}
                          >
                            <X className="h-4 w-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                  <div className="flex justify-center">
                    <label 
                      htmlFor="file-upload"
                      className="flex items-center gap-2 px-4 py-2 bg-primary/10 text-primary rounded-md hover:bg-primary/20 cursor-pointer"
                    >
                      <FilePlusIcon className="h-4 w-4" />
                      <span>Adicionar arquivos</span>
                      <input
                        id="file-upload"
                        type="file"
                        className="hidden"
                        multiple
                        onChange={handleFileChange}
                      />
                    </label>
                  </div>
                </div>
              </FormControl>
              <FormDescription>
                PDF, Word, Excel, PowerPoint (m√°x. 10MB por arquivo)
              </FormDescription>
            </FormItem>
          </div>
        </div>

        <Separator />

        <div className="flex justify-end gap-4">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancelar
          </Button>
          <Button type="submit" disabled={isUploading}>
            {isUploading ? "Enviando..." : "Publicar Aula"}
          </Button>
        </div>
      </form>
    </Form>
  );
}



================================================================================
ARQUIVO: ./src/components/lessons/LessonCard.tsx
================================================================================\n

import { VideoLesson } from "@/types";
import { Card, CardContent } from "@/components/ui/card";
import { Calendar, Clock, File, Play } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { cn } from "@/lib/utils";

interface LessonCardProps {
  lesson: VideoLesson;
  onClick: () => void;
  compact?: boolean;
}

export function LessonCard({ lesson, onClick, compact = false }: LessonCardProps) {
  const formattedDate = new Date(lesson.createdAt).toLocaleDateString('pt-BR');
  
  const hasAttachments = lesson.attachments.length > 0;

  return (
    <Card 
      className={cn(
        "overflow-hidden border group cursor-pointer hover:shadow-md transition-shadow duration-200",
        compact ? "h-[240px]" : "h-[320px]"
      )}
      onClick={onClick}
    >
      <div className="relative h-full flex flex-col">
        {/* Thumbnail */}
        <div 
          className={cn(
            "relative w-full overflow-hidden",
            compact ? "h-[140px]" : "h-[180px]"
          )}
        >
          <img 
            src={lesson.thumbnailUrl} 
            alt={lesson.title}
            className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          />
          <div className="absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center">
            <div className="h-12 w-12 rounded-full bg-white/90 flex items-center justify-center">
              <Play className="h-6 w-6 text-primary fill-primary ml-1" />
            </div>
          </div>
          {hasAttachments && (
            <Badge className="absolute bottom-2 right-2 bg-white/80 text-black hover:bg-white/70">
              <File className="h-3 w-3 mr-1" /> {lesson.attachments.length}
            </Badge>
          )}
        </div>

        {/* Content */}
        <CardContent className="p-3 md:p-4 flex-1 flex flex-col">
          <h3 
            className={cn(
              "font-medium text-lg line-clamp-2 mb-1",
              compact && "text-base"
            )}
          >
            {lesson.title}
          </h3>
          
          {!compact && (
            <p className="text-sm text-muted-foreground line-clamp-2 mb-2">
              {lesson.description}
            </p>
          )}
          
          <div className="mt-auto flex items-center text-xs text-muted-foreground">
            <Calendar className="h-3 w-3 mr-1" />
            <span>{formattedDate}</span>
          </div>
        </CardContent>
      </div>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/lessons/LessonsTable.tsx
================================================================================\n

import { VideoLesson } from "@/types";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Edit, Trash2, FileText, Eye } from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface LessonsTableProps {
  lessons: VideoLesson[];
}

export function LessonsTable({ lessons }: LessonsTableProps) {
  // Format date to local format
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR');
  };
  
  // Get YouTube video ID from URL
  const getYouTubeVideoId = (url: string) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return match && match[2].length === 11 ? match[2] : null;
  };

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[100px]">Preview</TableHead>
            <TableHead className="min-w-[200px]">T√≠tulo</TableHead>
            <TableHead className="hidden md:table-cell">Data</TableHead>
            <TableHead className="hidden lg:table-cell">Arquivos</TableHead>
            <TableHead className="text-right">A√ß√µes</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {lessons.length === 0 ? (
            <TableRow>
              <TableCell colSpan={5} className="h-24 text-center">
                Nenhuma aula encontrada
              </TableCell>
            </TableRow>
          ) : (
            lessons.map((lesson) => (
              <TableRow key={lesson.id}>
                <TableCell>
                  <div className="w-[80px] h-[45px] rounded overflow-hidden">
                    <img 
                      src={lesson.thumbnailUrl}
                      alt={lesson.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                </TableCell>
                <TableCell className="font-medium">
                  <div>
                    <div className="font-medium">{lesson.title}</div>
                    <div className="text-xs text-muted-foreground line-clamp-1 max-w-[200px] md:max-w-[300px]">
                      {lesson.description}
                    </div>
                  </div>
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {formatDate(lesson.createdAt)}
                </TableCell>
                <TableCell className="hidden lg:table-cell">
                  {lesson.attachments.length > 0 ? (
                    <Badge className="bg-primary/10 text-primary hover:bg-primary/20 border-primary/20">
                      <FileText className="h-3 w-3 mr-1" />
                      {lesson.attachments.length}
                    </Badge>
                  ) : (
                    <span className="text-muted-foreground text-xs">Nenhum</span>
                  )}
                </TableCell>
                <TableCell className="text-right">
                  <div className="flex justify-end gap-2">
                    <Button variant="ghost" size="icon">
                      <Eye className="h-4 w-4" />
                      <span className="sr-only">Ver</span>
                    </Button>
                    <Button variant="ghost" size="icon">
                      <Edit className="h-4 w-4" />
                      <span className="sr-only">Editar</span>
                    </Button>
                    <Button variant="ghost" size="icon">
                      <Trash2 className="h-4 w-4" />
                      <span className="sr-only">Excluir</span>
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionManagement.tsx
================================================================================\n
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  AlertCircle, 
  CheckCircle, 
  Clock, 
  MessageSquare, 
  Settings, 
  Trash2,
  RefreshCw,
  Plus,
  Smartphone,
  Bot
} from "lucide-react";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import WhatsAppQRCode from "@/components/whatsapp/WhatsAppQRCode";
import EvolutionBotSetup from "./EvolutionBotSetup"; // Importe o novo componente

interface EvolutionManagementProps {
  franchiseeId: string;
}

export default function EvolutionManagement({ franchiseeId }: EvolutionManagementProps) {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isQRModalOpen, setIsQRModalOpen] = useState(false);
  const [isBotSetupOpen, setIsBotSetupOpen] = useState(false);
  const [newInstanceName, setNewInstanceName] = useState("");
  const [selectedConfigId, setSelectedConfigId] = useState<string | null>(null);
  const [selectedInstanceName, setSelectedInstanceName] = useState<string | null>(null);
  const [currentQrCode, setCurrentQrCode] = useState<string | null>(null);
  const [isGeneratingQr, setIsGeneratingQr] = useState(false);
  const [qrError, setQrError] = useState<string | null>(null);

  const { 
    configs, 
    globalConfigs, 
    isLoading, 
    isCreating,
    createInstance, 
    connectInstance, 
    disconnectInstance, 
    deleteInstance,
    sendTestMessage,
    refreshData
  } = useEvolutionAPI(franchiseeId);

  const handleCreateInstance = async () => {
    if (!newInstanceName.trim()) {
      toast.error("Nome da inst√¢ncia √© obrigat√≥rio");
      return;
    }

    try {
      await createInstance(newInstanceName.trim());
      setNewInstanceName("");
      setIsCreateModalOpen(false);
      toast.success("Inst√¢ncia criada com sucesso!");
    } catch (error) {
      console.error('Error creating instance:', error);
      toast.error("Erro ao criar inst√¢ncia");
    }
  };

  const handleGenerateQrCode = async (configId: string) => {
    setSelectedConfigId(configId);
    setIsGeneratingQr(true);
    setQrError(null);
    setCurrentQrCode(null);
    setIsQRModalOpen(true);

    try {
      const qrCodeData = await connectInstance(configId);
      
      if (qrCodeData) {
        let qrCodeUrl = qrCodeData;
        if (typeof qrCodeData === 'string' && !qrCodeData.startsWith('data:') && !qrCodeData.startsWith('http')) {
          qrCodeUrl = `data:image/png;base64,${qrCodeData}`;
        }
        setCurrentQrCode(qrCodeUrl);
      }
    } catch (error) {
      console.error('Error generating QR code:', error);
      setQrError("Erro ao gerar QR code");
    } finally {
      setIsGeneratingQr(false);
    }
  };

  const handleDisconnect = async (configId: string) => {
    try {
      await disconnectInstance(configId);
      toast.success("Inst√¢ncia desconectada");
    } catch (error) {
      console.error('Error disconnecting:', error);
      toast.error("Erro ao desconectar inst√¢ncia");
    }
  };

  const handleDelete = async (configId: string) => {
    if (!confirm("Tem certeza que deseja remover esta inst√¢ncia? Esta a√ß√£o n√£o pode ser desfeita.")) {
      return;
    }

    try {
      await deleteInstance(configId);
      toast.success("Inst√¢ncia removida");
    } catch (error) {
      console.error('Error deleting instance:', error);
      toast.error("Erro ao remover inst√¢ncia");
    }
  };
  
  const handleOpenBotSetup = (instanceName: string) => {
      setSelectedInstanceName(instanceName);
      setIsBotSetupOpen(true);
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected': return CheckCircle;
      case 'connecting': return Clock;
      case 'qr_ready': return Clock;
      case 'disconnected': return AlertCircle;
      default: return AlertCircle;
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <RefreshCw className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5" />
            Status da EvolutionAPI
          </CardTitle>
          <CardDescription>
            Configura√ß√£o global da integra√ß√£o EvolutionAPI.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {globalConfigs.length > 0 ? (
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <span className="text-green-600 font-medium">
                EvolutionAPI configurada ({globalConfigs.length} configura√ß√£o{globalConfigs.length > 1 ? '√µes' : ''})
              </span>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-red-500" />
              <span className="text-red-600 font-medium">
                EvolutionAPI n√£o configurada. Contate o administrador.
              </span>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <Smartphone className="h-5 w-5" />
                Inst√¢ncias WhatsApp
              </CardTitle>
              <CardDescription>
                Gerencie suas conex√µes de WhatsApp via EvolutionAPI.
              </CardDescription>
            </div>
            {globalConfigs.length > 0 && (
              <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" />
                    Nova Inst√¢ncia
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>Criar Nova Inst√¢ncia</DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4 py-4">
                    <div>
                      <Label htmlFor="instanceName">Nome da Inst√¢ncia</Label>
                      <Input
                        id="instanceName"
                        value={newInstanceName}
                        onChange={(e) => setNewInstanceName(e.target.value)}
                        placeholder="Ex: whatsapp-vendas"
                      />
                    </div>
                    <div className="flex gap-2">
                      <Button 
                        onClick={handleCreateInstance}
                        disabled={isCreating}
                        className="flex-1"
                      >
                        {isCreating ? <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> : null}
                        {isCreating ? "Criando..." : "Criar Inst√¢ncia"}
                      </Button>
                      <Button variant="outline" onClick={() => setIsCreateModalOpen(false)}>
                        Cancelar
                      </Button>
                    </div>
                  </div>
                </DialogContent>
              </Dialog>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {configs.length === 0 ? (
            <div className="text-center py-8">
              <Smartphone className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground">Nenhuma inst√¢ncia criada ainda.</p>
            </div>
          ) : (
            <div className="grid gap-4">
              {configs.map((config) => {
                const StatusIcon = getStatusIcon(config.status);
                return (
                  <div key={config.id} className="border rounded-lg p-4">
                    <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <div className={`w-3 h-3 rounded-full ${config.status === 'connected' ? 'bg-green-500' : 'bg-red-500'}`} />
                        <div>
                          <h3 className="font-medium">{config.instance_name}</h3>
                        </div>
                      </div>
                      <div className="flex items-center gap-2 mt-2 sm:mt-0">
                        <Badge variant={config.status === 'connected' ? 'default' : 'secondary'}>
                          <StatusIcon className="h-3 w-3 mr-1" />
                          {config.status}
                        </Badge>
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-2">
                      {config.status === 'connected' ? (
                        <>
                          <Button size="sm" onClick={() => handleOpenBotSetup(config.instance_name)}>
                            <Bot className="h-4 w-4 mr-2" />
                            Configurar IA
                          </Button>
                          <Button size="sm" variant="outline" onClick={() => handleDisconnect(config.id)}>Desconectar</Button>
                        </>
                      ) : (
                        <Button size="sm" onClick={() => handleGenerateQrCode(config.id)}>Conectar</Button>
                      )}
                      <Button size="sm" variant="destructive" onClick={() => handleDelete(config.id)}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>

      <Dialog open={isQRModalOpen} onOpenChange={setIsQRModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Conectar WhatsApp</DialogTitle>
          </DialogHeader>
          <WhatsAppQRCode
            isGenerating={isGeneratingQr}
            qrCodeUrl={currentQrCode || undefined}
            error={qrError || undefined}
            onRefresh={() => selectedConfigId && handleGenerateQrCode(selectedConfigId)}
            onConnect={() => {
              setIsQRModalOpen(false);
              toast.success("WhatsApp conectado!");
            }}
          />
        </DialogContent>
      </Dialog>
      
      {selectedInstanceName && (
        <Dialog open={isBotSetupOpen} onOpenChange={setIsBotSetupOpen}>
            <DialogContent className="sm:max-w-2xl">
                 <EvolutionBotSetup 
                    instanceName={selectedInstanceName}
                    onSave={() => {
                        setIsBotSetupOpen(false);
                        refreshData();
                    }}
                 />
            </DialogContent>
        </Dialog>
      )}
    </div>
  );
}


================================================================================
ARQUIVO: ./src/components/evolution/GlobalEvolutionConfig.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Trash2, Plus, Settings, CheckCircle, XCircle } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

interface GlobalConfig {
  id: string;
  name: string;
  api_url: string;
  api_key: string;
  manager_url?: string;
  global_api_key?: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export default function GlobalEvolutionConfig() {
  const [configs, setConfigs] = useState<GlobalConfig[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    api_url: '',
    api_key: '',
    manager_url: '',
    global_api_key: '',
    is_active: true
  });

  useEffect(() => {
    loadConfigs();
  }, []);

  const loadConfigs = async () => {
    try {
      const { data, error } = await supabase
        .from('evolution_global_configs')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setConfigs(data || []);
    } catch (error) {
      console.error('Erro ao carregar configura√ß√µes:', error);
      toast.error('Erro ao carregar configura√ß√µes globais');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateConfig = async () => {
    if (!formData.name || !formData.api_url || !formData.api_key) {
      toast.error('Preencha os campos obrigat√≥rios');
      return;
    }

    try {
      const { error } = await supabase
        .from('evolution_global_configs')
        .insert([{
          name: formData.name,
          api_url: formData.api_url,
          api_key: formData.api_key,
          manager_url: formData.manager_url || null,
          global_api_key: formData.global_api_key || null,
          is_active: formData.is_active
        }]);

      if (error) throw error;

      toast.success('Configura√ß√£o criada com sucesso!');
      setShowCreateForm(false);
      setFormData({
        name: '',
        api_url: '',
        api_key: '',
        manager_url: '',
        global_api_key: '',
        is_active: true
      });
      await loadConfigs();
    } catch (error) {
      console.error('Erro ao criar configura√ß√£o:', error);
      toast.error('Erro ao criar configura√ß√£o');
    }
  };

  const handleToggleActive = async (configId: string, currentActive: boolean) => {
    try {
      const { error } = await supabase
        .from('evolution_global_configs')
        .update({ is_active: !currentActive })
        .eq('id', configId);

      if (error) throw error;

      toast.success('Status atualizado com sucesso!');
      await loadConfigs();
    } catch (error) {
      console.error('Erro ao atualizar status:', error);
      toast.error('Erro ao atualizar status');
    }
  };

  const handleDeleteConfig = async (configId: string) => {
    if (!confirm('Tem certeza que deseja excluir esta configura√ß√£o?')) {
      return;
    }

    try {
      const { error } = await supabase
        .from('evolution_global_configs')
        .delete()
        .eq('id', configId);

      if (error) throw error;

      toast.success('Configura√ß√£o exclu√≠da com sucesso!');
      await loadConfigs();
    } catch (error) {
      console.error('Erro ao excluir configura√ß√£o:', error);
      toast.error('Erro ao excluir configura√ß√£o');
    }
  };

  if (isLoading) {
    return <div className="text-center py-8">Carregando configura√ß√µes...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">Configura√ß√£o Global Evolution API</h1>
          <p className="text-muted-foreground">
            Configure as credenciais globais da Evolution API que ser√£o usadas pelos franqueados
          </p>
        </div>
        <Button onClick={() => setShowCreateForm(true)}>
          <Plus className="w-4 h-4 mr-2" />
          Nova Configura√ß√£o
        </Button>
      </div>

      {showCreateForm && (
        <Card>
          <CardHeader>
            <CardTitle>Nova Configura√ß√£o Global</CardTitle>
            <CardDescription>
              Configure uma nova inst√¢ncia da Evolution API
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">Nome da Configura√ß√£o *</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="Ex: Servidor Principal"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="api_url">URL da API *</Label>
                <Input
                  id="api_url"
                  value={formData.api_url}
                  onChange={(e) => setFormData(prev => ({ ...prev, api_url: e.target.value }))}
                  placeholder="https://yourdomain.com/yourserver"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="api_key">Chave da API *</Label>
                <Input
                  id="api_key"
                  type="password"
                  value={formData.api_key}
                  onChange={(e) => setFormData(prev => ({ ...prev, api_key: e.target.value }))}
                  placeholder="Sua chave da API"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="manager_url">URL do Manager</Label>
                <Input
                  id="manager_url"
                  value={formData.manager_url}
                  onChange={(e) => setFormData(prev => ({ ...prev, manager_url: e.target.value }))}
                  placeholder="https://yourdomain.com/yourmanager"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="global_api_key">Chave Global da API</Label>
                <Input
                  id="global_api_key"
                  type="password"
                  value={formData.global_api_key}
                  onChange={(e) => setFormData(prev => ({ ...prev, global_api_key: e.target.value }))}
                  placeholder="Chave global (opcional)"
                />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label>Ativo</Label>
                  <p className="text-sm text-muted-foreground">
                    Configura√ß√£o dispon√≠vel para uso
                  </p>
                </div>
                <Switch
                  checked={formData.is_active}
                  onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_active: checked }))}
                />
              </div>
            </div>

            <div className="flex gap-2 pt-4">
              <Button onClick={handleCreateConfig}>
                <Settings className="w-4 h-4 mr-2" />
                Criar Configura√ß√£o
              </Button>
              <Button variant="outline" onClick={() => setShowCreateForm(false)}>
                Cancelar
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        {configs.length === 0 ? (
          <Card className="col-span-full">
            <CardContent className="text-center py-8">
              <p className="text-muted-foreground">
                Nenhuma configura√ß√£o global encontrada. Crie a primeira configura√ß√£o.
              </p>
            </CardContent>
          </Card>
        ) : (
          configs.map((config) => (
            <Card key={config.id}>
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg">{config.name}</CardTitle>
                  <Badge variant={config.is_active ? "default" : "secondary"} className="flex items-center gap-1">
                    {config.is_active ? (
                      <CheckCircle className="h-3 w-3" />
                    ) : (
                      <XCircle className="h-3 w-3" />
                    )}
                    {config.is_active ? "Ativo" : "Inativo"}
                  </Badge>
                </div>
                <CardDescription>
                  {config.api_url}
                </CardDescription>
              </CardHeader>

              <CardContent>
                <div className="space-y-2 mb-4">
                  <div className="text-sm">
                    <span className="font-medium">API Key:</span>
                    <span className="ml-2 text-muted-foreground">
                      {config.api_key.substring(0, 8)}***
                    </span>
                  </div>
                  {config.manager_url && (
                    <div className="text-sm">
                      <span className="font-medium">Manager:</span>
                      <span className="ml-2 text-muted-foreground">{config.manager_url}</span>
                    </div>
                  )}
                  {config.global_api_key && (
                    <div className="text-sm">
                      <span className="font-medium">Global Key:</span>
                      <span className="ml-2 text-muted-foreground">Configurada</span>
                    </div>
                  )}
                </div>

                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleToggleActive(config.id, config.is_active)}
                  >
                    {config.is_active ? "Desativar" : "Ativar"}
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDeleteConfig(config.id)}
                    className="text-red-600 hover:text-red-700"
                  >
                    <Trash2 className="h-3 w-3" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/AdvancedAIConfig.tsx
================================================================================\n

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { 
  Settings, 
  Brain, 
  Clock, 
  MessageSquare, 
  Zap, 
  Filter,
  Save,
  TestTube,
  AlertCircle,
  CheckCircle
} from "lucide-react";
import { toast } from "sonner";

interface AdvancedAIConfigProps {
  agent: any;
  onUpdate: (updates: any) => Promise<void>;
}

export default function AdvancedAIConfig({ agent, onUpdate }: AdvancedAIConfigProps) {
  const [config, setConfig] = useState({
    // Configura√ß√µes b√°sicas
    model: agent.model || 'gpt-4o-mini',
    temperature: 0.7,
    max_tokens: 1000,
    top_p: 1.0,
    frequency_penalty: 0.0,
    presence_penalty: 0.0,
    
    // Configura√ß√µes de comportamento
    auto_response: agent.auto_response ?? true,
    response_delay_seconds: agent.response_delay_seconds || 2,
    max_conversation_length: 50,
    context_window_size: 10,
    
    // Filtros e triggers
    keyword_triggers: [],
    ignore_keywords: [],
    business_hours_only: false,
    business_hours_start: '09:00',
    business_hours_end: '18:00',
    
    // Configura√ß√µes avan√ßadas
    enable_memory: true,
    enable_web_search: false,
    enable_image_analysis: false,
    enable_voice_response: false,
    
    // Sistema de fallback
    fallback_enabled: true,
    fallback_message: 'Desculpe, n√£o consigo responder agora. Um atendente humano entrar√° em contato em breve.',
    human_handoff_keywords: ['falar com humano', 'atendente', 'suporte'],
    
    // Personaliza√ß√£o
    personality_style: 'professional',
    response_style: 'helpful',
    language_preference: 'pt-BR',
    custom_greeting: '',
    custom_goodbye: ''
  });

  const [isSaving, setIsSaving] = useState(false);
  const [isTesting, setIsTesting] = useState(false);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onUpdate(config);
      toast.success('Configura√ß√µes salvas com sucesso!');
    } catch (error) {
      toast.error('Erro ao salvar configura√ß√µes');
    } finally {
      setIsSaving(false);
    }
  };

  const handleTest = async () => {
    setIsTesting(true);
    try {
      // Simular teste de configura√ß√£o
      await new Promise(resolve => setTimeout(resolve, 2000));
      toast.success('Configura√ß√µes testadas com sucesso!');
    } catch (error) {
      toast.error('Erro no teste de configura√ß√µes');
    } finally {
      setIsTesting(false);
    }
  };

  const updateConfig = (field: string, value: any) => {
    setConfig(prev => ({ ...prev, [field]: value }));
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h3 className="text-xl font-semibold">Configura√ß√µes Avan√ßadas</h3>
          <p className="text-muted-foreground">
            Configure comportamentos detalhados do agente IA
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={handleTest} disabled={isTesting}>
            <TestTube className="h-4 w-4 mr-2" />
            {isTesting ? 'Testando...' : 'Testar'}
          </Button>
          <Button onClick={handleSave} disabled={isSaving}>
            <Save className="h-4 w-4 mr-2" />
            {isSaving ? 'Salvando...' : 'Salvar'}
          </Button>
        </div>
      </div>

      <Tabs defaultValue="model" className="space-y-6">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="model">Modelo</TabsTrigger>
          <TabsTrigger value="behavior">Comportamento</TabsTrigger>
          <TabsTrigger value="triggers">Triggers</TabsTrigger>
          <TabsTrigger value="advanced">Avan√ßado</TabsTrigger>
          <TabsTrigger value="personality">Personalidade</TabsTrigger>
        </TabsList>

        <TabsContent value="model" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="h-5 w-5" />
                Configura√ß√µes do Modelo IA
              </CardTitle>
              <CardDescription>
                Ajuste os par√¢metros do modelo de linguagem
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="model">Modelo</Label>
                  <Select value={config.model} onValueChange={(value) => updateConfig('model', value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="gpt-4o-mini">GPT-4O Mini (R√°pido)</SelectItem>
                      <SelectItem value="gpt-4o">GPT-4O (Avan√ßado)</SelectItem>
                      <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo (Econ√¥mico)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="max_tokens">Tokens M√°ximos</Label>
                  <Input
                    id="max_tokens"
                    type="number"
                    value={config.max_tokens}
                    onChange={(e) => updateConfig('max_tokens', parseInt(e.target.value))}
                    min={100}
                    max={4000}
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label>Temperatura: {config.temperature}</Label>
                    <Badge variant="outline">{config.temperature < 0.3 ? 'Conservador' : config.temperature > 0.7 ? 'Criativo' : 'Balanceado'}</Badge>
                  </div>
                  <Slider
                    value={[config.temperature]}
                    onValueChange={(value) => updateConfig('temperature', value[0])}
                    max={1}
                    min={0}
                    step={0.1}
                    className="w-full"
                  />
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label>Top P: {config.top_p}</Label>
                    <Badge variant="outline">Diversidade</Badge>
                  </div>
                  <Slider
                    value={[config.top_p]}
                    onValueChange={(value) => updateConfig('top_p', value[0])}
                    max={1}
                    min={0}
                    step={0.1}
                    className="w-full"
                  />
                </div>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label>Penalty Frequ√™ncia: {config.frequency_penalty}</Label>
                    <Badge variant="outline">Repeti√ß√£o</Badge>
                  </div>
                  <Slider
                    value={[config.frequency_penalty]}
                    onValueChange={(value) => updateConfig('frequency_penalty', value[0])}
                    max={2}
                    min={-2}
                    step={0.1}
                    className="w-full"
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="behavior" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5" />
                Comportamento e Timing
              </CardTitle>
              <CardDescription>
                Configure como e quando o agente responde
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label>Resposta Autom√°tica</Label>
                  <p className="text-sm text-muted-foreground">
                    Responder automaticamente √†s mensagens recebidas
                  </p>
                </div>
                <Switch
                  checked={config.auto_response}
                  onCheckedChange={(checked) => updateConfig('auto_response', checked)}
                />
              </div>

              <Separator />

              <div className="space-y-3">
                <Label>Delay de Resposta: {config.response_delay_seconds}s</Label>
                <Slider
                  value={[config.response_delay_seconds]}
                  onValueChange={(value) => updateConfig('response_delay_seconds', value[0])}
                  max={30}
                  min={1}
                  step={1}
                  className="w-full"
                />
                <p className="text-sm text-muted-foreground">
                  Tempo de espera antes de responder (simula digita√ß√£o humana)
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="max_conversation">M√°x. Mensagens por Conversa</Label>
                  <Input
                    id="max_conversation"
                    type="number"
                    value={config.max_conversation_length}
                    onChange={(e) => updateConfig('max_conversation_length', parseInt(e.target.value))}
                    min={1}
                    max={100}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="context_window">Janela de Contexto</Label>
                  <Input
                    id="context_window"
                    type="number"
                    value={config.context_window_size}
                    onChange={(e) => updateConfig('context_window_size', parseInt(e.target.value))}
                    min={1}
                    max={20}
                  />
                </div>
              </div>

              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Apenas Hor√°rio Comercial</Label>
                    <p className="text-sm text-muted-foreground">
                      Responder apenas durante hor√°rio de funcionamento
                    </p>
                  </div>
                  <Switch
                    checked={config.business_hours_only}
                    onCheckedChange={(checked) => updateConfig('business_hours_only', checked)}
                  />
                </div>

                {config.business_hours_only && (
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="start_hour">Hora In√≠cio</Label>
                      <Input
                        id="start_hour"
                        type="time"
                        value={config.business_hours_start}
                        onChange={(e) => updateConfig('business_hours_start', e.target.value)}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="end_hour">Hora Fim</Label>
                      <Input
                        id="end_hour"
                        type="time"
                        value={config.business_hours_end}
                        onChange={(e) => updateConfig('business_hours_end', e.target.value)}
                      />
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="triggers" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Filter className="h-5 w-5" />
                Triggers e Filtros
              </CardTitle>
              <CardDescription>
                Configure palavras-chave e condi√ß√µes para ativa√ß√£o
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="keyword_triggers">Palavras-chave Trigger</Label>
                <Textarea
                  id="keyword_triggers"
                  placeholder="Digite palavras-chave separadas por v√≠rgula..."
                  className="min-h-[100px]"
                />
                <p className="text-sm text-muted-foreground">
                  O agente responder√° apenas quando estas palavras forem mencionadas
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="ignore_keywords">Palavras para Ignorar</Label>
                <Textarea
                  id="ignore_keywords"
                  placeholder="Digite palavras para ignorar separadas por v√≠rgula..."
                  className="min-h-[100px]"
                />
                <p className="text-sm text-muted-foreground">
                  O agente n√£o responder√° se estas palavras forem mencionadas
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="handoff_keywords">Palavras para Transferir para Humano</Label>
                <Textarea
                  id="handoff_keywords"
                  value={config.human_handoff_keywords.join(', ')}
                  onChange={(e) => updateConfig('human_handoff_keywords', e.target.value.split(', ').filter(k => k.trim()))}
                  placeholder="falar com humano, atendente, suporte..."
                  className="min-h-[100px]"
                />
                <p className="text-sm text-muted-foreground">
                  Quando estas palavras forem mencionadas, o agente transferir√° para atendimento humano
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advanced" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="h-5 w-5" />
                Recursos Avan√ßados
              </CardTitle>
              <CardDescription>
                Configure funcionalidades experimentais e avan√ßadas
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Mem√≥ria de Conversas</Label>
                    <p className="text-sm text-muted-foreground">
                      Lembrar conversas anteriores com o mesmo usu√°rio
                    </p>
                  </div>
                  <Switch
                    checked={config.enable_memory}
                    onCheckedChange={(checked) => updateConfig('enable_memory', checked)}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Busca na Web</Label>
                    <p className="text-sm text-muted-foreground">
                      Permitir buscar informa√ß√µes atualizadas na internet
                    </p>
                  </div>
                  <Switch
                    checked={config.enable_web_search}
                    onCheckedChange={(checked) => updateConfig('enable_web_search', checked)}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>An√°lise de Imagens</Label>
                    <p className="text-sm text-muted-foreground">
                      Analisar e responder sobre imagens enviadas
                    </p>
                  </div>
                  <Switch
                    checked={config.enable_image_analysis}
                    onCheckedChange={(checked) => updateConfig('enable_image_analysis', checked)}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Resposta por Voz</Label>
                    <p className="text-sm text-muted-foreground">
                      Converter respostas em √°udio quando poss√≠vel
                    </p>
                  </div>
                  <Switch
                    checked={config.enable_voice_response}
                    onCheckedChange={(checked) => updateConfig('enable_voice_response', checked)}
                  />
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <Label>Sistema de Fallback</Label>
                    <p className="text-sm text-muted-foreground">
                      Ativar respostas de emerg√™ncia quando a IA falha
                    </p>
                  </div>
                  <Switch
                    checked={config.fallback_enabled}
                    onCheckedChange={(checked) => updateConfig('fallback_enabled', checked)}
                  />
                </div>

                {config.fallback_enabled && (
                  <div className="space-y-2">
                    <Label htmlFor="fallback_message">Mensagem de Fallback</Label>
                    <Textarea
                      id="fallback_message"
                      value={config.fallback_message}
                      onChange={(e) => updateConfig('fallback_message', e.target.value)}
                      placeholder="Mensagem enviada quando a IA n√£o consegue responder..."
                      className="min-h-[80px]"
                    />
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="personality" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Personalidade e Estilo
              </CardTitle>
              <CardDescription>
                Configure a personalidade e estilo de comunica√ß√£o do agente
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="personality_style">Estilo de Personalidade</Label>
                  <Select value={config.personality_style} onValueChange={(value) => updateConfig('personality_style', value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="professional">Profissional</SelectItem>
                      <SelectItem value="friendly">Amig√°vel</SelectItem>
                      <SelectItem value="casual">Casual</SelectItem>
                      <SelectItem value="formal">Formal</SelectItem>
                      <SelectItem value="enthusiastic">Entusiasmado</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="response_style">Estilo de Resposta</Label>
                  <Select value={config.response_style} onValueChange={(value) => updateConfig('response_style', value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="helpful">Prestativo</SelectItem>
                      <SelectItem value="concise">Conciso</SelectItem>
                      <SelectItem value="detailed">Detalhado</SelectItem>
                      <SelectItem value="empathetic">Emp√°tico</SelectItem>
                      <SelectItem value="educational">Educativo</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="language_preference">Idioma Preferido</Label>
                <Select value={config.language_preference} onValueChange={(value) => updateConfig('language_preference', value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pt-BR">Portugu√™s (Brasil)</SelectItem>
                    <SelectItem value="en-US">English (US)</SelectItem>
                    <SelectItem value="es-ES">Espa√±ol</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="custom_greeting">Sauda√ß√£o Personalizada</Label>
                <Textarea
                  id="custom_greeting"
                  value={config.custom_greeting}
                  onChange={(e) => updateConfig('custom_greeting', e.target.value)}
                  placeholder="Ol√°! Como posso ajud√°-lo hoje?"
                  className="min-h-[80px]"
                />
                <p className="text-sm text-muted-foreground">
                  Mensagem enviada quando uma nova conversa √© iniciada
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="custom_goodbye">Despedida Personalizada</Label>
                <Textarea
                  id="custom_goodbye"
                  value={config.custom_goodbye}
                  onChange={(e) => updateConfig('custom_goodbye', e.target.value)}
                  placeholder="Obrigado pelo contato! Tenha um √≥timo dia!"
                  className="min-h-[80px]"
                />
                <p className="text-sm text-muted-foreground">
                  Mensagem enviada ao finalizar uma conversa
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionPerformanceCharts.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  LineChart, 
  Line, 
  AreaChart, 
  Area, 
  BarChart, 
  Bar, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell
} from "recharts";
import { 
  TrendingUp, 
  TrendingDown, 
  BarChart3, 
  PieChart as PieChartIcon,
  Activity,
  RefreshCw
} from "lucide-react";
import { supabase } from "@/integrations/supabase/client";

interface PerformanceChartsProps {
  franchiseeId: string;
}

interface ChartData {
  messagesOverTime: Array<{ time: string; messages: number; responses: number }>;
  responseTimeData: Array<{ time: string; avgTime: number; maxTime: number }>;
  modelUsage: Array<{ model: string; count: number; percentage: number }>;
  hourlyActivity: Array<{ hour: string; messages: number; conversations: number }>;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];

export default function EvolutionPerformanceCharts({ franchiseeId }: PerformanceChartsProps) {
  const [chartData, setChartData] = useState<ChartData>({
    messagesOverTime: [],
    responseTimeData: [],
    modelUsage: [],
    hourlyActivity: []
  });
  const [isLoading, setIsLoading] = useState(true);
  const [selectedPeriod, setSelectedPeriod] = useState('24h');

  useEffect(() => {
    if (!franchiseeId) return;
    loadChartData();
  }, [franchiseeId, selectedPeriod]);

  const loadChartData = async () => {
    setIsLoading(true);
    try {
      // Simular dados de performance por enquanto
      // Na implementa√ß√£o real, estes dados viriam do banco
      
      // Mensagens ao longo do tempo
      const messagesOverTime = Array.from({ length: 24 }, (_, i) => ({
        time: `${i}:00`,
        messages: Math.floor(Math.random() * 50) + 10,
        responses: Math.floor(Math.random() * 40) + 5
      }));

      // Tempo de resposta
      const responseTimeData = Array.from({ length: 24 }, (_, i) => ({
        time: `${i}:00`,
        avgTime: Math.random() * 3 + 1,
        maxTime: Math.random() * 5 + 2
      }));

      // Uso de modelos
      const modelUsage = [
        { model: 'gpt-4o-mini', count: 450, percentage: 65 },
        { model: 'gpt-4o', count: 180, percentage: 26 },
        { model: 'gpt-3.5-turbo', count: 62, percentage: 9 }
      ];

      // Atividade por hora
      const hourlyActivity = Array.from({ length: 24 }, (_, i) => ({
        hour: `${i.toString().padStart(2, '0')}:00`,
        messages: Math.floor(Math.random() * 30) + 5,
        conversations: Math.floor(Math.random() * 15) + 2
      }));

      setChartData({
        messagesOverTime,
        responseTimeData,
        modelUsage,
        hourlyActivity
      });

    } catch (error) {
      console.error('Erro ao carregar dados dos gr√°ficos:', error);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {[...Array(4)].map((_, i) => (
          <Card key={i}>
            <CardContent className="p-6">
              <div className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                <div className="h-64 bg-gray-200 rounded"></div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Controles */}
      <div className="flex items-center justify-between">
        <div className="flex gap-2">
          {['1h', '24h', '7d', '30d'].map((period) => (
            <Button
              key={period}
              variant={selectedPeriod === period ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedPeriod(period)}
            >
              {period}
            </Button>
          ))}
        </div>
        <Button variant="outline" size="sm" onClick={loadChartData}>
          <RefreshCw className="h-4 w-4" />
        </Button>
      </div>

      {/* Gr√°ficos */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Volume de Mensagens */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="h-5 w-5" />
              Volume de Mensagens
            </CardTitle>
            <CardDescription>
              Mensagens e respostas ao longo do tempo
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={chartData.messagesOverTime}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="time" />
                  <YAxis />
                  <Tooltip />
                  <Area 
                    type="monotone" 
                    dataKey="messages" 
                    stackId="1"
                    stroke="#8884d8" 
                    fill="#8884d8"
                    fillOpacity={0.6}
                  />
                  <Area 
                    type="monotone" 
                    dataKey="responses" 
                    stackId="2"
                    stroke="#82ca9d" 
                    fill="#82ca9d"
                    fillOpacity={0.6}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Tempo de Resposta */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Activity className="h-5 w-5" />
              Tempo de Resposta
            </CardTitle>
            <CardDescription>
              Performance de resposta dos agentes IA
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={chartData.responseTimeData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="time" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`${value}s`, '']} />
                  <Line 
                    type="monotone" 
                    dataKey="avgTime" 
                    stroke="#8884d8" 
                    strokeWidth={2}
                    name="Tempo M√©dio"
                  />
                  <Line 
                    type="monotone" 
                    dataKey="maxTime" 
                    stroke="#ff7300" 
                    strokeWidth={2}
                    strokeDasharray="5 5"
                    name="Tempo M√°ximo"
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Uso de Modelos */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <PieChartIcon className="h-5 w-5" />
              Uso de Modelos IA
            </CardTitle>
            <CardDescription>
              Distribui√ß√£o de uso dos modelos de IA
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={chartData.modelUsage}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ model, percentage }) => `${model}: ${percentage}%`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="count"
                  >
                    {chartData.modelUsage.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Atividade por Hora */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              Atividade por Hora
            </CardTitle>
            <CardDescription>
              Picos de atividade ao longo do dia
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-64">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={chartData.hourlyActivity}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="hour" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="messages" fill="#8884d8" name="Mensagens" />
                  <Bar dataKey="conversations" fill="#82ca9d" name="Conversas" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* M√©tricas de Performance */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Throughput M√©dio
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <div className="text-2xl font-bold text-blue-600">
                {Math.round(chartData.messagesOverTime.reduce((acc, curr) => acc + curr.messages, 0) / chartData.messagesOverTime.length)}
              </div>
              <div className="text-sm text-muted-foreground">msg/h</div>
              <Badge variant="secondary" className="ml-auto">
                <TrendingUp className="h-3 w-3 mr-1" />
                +5.2%
              </Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Resposta M√©dia
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <div className="text-2xl font-bold text-green-600">
                {(chartData.responseTimeData.reduce((acc, curr) => acc + curr.avgTime, 0) / chartData.responseTimeData.length).toFixed(1)}s
              </div>
              <Badge variant="secondary" className="ml-auto">
                <TrendingDown className="h-3 w-3 mr-1" />
                -2.1%
              </Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">
              Uptime
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <div className="text-2xl font-bold text-green-600">
                99.8%
              </div>
              <Badge variant="secondary" className="ml-auto">
                <TrendingUp className="h-3 w-3 mr-1" />
                +0.3%
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionBotSetup.tsx
================================================================================\n
// ARQUIVO: src/components/evolution/EvolutionBotSetup.tsx

import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { RefreshCw, Save } from 'lucide-react';

// Schema para valida√ß√£o
const botSchema = z.object({
  apiKey: z.string().startsWith('sk-', { message: "Chave da OpenAI inv√°lida." }),
  systemPrompt: z.string().min(10, { message: "Prompt muito curto." }),
  speechToText: z.boolean().default(false),
});

type BotFormValues = z.infer<typeof botSchema>;

interface EvolutionBotSetupProps {
  instanceName: string;
  onSave: () => void;
}

export default function EvolutionBotSetup({ instanceName, onSave }: EvolutionBotSetupProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const form = useForm<BotFormValues>({
    resolver: zodResolver(botSchema),
    defaultValues: { apiKey: '', systemPrompt: '', speechToText: false },
  });

  const onSubmit = async (values: BotFormValues) => {
    setIsSubmitting(true);
    const loadingToast = toast.loading("Configurando IA na Evolution API...");

    try {
      // 1. Configurar as credenciais na Evolution API
      const { data: credsData, error: credsError } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'openai_set_creds',
          instanceName,
          credsName: `creds-${instanceName}`,
          apiKey: values.apiKey,
        },
      });
      if (credsError) throw new Error(`Erro ao salvar credenciais: ${credsError.message}`);
      const openAICredsId = credsData.id;

      // 2. Criar o "Bot" na Evolution API
      const { error: botError } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'openai_create_bot',
          instanceName,
          botConfig: {
            enabled: true,
            openaiCredsId,
            botType: 'chatCompletion',
            model: 'gpt-4o-mini',
            systemMessages: [values.systemPrompt],
            triggerType: 'all',
          },
        },
      });
      if (botError) throw new Error(`Erro ao criar bot: ${botError.message}`);

      // 3. Habilitar (ou n√£o) a transcri√ß√£o de √°udio
      const { error: settingsError } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'openai_set_defaults',
          instanceName,
          settings: {
            openaiCredsId,
            speechToText: values.speechToText,
          },
        },
      });
      if (settingsError) throw new Error(`Erro ao habilitar speech-to-text: ${settingsError.message}`);

      toast.dismiss(loadingToast);
      toast.success("Agente IA configurado com sucesso na Evolution API!");
      onSave();

    } catch (error: any) {
      toast.dismiss(loadingToast);
      toast.error(`Falha na configura√ß√£o: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>Configurar IA Nativa da Evolution</CardTitle>
        <CardDescription>
          Configure a IA para a inst√¢ncia <span className="font-bold">{instanceName}</span>.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="apiKey"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Chave da API OpenAI</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="sk-..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="systemPrompt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Personalidade (System Prompt)</FormLabel>
                  <FormControl>
                    <Textarea placeholder="Voc√™ √© um assistente virtual..." {...field} rows={5} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="speechToText"
              render={({ field }) => (
                <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                  <div className="space-y-0.5">
                    <FormLabel className="text-base">Habilitar Transcri√ß√£o de √Åudio</FormLabel>
                    <p className="text-sm text-muted-foreground">
                      Permitir que a Evolution API transcreva √°udios recebidos.
                    </p>
                  </div>
                  <FormControl>
                    <Switch checked={field.value} onCheckedChange={field.onChange} />
                  </FormControl>
                </FormItem>
              )}
            />
            <div className="flex justify-end">
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
                Salvar e Ativar IA
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}


================================================================================
ARQUIVO: ./src/components/evolution/EvolutionAgents.tsx
================================================================================\n
// ARQUIVO: src/components/evolution/EvolutionAgents.tsx

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Bot, Plus, Settings, RefreshCw } from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import AIAgentSetup from "./AIAgentSetup";
import { Badge } from "@/components/ui/badge";

export default function EvolutionAgents() {
  const { user } = useAuth();
  const { aiAgents, configs, isLoading, refreshData } = useEvolutionAPI(user?.id);
  
  const [isSetupModalOpen, setIsSetupModalOpen] = useState(false);
  const [editingAgent, setEditingAgent] = useState<any | null>(null);

  const handleOpenCreateModal = () => {
    setEditingAgent(null);
    setIsSetupModalOpen(true);
  };

  const handleOpenEditModal = (agent: any) => {
    setEditingAgent(agent);
    setIsSetupModalOpen(true);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <RefreshCw className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Bot className="h-5 w-5" />
              <CardTitle>Agentes IA do WhatsApp</CardTitle>
            </div>
            <Button onClick={handleOpenCreateModal}>
              <Plus className="h-4 w-4 mr-2" />
              Novo Agente IA
            </Button>
          </div>
          <CardDescription>
            Configure os agentes de IA que responder√£o automaticamente nas suas inst√¢ncias do WhatsApp.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {aiAgents.length === 0 ? (
            <div className="text-center py-8">
              <Bot className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground">
                Nenhum agente IA configurado ainda.
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {aiAgents.map((agent) => {
                const associatedConfig = configs.find(c => c.id === agent.evolution_config_id);
                return (
                  <div key={agent.id} className="border rounded-lg p-4 flex items-center justify-between">
                    <div>
                      <h3 className="font-medium">{agent.agent_id}</h3>
                      <p className="text-sm text-muted-foreground">
                        Inst√¢ncia: {associatedConfig?.instance_name || 'Desconhecida'}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Modelo: {agent.model}
                      </p>
                    </div>
                    <div className="flex items-center gap-2">
                       <Badge variant={agent.is_active ? 'default' : 'secondary'}>
                          {agent.is_active ? "Ativo" : "Inativo"}
                        </Badge>
                       <Button variant="outline" size="sm" onClick={() => handleOpenEditModal(agent)}>
                         <Settings className="h-4 w-4 mr-2" />
                         Configurar
                       </Button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Modal de Cria√ß√£o/Edi√ß√£o */}
      <AIAgentSetup
          isOpen={isSetupModalOpen}
          onClose={() => setIsSetupModalOpen(false)}
          existingAgent={editingAgent}
          franchiseeId={user?.id || ''}
          onSave={() => {
            setIsSetupModalOpen(false);
            refreshData();
          }}
      />
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/QRCodeDisplay.tsx
================================================================================\n

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { RefreshCw, Copy, CheckCircle } from "lucide-react";
import { useState, useEffect } from "react";
import { toast } from "sonner";

interface QRCodeDisplayProps {
  isOpen: boolean;
  onClose: () => void;
  qrCode?: string;
  instanceName: string;
  expiresAt?: string;
}

export default function QRCodeDisplay({ 
  isOpen, 
  onClose, 
  qrCode, 
  instanceName,
  expiresAt 
}: QRCodeDisplayProps) {
  const [timeLeft, setTimeLeft] = useState<number>(0);
  const [isExpired, setIsExpired] = useState(false);

  useEffect(() => {
    if (!expiresAt) return;

    const updateTimer = () => {
      const now = new Date().getTime();
      const expiry = new Date(expiresAt).getTime();
      const diff = expiry - now;

      if (diff <= 0) {
        setIsExpired(true);
        setTimeLeft(0);
      } else {
        setIsExpired(false);
        setTimeLeft(Math.floor(diff / 1000));
      }
    };

    updateTimer();
    const interval = setInterval(updateTimer, 1000);

    return () => clearInterval(interval);
  }, [expiresAt]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const copyToClipboard = () => {
    if (qrCode) {
      navigator.clipboard.writeText(qrCode);
      toast.success('QR Code copiado para a √°rea de transfer√™ncia');
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>QR Code - {instanceName}</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {qrCode ? (
            <>
              <div className="flex justify-center p-4 border rounded-lg bg-white">
                <img 
                  src={`data:image/png;base64,${qrCode}`} 
                  alt="QR Code para conex√£o WhatsApp"
                  className="w-64 h-64"
                />
              </div>
              
              {timeLeft > 0 && (
                <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
                  <RefreshCw className="h-4 w-4" />
                  Expira em: {formatTime(timeLeft)}
                </div>
              )}
              
              {isExpired && (
                <div className="flex items-center justify-center gap-2 text-sm text-red-600">
                  <RefreshCw className="h-4 w-4" />
                  QR Code expirado. Gere um novo.
                </div>
              )}

              <div className="text-sm text-center text-muted-foreground">
                1. Abra o WhatsApp no seu celular<br/>
                2. Toque em Configura√ß√µes ‚Üí Aparelhos conectados<br/>
                3. Toque em "Conectar um aparelho"<br/>
                4. Escaneie este c√≥digo QR
              </div>

              <Button 
                onClick={copyToClipboard}
                variant="outline"
                className="w-full"
              >
                <Copy className="h-4 w-4 mr-2" />
                Copiar c√≥digo
              </Button>
            </>
          ) : (
            <div className="text-center py-8 text-muted-foreground">
              QR Code n√£o dispon√≠vel. Tente conectar a inst√¢ncia novamente.
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/AIAgentSetup.tsx
================================================================================\n
// ARQUIVO: src/components/evolution/AIAgentSetup.tsx

import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { supabase } from "@/integrations/supabase/client";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { RefreshCw } from "lucide-react";

// Schema de valida√ß√£o com Zod
const agentSchema = z.object({
  agent_id: z.string().uuid({ message: "Selecione um agente v√°lido." }),
  evolution_config_id: z.string().uuid({ message: "Selecione uma inst√¢ncia do WhatsApp." }),
  phone_number: z.string().min(10, { message: "N√∫mero de telefone √© obrigat√≥rio." }),
  openai_api_key: z.string().refine(val => val === '' || val.startsWith('sk-'), { message: "Chave da OpenAI deve iniciar com 'sk-'." }),
  model: z.string().default('gpt-4o-mini'),
  system_prompt: z.string().min(10, { message: "O prompt deve ter pelo menos 10 caracteres." }),
  auto_response: z.boolean().default(true),
  is_active: z.boolean().default(true),
});

type AgentFormValues = z.infer<typeof agentSchema>;

interface AIAgentSetupProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: () => void;
  existingAgent?: any | null;
  franchiseeId: string;
}

export default function AIAgentSetup({ isOpen, onClose, onSave, existingAgent, franchiseeId }: AIAgentSetupProps) {
  // ### CORRE√á√ÉO 1: PEGAR O isLoading DO HOOK ###
  const { configs: evolutionConfigs, agents: traditionalAgents, isLoading } = useEvolutionAPI(franchiseeId);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<AgentFormValues>({
    resolver: zodResolver(agentSchema),
    defaultValues: {
      agent_id: '',
      evolution_config_id: '',
      phone_number: '',
      openai_api_key: '',
      model: 'gpt-4o-mini',
      system_prompt: '',
      auto_response: true,
      is_active: true,
    }
  });

  useEffect(() => {
    if (isOpen && existingAgent) {
      form.reset({
        agent_id: existingAgent.agent_id,
        evolution_config_id: existingAgent.evolution_config_id,
        phone_number: existingAgent.phone_number,
        openai_api_key: existingAgent.openai_api_key || '',
        model: existingAgent.model || 'gpt-4o-mini',
        system_prompt: existingAgent.system_prompt || '',
        auto_response: existingAgent.auto_response,
        is_active: existingAgent.is_active,
      });
    } else if (isOpen) {
      form.reset();
    }
  }, [existingAgent, form, isOpen]);

  const onSubmit = async (values: AgentFormValues) => {
    setIsSubmitting(true);
    try {
      if (existingAgent) {
        const { error } = await supabase
          .from('ai_whatsapp_agents')
          .update(values)
          .eq('id', existingAgent.id);
        if (error) throw error;
        toast.success("Agente IA atualizado com sucesso!");
      } else {
        const { error } = await supabase
          .from('ai_whatsapp_agents')
          .insert(values);
        if (error) throw error;
        toast.success("Agente IA criado com sucesso!");
      }
      onSave();
      onClose();
    } catch (error: any) {
      toast.error(`Erro ao salvar: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>{existingAgent ? 'Editar' : 'Criar'} Agente IA</DialogTitle>
          <DialogDescription>
            Configure os detalhes do seu agente de resposta autom√°tica.
          </DialogDescription>
        </DialogHeader>
        {/* ### CORRE√á√ÉO 2: VERIFICAR SE OS DADOS FORAM CARREGADOS ### */}
        {isLoading ? (
            <div className="flex items-center justify-center p-8">
                <RefreshCw className="h-6 w-6 animate-spin" />
            </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6 py-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="agent_id"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Agente do Sistema</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione o agente a ser automatizado" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {traditionalAgents?.map(agent => (
                            <SelectItem key={agent.id} value={agent.id}>{agent.name}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="evolution_config_id"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Inst√¢ncia do WhatsApp</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Selecione a inst√¢ncia conectada" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {evolutionConfigs?.filter(c => c.status === 'connected').map(config => (
                            <SelectItem key={config.id} value={config.id}>{config.instance_name}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="phone_number"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>N√∫mero do WhatsApp</FormLabel>
                    <FormControl>
                      <Input placeholder="5511999998888" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="openai_api_key"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Chave da API OpenAI</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="sk-..." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="system_prompt"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Personalidade (System Prompt)</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Voc√™ √© um assistente virtual para..." {...field} rows={5} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="flex items-center space-x-4">
                 <FormField
                  control={form.control}
                  name="is_active"
                  render={({ field }) => (
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <Switch checked={field.value} onCheckedChange={field.onChange} />
                      </FormControl>
                      <FormLabel>Agente Ativo</FormLabel>
                    </FormItem>
                  )}
                />
                 <FormField
                  control={form.control}
                  name="auto_response"
                  render={({ field }) => (
                    <FormItem className="flex items-center space-x-2">
                      <FormControl>
                        <Switch checked={field.value} onCheckedChange={field.onChange} />
                      </FormControl>
                      <FormLabel>Resposta Autom√°tica</FormLabel>
                    </FormItem>
                  )}
                />
              </div>

              <DialogFooter>
                <Button type="button" variant="outline" onClick={onClose}>Cancelar</Button>
                <Button type="submit" disabled={isSubmitting}>
                  {isSubmitting && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
                  Salvar Configura√ß√µes
                </Button>
              </DialogFooter>
            </form>
          </Form>
        )}
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionInstanceCard.tsx
================================================================================\n

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  QrCode, 
  Smartphone, 
  MessageSquare, 
  Settings, 
  Trash2,
  RefreshCw,
  CheckCircle,
  XCircle,
  Clock
} from 'lucide-react';
import QRCodeDisplay from './QRCodeDisplay';
import AIAgentConfig from './AIAgentConfig';

interface EvolutionInstance {
  id: string;
  instance_name: string;
  api_url: string;
  status: 'connected' | 'disconnected' | 'connecting' | 'error';
  qr_code?: string;
  qr_code_expires_at?: string;
  created_at: string;
}

interface EvolutionInstanceCardProps {
  instance: EvolutionInstance;
  onConnect: (configId: string) => void;
  onDisconnect: (configId: string) => void;
  onDelete?: (configId: string) => void;
  aiAgents?: any[];
}

export default function EvolutionInstanceCard({ 
  instance, 
  onConnect, 
  onDisconnect, 
  onDelete,
  aiAgents = []
}: EvolutionInstanceCardProps) {
  const [showQRCode, setShowQRCode] = useState(false);
  const [showAIConfig, setShowAIConfig] = useState(false);

  const getStatusIcon = () => {
    switch (instance.status) {
      case 'connected':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'connecting':
        return <Clock className="h-4 w-4 text-yellow-500" />;
      case 'error':
        return <XCircle className="h-4 w-4 text-red-500" />;
      default:
        return <XCircle className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusText = () => {
    switch (instance.status) {
      case 'connected':
        return 'Conectado';
      case 'connecting':
        return 'Conectando';
      case 'error':
        return 'Erro';
      default:
        return 'Desconectado';
    }
  };

  const getStatusVariant = () => {
    switch (instance.status) {
      case 'connected':
        return 'default' as const;
      case 'connecting':
        return 'secondary' as const;
      case 'error':
        return 'destructive' as const;
      default:
        return 'outline' as const;
    }
  };

  const handleConnect = async () => {
    try {
      await onConnect(instance.id);
      setShowQRCode(true);
    } catch (error) {
      // Error handled in parent
    }
  };

  const activeAgents = aiAgents.filter(agent => 
    agent.evolution_config_id === instance.id && agent.is_active
  );

  return (
    <>
      <Card>
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">{instance.instance_name}</CardTitle>
            <Badge variant={getStatusVariant()} className="flex items-center gap-1">
              {getStatusIcon()}
              {getStatusText()}
            </Badge>
          </div>
          <div className="text-sm text-muted-foreground">
            API: {instance.api_url}
          </div>
          {activeAgents.length > 0 && (
            <div className="text-sm text-muted-foreground">
              {activeAgents.length} agente(s) IA ativo(s)
            </div>
          )}
        </CardHeader>

        <CardContent className="pt-0">
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
            {instance.status === 'connected' ? (
              <>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowAIConfig(true)}
                  className="flex items-center gap-1"
                >
                  <Settings className="h-3 w-3" />
                  IA
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onDisconnect(instance.id)}
                  className="flex items-center gap-1"
                >
                  <Smartphone className="h-3 w-3" />
                  Desconectar
                </Button>
              </>
            ) : (
              <Button
                variant="default"
                size="sm"
                onClick={handleConnect}
                className="flex items-center gap-1"
              >
                <QrCode className="h-3 w-3" />
                Conectar
              </Button>
            )}
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowQRCode(true)}
              disabled={!instance.qr_code}
              className="flex items-center gap-1"
            >
              <QrCode className="h-3 w-3" />
              QR Code
            </Button>
            
            {onDelete && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => onDelete(instance.id)}
                className="flex items-center gap-1 text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-3 w-3" />
                Excluir
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      <QRCodeDisplay
        isOpen={showQRCode}
        onClose={() => setShowQRCode(false)}
        qrCode={instance.qr_code}
        instanceName={instance.instance_name}
        expiresAt={instance.qr_code_expires_at}
      />

      <AIAgentConfig
        isOpen={showAIConfig}
        onClose={() => setShowAIConfig(false)}
        evolutionConfigId={instance.id}
        instanceName={instance.instance_name}
        aiAgents={aiAgents}
      />
    </>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionDashboard.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Activity, 
  MessageSquare, 
  Bot, 
  Clock, 
  TrendingUp,
  Zap,
  AlertTriangle,
  CheckCircle,
  RefreshCw
} from "lucide-react";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";
import EvolutionAnalytics from "./EvolutionAnalytics";
import EvolutionRealtimeStats from "./EvolutionRealtimeStats";
import EvolutionPerformanceCharts from "./EvolutionPerformanceCharts";

interface EvolutionDashboardProps {
  franchiseeId: string;
}

export default function EvolutionDashboard({ franchiseeId }: EvolutionDashboardProps) {
  const { configs, aiAgents, isLoading, refreshData } = useEvolutionAPI(franchiseeId);
  const [isRefreshing, setIsRefreshing] = useState(false);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    try {
      await refreshData();
      toast.success("Dashboard atualizado com sucesso");
    } catch (error) {
      console.error('Erro ao atualizar dashboard:', error);
      toast.error("Erro ao atualizar dashboard");
    } finally {
      setIsRefreshing(false);
    }
  };

  const activeConfigs = configs.filter(c => c.status === 'connected');
  const activeAgents = aiAgents.filter(a => a.is_active);
  const totalMessages = 0; // Implementar depois com dados reais

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Dashboard de Monitoramento</h2>
          <p className="text-muted-foreground">
            Monitoramento em tempo real da integra√ß√£o EvolutionAPI
          </p>
        </div>
        <Button onClick={handleRefresh} disabled={isRefreshing} variant="outline">
          <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
          Atualizar
        </Button>
      </div>

      {/* M√©tricas Principais */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Activity className="h-4 w-4" />
              Inst√¢ncias Ativas
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {activeConfigs.length}
            </div>
            <p className="text-sm text-muted-foreground">
              de {configs.length} total
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Bot className="h-4 w-4" />
              Agentes IA
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {activeAgents.length}
            </div>
            <p className="text-sm text-muted-foreground">
              agentes ativos
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              Mensagens Hoje
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {totalMessages.toLocaleString()}
            </div>
            <p className="text-sm text-muted-foreground">
              √∫ltimas 24h
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              Status Geral
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              {activeConfigs.length > 0 ? (
                <>
                  <CheckCircle className="h-5 w-5 text-green-500" />
                  <span className="text-sm font-medium text-green-600">Operacional</span>
                </>
              ) : (
                <>
                  <AlertTriangle className="h-5 w-5 text-yellow-500" />
                  <span className="text-sm font-medium text-yellow-600">Desconectado</span>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tabs do Dashboard */}
      <Tabs defaultValue="realtime" className="space-y-4">
        <TabsList>
          <TabsTrigger value="realtime">Tempo Real</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
        </TabsList>

        <TabsContent value="realtime" className="space-y-4">
          <EvolutionRealtimeStats franchiseeId={franchiseeId} />
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          <EvolutionAnalytics franchiseeId={franchiseeId} />
        </TabsContent>

        <TabsContent value="performance" className="space-y-4">
          <EvolutionPerformanceCharts franchiseeId={franchiseeId} />
        </TabsContent>
      </Tabs>

      {/* Status das Inst√¢ncias */}
      <Card>
        <CardHeader>
          <CardTitle>Status das Inst√¢ncias</CardTitle>
          <CardDescription>
            Monitoramento em tempo real das inst√¢ncias EvolutionAPI
          </CardDescription>
        </CardHeader>
        <CardContent>
          {configs.length === 0 ? (
            <div className="text-center py-8">
              <Bot className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <p className="text-muted-foreground">
                Nenhuma inst√¢ncia configurada
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {configs.map((config) => (
                <div key={config.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className={`w-3 h-3 rounded-full ${
                      config.status === 'connected' ? 'bg-green-500' : 'bg-red-500'
                    }`} />
                    <div>
                      <h4 className="font-medium">{config.instance_name}</h4>
                      <p className="text-sm text-muted-foreground">
                        {config.status === 'connected' ? 'Conectado' : 'Desconectado'}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant={config.status === 'connected' ? 'default' : 'destructive'}>
                      {config.status === 'connected' ? 'Online' : 'Offline'}
                    </Badge>
                    <div className="text-sm text-muted-foreground">
                      {aiAgents.filter(a => a.evolution_config_id === config.id && a.is_active).length} agentes
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionLogs.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  Search, 
  Filter, 
  RefreshCw, 
  Download, 
  AlertCircle, 
  CheckCircle, 
  Clock,
  MessageSquare,
  Bot,
  User,
  Zap
} from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

interface LogEntry {
  id: string;
  type: 'message' | 'ai_interaction' | 'connection' | 'error';
  timestamp: string;
  level: 'info' | 'warning' | 'error' | 'success';
  message: string;
  details?: any;
  agent_id?: string;
  conversation_id?: string;
  model_used?: string;
  tokens_used?: number;
  response_time_ms?: number;
}

interface EvolutionLogsProps {
  franchiseeId: string;
}

export default function EvolutionLogs({ franchiseeId }: EvolutionLogsProps) {
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [levelFilter, setLevelFilter] = useState('all');
  const [typeFilter, setTypeFilter] = useState('all');
  const [autoRefresh, setAutoRefresh] = useState(true);

  useEffect(() => {
    loadLogs();
    
    if (autoRefresh) {
      const interval = setInterval(loadLogs, 10000); // Atualiza a cada 10 segundos
      return () => clearInterval(interval);
    }
  }, [franchiseeId, autoRefresh]);

  const loadLogs = async () => {
    try {
      setIsLoading(true);
      
      // Buscar configura√ß√µes do franqueado
      const { data: configs, error: configError } = await supabase
        .from('evolution_api_configs')
        .select('id, instance_name, status')
        .eq('franchisee_id', franchiseeId);

      if (configError) throw configError;
      
      if (!configs || configs.length === 0) {
        setLogs([]);
        return;
      }

      const configIds = configs.map(c => c.id);
      const logsData: LogEntry[] = [];

      // Buscar logs de intera√ß√µes IA
      const { data: aiLogs } = await supabase
        .from('ai_interaction_logs')
        .select(`
          id, 
          created_at, 
          agent_id, 
          conversation_id, 
          user_message, 
          ai_response, 
          model_used, 
          tokens_used, 
          response_time_ms
        `)
        .in('conversation_id', configIds)
        .order('created_at', { ascending: false })
        .limit(100);

      if (aiLogs) {
        aiLogs.forEach(log => {
          logsData.push({
            id: log.id,
            type: 'ai_interaction',
            timestamp: log.created_at,
            level: log.response_time_ms && log.response_time_ms > 5000 ? 'warning' : 'info',
            message: `IA respondeu em ${log.response_time_ms}ms`,
            details: {
              user_message: log.user_message,
              ai_response: log.ai_response,
              tokens: log.tokens_used
            },
            agent_id: log.agent_id,
            conversation_id: log.conversation_id,
            model_used: log.model_used,
            tokens_used: log.tokens_used,
            response_time_ms: log.response_time_ms
          });
        });
      }

      // Buscar mensagens recentes
      const { data: conversations } = await supabase
        .from('whatsapp_conversations')
        .select('id')
        .in('evolution_config_id', configIds);

      if (conversations) {
        const conversationIds = conversations.map(c => c.id);
        
        const { data: messages } = await supabase
          .from('whatsapp_messages')
          .select('id, created_at, content, sender_type, conversation_id, ai_response_generated')
          .in('conversation_id', conversationIds)
          .order('created_at', { ascending: false })
          .limit(50);

        if (messages) {
          messages.forEach(msg => {
            logsData.push({
              id: msg.id,
              type: 'message',
              timestamp: msg.created_at,
              level: 'info',
              message: msg.sender_type === 'user' 
                ? 'Mensagem recebida do usu√°rio' 
                : 'Resposta enviada',
              details: {
                content: msg.content,
                ai_generated: msg.ai_response_generated
              },
              conversation_id: msg.conversation_id
            });
          });
        }
      }

      // Logs de conex√£o (simulados baseados no status)
      configs.forEach(config => {
        logsData.push({
          id: `conn_${config.id}`,
          type: 'connection',
          timestamp: new Date().toISOString(),
          level: config.status === 'connected' ? 'success' : 
                 config.status === 'error' ? 'error' : 'warning',
          message: `Inst√¢ncia ${config.instance_name}: ${config.status}`,
          details: { instance: config.instance_name, status: config.status }
        });
      });

      // Ordenar por timestamp (mais recente primeiro)
      logsData.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
      
      setLogs(logsData.slice(0, 200)); // Limitar a 200 logs mais recentes

    } catch (error) {
      console.error('Erro ao carregar logs:', error);
      toast.error('Erro ao carregar logs');
    } finally {
      setIsLoading(false);
    }
  };

  const filteredLogs = logs.filter(log => {
    const matchesSearch = searchTerm === '' || 
      log.message.toLowerCase().includes(searchTerm.toLowerCase()) ||
      log.details?.content?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesLevel = levelFilter === 'all' || log.level === levelFilter;
    const matchesType = typeFilter === 'all' || log.type === typeFilter;
    
    return matchesSearch && matchesLevel && matchesType;
  });

  const getLevelIcon = (level: string) => {
    switch (level) {
      case 'success': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'warning': return <AlertCircle className="h-4 w-4 text-yellow-500" />;
      case 'error': return <AlertCircle className="h-4 w-4 text-red-500" />;
      default: return <Clock className="h-4 w-4 text-blue-500" />;
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'ai_interaction': return <Bot className="h-4 w-4" />;
      case 'message': return <MessageSquare className="h-4 w-4" />;
      case 'connection': return <Zap className="h-4 w-4" />;
      default: return <AlertCircle className="h-4 w-4" />;
    }
  };

  const exportLogs = () => {
    const csvContent = [
      ['Timestamp', 'Type', 'Level', 'Message', 'Details'].join(','),
      ...filteredLogs.map(log => [
        log.timestamp,
        log.type,
        log.level,
        `"${log.message}"`,
        `"${JSON.stringify(log.details || {})}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `evolution-logs-${new Date().toISOString().split('T')[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Logs exportados com sucesso!');
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Logs do Sistema</h2>
          <p className="text-muted-foreground">
            Monitoramento em tempo real das atividades da Evolution API
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant={autoRefresh ? "default" : "outline"}
            size="sm"
            onClick={() => setAutoRefresh(!autoRefresh)}
          >
            <RefreshCw className={`h-4 w-4 ${autoRefresh ? 'animate-spin' : ''}`} />
            Auto-refresh
          </Button>
          <Button variant="outline" size="sm" onClick={exportLogs}>
            <Download className="h-4 w-4 mr-2" />
            Exportar
          </Button>
        </div>
      </div>

      {/* Filtros */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filtros
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Buscar</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Buscar nos logs..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">N√≠vel</label>
              <Select value={levelFilter} onValueChange={setLevelFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="Todos os n√≠veis" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos os n√≠veis</SelectItem>
                  <SelectItem value="info">Info</SelectItem>
                  <SelectItem value="success">Sucesso</SelectItem>
                  <SelectItem value="warning">Aviso</SelectItem>
                  <SelectItem value="error">Erro</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">Tipo</label>
              <Select value={typeFilter} onValueChange={setTypeFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="Todos os tipos" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos os tipos</SelectItem>
                  <SelectItem value="message">Mensagens</SelectItem>
                  <SelectItem value="ai_interaction">IA</SelectItem>
                  <SelectItem value="connection">Conex√£o</SelectItem>
                  <SelectItem value="error">Erros</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Lista de logs */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>Logs Recentes</span>
            <Badge variant="outline">{filteredLogs.length} entradas</Badge>
          </CardTitle>
          <CardDescription>
            {isLoading ? 'Carregando logs...' : 'Logs em tempo real das atividades'}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[600px] w-full">
            {isLoading ? (
              <div className="flex items-center justify-center py-8">
                <RefreshCw className="h-6 w-6 animate-spin mr-2" />
                Carregando logs...
              </div>
            ) : filteredLogs.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                Nenhum log encontrado com os filtros aplicados
              </div>
            ) : (
              <div className="space-y-2">
                {filteredLogs.map((log) => (
                  <div
                    key={log.id}
                    className="flex items-start gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors"
                  >
                    <div className="flex items-center gap-2 min-w-0">
                      {getLevelIcon(log.level)}
                      {getTypeIcon(log.type)}
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="font-medium text-sm">{log.message}</span>
                        <Badge variant="outline" className="text-xs">
                          {log.type}
                        </Badge>
                        {log.model_used && (
                          <Badge variant="secondary" className="text-xs">
                            {log.model_used}
                          </Badge>
                        )}
                      </div>
                      
                      <div className="text-xs text-muted-foreground">
                        {new Date(log.timestamp).toLocaleString()}
                        {log.response_time_ms && (
                          <span className="ml-2">‚Ä¢ {log.response_time_ms}ms</span>
                        )}
                        {log.tokens_used && (
                          <span className="ml-2">‚Ä¢ {log.tokens_used} tokens</span>
                        )}
                      </div>
                      
                      {log.details && (
                        <div className="mt-2 p-2 bg-muted rounded text-xs">
                          {log.details.content && (
                            <div className="truncate">{log.details.content}</div>
                          )}
                          {log.details.user_message && (
                            <div className="mt-1">
                              <span className="font-medium">User: </span>
                              <span className="truncate">{log.details.user_message}</span>
                            </div>
                          )}
                          {log.details.ai_response && (
                            <div className="mt-1">
                              <span className="font-medium">IA: </span>
                              <span className="truncate">{log.details.ai_response}</span>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionAPISetup.tsx
================================================================================\n

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, XCircle, Loader2, TestTube, Zap } from "lucide-react";
import { toast } from "sonner";

interface GlobalConfig {
  id: string;
  name: string;
  api_url: string;
  is_active: boolean;
}

interface EvolutionAPISetupProps {
  globalConfigs: GlobalConfig[];
  onTestConnection: (globalConfigId: string) => Promise<any>;
  onCreateInstance: (instanceName: string, globalConfigId: string) => Promise<any>;
  isCreating: boolean;
}

export default function EvolutionAPISetup({ 
  globalConfigs,
  onTestConnection, 
  onCreateInstance, 
  isCreating 
}: EvolutionAPISetupProps) {
  const [formData, setFormData] = useState({
    selectedGlobalConfig: '',
    instanceName: ''
  });

  const [connectionStatus, setConnectionStatus] = useState<'idle' | 'testing' | 'success' | 'error'>('idle');
  const [isTesting, setIsTesting] = useState(false);

  const handleChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Reset connection status when changing global config
    if (field === 'selectedGlobalConfig') {
      setConnectionStatus('idle');
    }
  };

  const testConnection = async () => {
    if (!formData.selectedGlobalConfig) {
      toast.error('Selecione uma configura√ß√£o global');
      return;
    }

    setIsTesting(true);
    setConnectionStatus('testing');

    try {
      await onTestConnection(formData.selectedGlobalConfig);
      setConnectionStatus('success');
    } catch (error) {
      setConnectionStatus('error');
    } finally {
      setIsTesting(false);
    }
  };

  const createInstance = async () => {
    if (!formData.instanceName || !formData.selectedGlobalConfig) {
      toast.error('Preencha todos os campos obrigat√≥rios');
      return;
    }

    if (connectionStatus !== 'success') {
      toast.error('Teste a conex√£o primeiro');
      return;
    }

    try {
      await onCreateInstance(
        formData.instanceName,
        formData.selectedGlobalConfig
      );
      
      // Reset form after successful creation
      setFormData(prev => ({ ...prev, instanceName: '' }));
    } catch (error) {
      console.error('Erro ao criar inst√¢ncia:', error);
    }
  };

  const getConnectionStatusBadge = () => {
    switch (connectionStatus) {
      case 'testing':
        return <Badge variant="secondary"><Loader2 className="w-3 h-3 mr-1 animate-spin" />Testando</Badge>;
      case 'success':
        return <Badge variant="default"><CheckCircle className="w-3 h-3 mr-1" />Conectado</Badge>;
      case 'error':
        return <Badge variant="destructive"><XCircle className="w-3 h-3 mr-1" />Erro</Badge>;
      default:
        return null;
    }
  };

  const selectedConfig = globalConfigs.find(config => config.id === formData.selectedGlobalConfig);

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5" />
            Configura√ß√£o da EvolutionAPI
          </CardTitle>
          <CardDescription>
            Selecione uma configura√ß√£o global e crie sua inst√¢ncia WhatsApp
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-6">
          {globalConfigs.length === 0 ? (
            <div className="bg-muted/50 p-4 rounded-lg text-center">
              <p className="text-muted-foreground">
                Nenhuma configura√ß√£o global dispon√≠vel. Entre em contato com o administrador.
              </p>
            </div>
          ) : (
            <>
              {/* Sele√ß√£o de Configura√ß√£o Global */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-medium">Configura√ß√£o Global</h3>
                  {getConnectionStatusBadge()}
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="globalConfig">Configura√ß√£o Dispon√≠vel *</Label>
                  <Select 
                    value={formData.selectedGlobalConfig} 
                    onValueChange={(value) => handleChange('selectedGlobalConfig', value)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione uma configura√ß√£o" />
                    </SelectTrigger>
                    <SelectContent>
                      {globalConfigs.map((config) => (
                        <SelectItem key={config.id} value={config.id}>
                          <div className="flex items-center justify-between w-full">
                            <span>{config.name}</span>
                            <Badge variant="outline" className="ml-2">
                              {config.api_url}
                            </Badge>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {selectedConfig && (
                  <div className="bg-muted/50 p-3 rounded-lg">
                    <p className="text-sm">
                      <span className="font-medium">URL da API:</span> {selectedConfig.api_url}
                    </p>
                  </div>
                )}

                <Button 
                  onClick={testConnection} 
                  disabled={isTesting || !formData.selectedGlobalConfig}
                  variant="outline"
                  className="w-full"
                >
                  <TestTube className="w-4 h-4 mr-2" />
                  {isTesting ? 'Testando Conex√£o...' : 'Testar Conex√£o'}
                </Button>
              </div>

              {/* Cria√ß√£o de Inst√¢ncia */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium">Criar Nova Inst√¢ncia</h3>
                
                <div className="space-y-2">
                  <Label htmlFor="instanceName">Nome da Inst√¢ncia *</Label>
                  <Input
                    id="instanceName"
                    value={formData.instanceName}
                    onChange={(e) => handleChange('instanceName', e.target.value)}
                    placeholder="minha-instancia-whatsapp"
                  />
                </div>

                <Button 
                  onClick={createInstance}
                  disabled={isCreating || connectionStatus !== 'success' || !formData.instanceName}
                  className="w-full"
                >
                  {isCreating ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Criando Inst√¢ncia...
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4 mr-2" />
                      Criar Inst√¢ncia
                    </>
                  )}
                </Button>
              </div>
            </>
          )}

          {/* Informa√ß√µes de ajuda */}
          <div className="bg-muted/50 p-4 rounded-lg">
            <h4 className="font-medium mb-2">Como usar:</h4>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>1. Selecione uma configura√ß√£o global dispon√≠vel</li>
              <li>2. Teste a conex√£o com o servidor</li>
              <li>3. Crie uma nova inst√¢ncia para seu WhatsApp</li>
              <li>4. Configure agentes IA na aba correspondente</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionIntegration.tsx
================================================================================\n
// ARQUIVO: src/components/evolution/EvolutionIntegration.tsx

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Bot, MessageSquare, Settings, Smartphone, BarChart3 } from "lucide-react";
import EvolutionManagement from "./EvolutionManagement";
import EvolutionAgents from "./EvolutionAgents"; // Verifique se a importa√ß√£o est√° correta
import EvolutionMessages from "./EvolutionMessages";
import EvolutionDashboard from "./EvolutionDashboard";

interface EvolutionIntegrationProps {
  franchiseeId: string;
}

export default function EvolutionIntegration({ franchiseeId }: EvolutionIntegrationProps) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bot className="h-6 w-6" />
            Integra√ß√£o EvolutionAPI
          </CardTitle>
          <CardDescription>
            Gerencie a integra√ß√£o completa com EvolutionAPI para automa√ß√£o de WhatsApp com IA
          </CardDescription>
        </CardHeader>
      </Card>

      <Tabs defaultValue="dashboard" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="dashboard" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            Dashboard
          </TabsTrigger>
          <TabsTrigger value="management" className="flex items-center gap-2">
            <Settings className="h-4 w-4" />
            Gerenciamento
          </TabsTrigger>
          <TabsTrigger value="agents" className="flex items-center gap-2">
            <Bot className="h-4 w-4" /> {/* √çcone alterado para Bot */}
            Agentes IA
          </TabsTrigger>
          <TabsTrigger value="messages" className="flex items-center gap-2">
            <MessageSquare className="h-4 w-4" />
            Mensagens
          </TabsTrigger>
        </TabsList>

        <TabsContent value="dashboard">
          <EvolutionDashboard franchiseeId={franchiseeId} />
        </TabsContent>

        <TabsContent value="management">
          <EvolutionManagement franchiseeId={franchiseeId} />
        </TabsContent>

        {/* ################################################## */}
        {/* ### ALTERA√á√ÉO PRINCIPAL APLICADA AQUI          ### */}
        {/* ################################################## */}
        <TabsContent value="agents">
          <EvolutionAgents />
        </TabsContent>
        {/* ################################################## */}

        <TabsContent value="messages">
          <EvolutionMessages franchiseeId={franchiseeId} />
        </TabsContent>
      </Tabs>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionAnalytics.tsx
================================================================================\n
import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  BarChart3, 
  MessageSquare, 
  Clock, 
  Zap, 
  TrendingUp,
  Activity,
  Bot,
  RefreshCw,
  AlertTriangle
} from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { useAuth } from "@/context/AuthContext";

interface AnalyticsData {
  totalMessages: number;
  aiResponses: number;
  responseTime: number;
  activeAgents: number;
  conversationsToday: number;
  errorRate: number;
  topModels: Array<{ model: string; count: number; avgTime: number }>;
  hourlyStats: Array<{ hour: number; messages: number; responses: number }>;
}

interface EvolutionAnalyticsProps {
  franchiseeId?: string;
}

export default function EvolutionAnalytics({ franchiseeId }: EvolutionAnalyticsProps) {
  const { user } = useAuth();
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedPeriod, setSelectedPeriod] = useState('24h');

  // Use the franchiseeId parameter or fallback to current user ID
  const effectiveFranchiseeId = franchiseeId || user?.id;

  useEffect(() => {
    if (!effectiveFranchiseeId) {
      setIsLoading(false);
      return;
    }

    loadAnalytics();
    const interval = setInterval(loadAnalytics, 30000); // Atualiza a cada 30 segundos
    return () => clearInterval(interval);
  }, [effectiveFranchiseeId, selectedPeriod]);

  const loadAnalytics = async () => {
    if (!effectiveFranchiseeId) return;

    try {
      setIsLoading(true);
      
      // Buscar configura√ß√µes ativas
      const { data: configs, error: configError } = await supabase
        .from('evolution_api_configs')
        .select('id')
        .eq('franchisee_id', effectiveFranchiseeId);

      if (configError) throw configError;
      
      if (!configs || configs.length === 0) {
        setAnalytics({
          totalMessages: 0,
          aiResponses: 0,
          responseTime: 0,
          activeAgents: 0,
          conversationsToday: 0,
          errorRate: 0,
          topModels: [],
          hourlyStats: []
        });
        return;
      }

      const configIds = configs.map(c => c.id);

      // Calcular per√≠odo
      const now = new Date();
      let startDate = new Date();
      
      switch (selectedPeriod) {
        case '1h':
          startDate.setHours(now.getHours() - 1);
          break;
        case '24h':
          startDate.setDate(now.getDate() - 1);
          break;
        case '7d':
          startDate.setDate(now.getDate() - 7);
          break;
        case '30d':
          startDate.setDate(now.getDate() - 30);
          break;
      }

      // Buscar conversas
      const { data: conversations } = await supabase
        .from('whatsapp_conversations')
        .select('id, created_at')
        .in('evolution_config_id', configIds)
        .gte('created_at', startDate.toISOString());

      const conversationIds = conversations?.map(c => c.id) || [];

      // Buscar mensagens
      const { data: messages } = await supabase
        .from('whatsapp_messages')
        .select('id, sender_type, ai_response_generated, created_at')
        .in('conversation_id', conversationIds)
        .gte('created_at', startDate.toISOString());

      // Buscar logs de IA
      const { data: aiLogs } = await supabase
        .from('ai_interaction_logs')
        .select('model_used, response_time_ms, tokens_used, created_at')
        .in('conversation_id', conversationIds)
        .gte('created_at', startDate.toISOString());

      // Buscar agentes ativos
      const { data: activeAgents } = await supabase
        .from('ai_whatsapp_agents')
        .select('id, model')
        .in('evolution_config_id', configIds)
        .eq('is_active', true);

      // Calcular m√©tricas
      const totalMessages = messages?.length || 0;
      const aiResponses = messages?.filter(m => m.ai_response_generated)?.length || 0;
      const avgResponseTime = aiLogs?.length 
        ? aiLogs.reduce((sum, log) => sum + (log.response_time_ms || 0), 0) / aiLogs.length
        : 0;

      // Estat√≠sticas por modelo
      const modelStats = aiLogs?.reduce((acc, log) => {
        const model = log.model_used || 'unknown';
        if (!acc[model]) {
          acc[model] = { count: 0, totalTime: 0 };
        }
        acc[model].count++;
        acc[model].totalTime += log.response_time_ms || 0;
        return acc;
      }, {} as Record<string, { count: number; totalTime: number }>) || {};

      const topModels = Object.entries(modelStats)
        .map(([model, stats]) => ({
          model,
          count: stats.count,
          avgTime: stats.count > 0 ? stats.totalTime / stats.count : 0
        }))
        .sort((a, b) => b.count - a.count)
        .slice(0, 5);

      // Estat√≠sticas por hora (√∫ltimas 24h)
      const hourlyStats = Array.from({ length: 24 }, (_, i) => {
        const hour = new Date(now.getTime() - (23 - i) * 60 * 60 * 1000).getHours();
        const hourMessages = messages?.filter(m => 
          new Date(m.created_at).getHours() === hour &&
          new Date(m.created_at) >= new Date(now.getTime() - 24 * 60 * 60 * 1000)
        ) || [];
        
        return {
          hour,
          messages: hourMessages.length,
          responses: hourMessages.filter(m => m.ai_response_generated).length
        };
      });

      setAnalytics({
        totalMessages,
        aiResponses,
        responseTime: Math.round(avgResponseTime),
        activeAgents: activeAgents?.length || 0,
        conversationsToday: conversations?.filter(c => 
          new Date(c.created_at) >= new Date(now.setHours(0, 0, 0, 0))
        )?.length || 0,
        errorRate: 0, // Implementar depois
        topModels,
        hourlyStats
      });

    } catch (error) {
      console.error('Erro ao carregar analytics:', error);
      toast.error('Erro ao carregar estat√≠sticas');
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center">
            <RefreshCw className="h-6 w-6 animate-spin mr-2" />
            Carregando estat√≠sticas...
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!analytics) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <AlertTriangle className="h-8 w-8 mx-auto mb-2 text-yellow-500" />
          <p>Nenhuma estat√≠stica dispon√≠vel</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Analytics Evolution API</h2>
        <div className="flex gap-2">
          {['1h', '24h', '7d', '30d'].map((period) => (
            <Button
              key={period}
              variant={selectedPeriod === period ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedPeriod(period)}
            >
              {period}
            </Button>
          ))}
          <Button variant="outline" size="sm" onClick={loadAnalytics}>
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* M√©tricas principais */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              Mensagens Total
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.totalMessages}</div>
            <Badge variant="secondary" className="text-xs mt-1">
              {analytics.aiResponses} respostas IA
            </Badge>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Clock className="h-4 w-4" />
              Tempo Resposta
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.responseTime}ms</div>
            <p className="text-xs text-muted-foreground mt-1">Tempo m√©dio</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Bot className="h-4 w-4" />
              Agentes Ativos
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{analytics.activeAgents}</div>
            <p className="text-xs text-muted-foreground mt-1">Em funcionamento</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <TrendingUp className="h-4 w-4" />
              Conversas Hoje
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.conversationsToday}</div>
            <p className="text-xs text-muted-foreground mt-1">Novas conversas</p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="models" className="space-y-4">
        <TabsList>
          <TabsTrigger value="models">Modelos IA</TabsTrigger>
          <TabsTrigger value="hourly">Atividade por Hora</TabsTrigger>
        </TabsList>

        <TabsContent value="models" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Top Modelos IA</CardTitle>
              <CardDescription>
                Modelos mais utilizados e sua performance
              </CardDescription>
            </CardHeader>
            <CardContent>
              {analytics.topModels.length === 0 ? (
                <p className="text-center text-muted-foreground py-4">
                  Nenhum modelo utilizado ainda
                </p>
              ) : (
                <div className="space-y-3">
                  {analytics.topModels.map((model, index) => (
                    <div key={model.model} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center gap-3">
                        <Badge variant="outline">#{index + 1}</Badge>
                        <div>
                          <div className="font-medium">{model.model}</div>
                          <div className="text-sm text-muted-foreground">
                            {model.count} intera√ß√µes
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-medium">{Math.round(model.avgTime)}ms</div>
                        <div className="text-sm text-muted-foreground">tempo m√©dio</div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="hourly" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Atividade por Hora (24h)</CardTitle>
              <CardDescription>
                Volume de mensagens e respostas nas √∫ltimas 24 horas
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {analytics.hourlyStats.map((stat) => (
                  <div key={stat.hour} className="flex items-center gap-4 p-2 border rounded">
                    <div className="w-12 text-sm font-mono">
                      {stat.hour.toString().padStart(2, '0')}:00
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center gap-2">
                        <div className="flex-1 bg-gray-200 rounded-full h-2">
                          <div 
                            className="bg-blue-500 h-2 rounded-full" 
                            style={{ width: `${Math.max(5, (stat.messages / Math.max(...analytics.hourlyStats.map(s => s.messages)) * 100))}%` }}
                          />
                        </div>
                        <span className="text-sm font-medium w-8">{stat.messages}</span>
                      </div>
                      {stat.responses > 0 && (
                        <div className="flex items-center gap-2 mt-1">
                          <div className="flex-1 bg-gray-200 rounded-full h-1">
                            <div 
                              className="bg-green-500 h-1 rounded-full" 
                              style={{ width: `${Math.max(5, (stat.responses / Math.max(...analytics.hourlyStats.map(s => s.responses)) * 100))}%` }}
                            />
                          </div>
                          <span className="text-xs text-muted-foreground w-8">{stat.responses}</span>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionMessages.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { MessageSquare, Send, RefreshCw, Search, Filter } from "lucide-react";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";
import { toast } from "sonner";

interface EvolutionMessagesProps {
  franchiseeId: string;
}

interface Message {
  id: string;
  from: string;
  to: string;
  content: string;
  timestamp: string;
  type: 'sent' | 'received';
  configId: string;
}

export default function EvolutionMessages({ franchiseeId }: EvolutionMessagesProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [filteredMessages, setFilteredMessages] = useState<Message[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedConfig, setSelectedConfig] = useState<string>("all");
  const [testNumber, setTestNumber] = useState("");
  const [testMessage, setTestMessage] = useState("");
  const [isSending, setIsSending] = useState(false);
  
  const { configs, sendTestMessage } = useEvolutionAPI(franchiseeId);

  // Simular mensagens para demonstra√ß√£o
  useEffect(() => {
    const mockMessages: Message[] = [
      {
        id: '1',
        from: '5511999999999',
        to: 'agent',
        content: 'Ol√°, gostaria de saber sobre seus produtos',
        timestamp: new Date().toISOString(),
        type: 'received',
        configId: configs[0]?.id || 'mock'
      },
      {
        id: '2',
        from: 'agent',
        to: '5511999999999',
        content: 'Ol√°! Posso ajud√°-lo com informa√ß√µes sobre nossos produtos. O que voc√™ gostaria de saber?',
        timestamp: new Date().toISOString(),
        type: 'sent',
        configId: configs[0]?.id || 'mock'
      }
    ];
    
    setMessages(mockMessages);
    setFilteredMessages(mockMessages);
  }, [configs]);

  // Filtrar mensagens
  useEffect(() => {
    let filtered = messages;
    
    if (searchTerm) {
      filtered = filtered.filter(msg => 
        msg.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
        msg.from.includes(searchTerm) ||
        msg.to.includes(searchTerm)
      );
    }
    
    if (selectedConfig !== 'all') {
      filtered = filtered.filter(msg => msg.configId === selectedConfig);
    }
    
    setFilteredMessages(filtered);
  }, [messages, searchTerm, selectedConfig]);

  const handleSendTestMessage = async () => {
    if (!testNumber || !testMessage) {
      toast.error("Preencha o n√∫mero e mensagem");
      return;
    }

    const connectedConfig = configs.find(c => c.status === 'connected');
    if (!connectedConfig) {
      toast.error("Nenhuma inst√¢ncia conectada encontrada");
      return;
    }

    setIsSending(true);
    try {
      await sendTestMessage(connectedConfig.id, testNumber, testMessage);
      
      // Adicionar mensagem √† lista
      const newMessage: Message = {
        id: Date.now().toString(),
        from: 'agent',
        to: testNumber,
        content: testMessage,
        timestamp: new Date().toISOString(),
        type: 'sent',
        configId: connectedConfig.id
      };
      
      setMessages(prev => [...prev, newMessage]);
      setTestNumber("");
      setTestMessage("");
      toast.success("Mensagem enviada com sucesso!");
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error("Erro ao enviar mensagem");
    } finally {
      setIsSending(false);
    }
  };

  const formatPhoneNumber = (phone: string) => {
    // Formatar n√∫mero de telefone para exibi√ß√£o
    if (phone.length > 10) {
      return `${phone.slice(0, 2)} ${phone.slice(2, 7)}-${phone.slice(7)}`;
    }
    return phone;
  };

  const formatTimestamp = (timestamp: string) => {
    return new Date(timestamp).toLocaleString('pt-BR');
  };

  return (
    <div className="space-y-6">
      {/* Envio de mensagem de teste */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Send className="h-5 w-5" />
            Enviar Mensagem de Teste
          </CardTitle>
          <CardDescription>
            Envie uma mensagem de teste para verificar a integra√ß√£o
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">
                N√∫mero de Telefone (com c√≥digo do pa√≠s)
              </label>
              <Input
                placeholder="Ex: 5511999999999"
                value={testNumber}
                onChange={(e) => setTestNumber(e.target.value)}
              />
            </div>
            <div>
              <label className="text-sm font-medium mb-2 block">
                Mensagem
              </label>
              <Input
                placeholder="Digite sua mensagem de teste"
                value={testMessage}
                onChange={(e) => setTestMessage(e.target.value)}
              />
            </div>
          </div>
          <Button
            onClick={handleSendTestMessage}
            disabled={isSending || configs.filter(c => c.status === 'connected').length === 0}
            className="mt-4"
          >
            {isSending ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                Enviando...
              </>
            ) : (
              <>
                <Send className="h-4 w-4 mr-2" />
                Enviar Teste
              </>
            )}
          </Button>
          {configs.filter(c => c.status === 'connected').length === 0 && (
            <p className="text-sm text-muted-foreground mt-2">
              Conecte uma inst√¢ncia do WhatsApp primeiro
            </p>
          )}
        </CardContent>
      </Card>

      {/* Hist√≥rico de mensagens */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5" />
            Hist√≥rico de Mensagens
          </CardTitle>
          <CardDescription>
            Visualize as mensagens enviadas e recebidas
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* Filtros */}
          <div className="flex flex-col sm:flex-row gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Buscar mensagens..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4 text-muted-foreground" />
              <select
                value={selectedConfig}
                onChange={(e) => setSelectedConfig(e.target.value)}
                className="px-3 py-2 border rounded-md text-sm"
              >
                <option value="all">Todas as inst√¢ncias</option>
                {configs.map(config => (
                  <option key={config.id} value={config.id}>
                    {config.instance_name}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Lista de mensagens */}
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {filteredMessages.length === 0 ? (
              <div className="text-center py-8">
                <MessageSquare className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <p className="text-muted-foreground">
                  {searchTerm || selectedConfig !== 'all' 
                    ? "Nenhuma mensagem encontrada com os filtros aplicados"
                    : "Nenhuma mensagem ainda"
                  }
                </p>
              </div>
            ) : (
              filteredMessages.map((message) => (
                <div
                  key={message.id}
                  className={`p-4 rounded-lg border ${
                    message.type === 'sent' 
                      ? 'bg-blue-50 border-blue-200 ml-8' 
                      : 'bg-gray-50 border-gray-200 mr-8'
                  }`}
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <Badge variant={message.type === 'sent' ? 'default' : 'secondary'}>
                        {message.type === 'sent' ? 'Enviada' : 'Recebida'}
                      </Badge>
                      <span className="text-sm text-muted-foreground">
                        {message.type === 'sent' 
                          ? `Para: ${formatPhoneNumber(message.to)}`
                          : `De: ${formatPhoneNumber(message.from)}`
                        }
                      </span>
                    </div>
                    <span className="text-xs text-muted-foreground">
                      {formatTimestamp(message.timestamp)}
                    </span>
                  </div>
                  <p className="text-sm">{message.content}</p>
                </div>
              ))
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/EvolutionRealtimeStats.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { 
  MessageSquare, 
  Clock, 
  Zap, 
  Users,
  Activity,
  AlertCircle
} from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/context/AuthContext";

interface RealtimeStatsProps {
  franchiseeId: string;
}

interface RealtimeData {
  activeConversations: number;
  messagesLastHour: number;
  avgResponseTime: number;
  systemLoad: number;
  errorRate: number;
  lastUpdate: Date;
}

export default function EvolutionRealtimeStats({ franchiseeId }: RealtimeStatsProps) {
  const { user } = useAuth();
  const [stats, setStats] = useState<RealtimeData>({
    activeConversations: 0,
    messagesLastHour: 0,
    avgResponseTime: 0,
    systemLoad: 0,
    errorRate: 0,
    lastUpdate: new Date()
  });
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (!franchiseeId) return;

    loadRealtimeStats();
    
    // Atualizar a cada 30 segundos
    const interval = setInterval(loadRealtimeStats, 30000);
    
    return () => clearInterval(interval);
  }, [franchiseeId]);

  const loadRealtimeStats = async () => {
    try {
      const now = new Date();
      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);

      // Buscar configura√ß√µes do franqueado
      const { data: configs } = await supabase
        .from('evolution_api_configs')
        .select('id')
        .eq('franchisee_id', franchiseeId);

      if (!configs || configs.length === 0) {
        setStats(prev => ({ ...prev, lastUpdate: new Date() }));
        return;
      }

      const configIds = configs.map(c => c.id);

      // Conversas ativas
      const { data: conversations } = await supabase
        .from('whatsapp_conversations')
        .select('id')
        .in('evolution_config_id', configIds)
        .eq('is_active', true);

      // Mensagens da √∫ltima hora
      const { data: messages } = await supabase
        .from('whatsapp_messages')
        .select('id, conversation_id')
        .gte('created_at', oneHourAgo.toISOString());

      const conversationIds = conversations?.map(c => c.id) || [];
      const recentMessages = messages?.filter(m => 
        conversationIds.includes(m.conversation_id)
      ) || [];

      // Tempo de resposta m√©dio (simulado por enquanto)
      const avgResponseTime = Math.random() * 3 + 1; // 1-4 segundos

      // Carga do sistema (simulada)
      const systemLoad = Math.random() * 100;

      // Taxa de erro (simulada)
      const errorRate = Math.random() * 5; // 0-5%

      setStats({
        activeConversations: conversations?.length || 0,
        messagesLastHour: recentMessages.length,
        avgResponseTime: Math.round(avgResponseTime * 10) / 10,
        systemLoad: Math.round(systemLoad),
        errorRate: Math.round(errorRate * 10) / 10,
        lastUpdate: new Date()
      });

    } catch (error) {
      console.error('Erro ao carregar estat√≠sticas:', error);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {[...Array(6)].map((_, i) => (
          <Card key={i}>
            <CardContent className="p-6">
              <div className="animate-pulse space-y-2">
                <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                <div className="h-8 bg-gray-200 rounded w-1/2"></div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Indicador de √∫ltima atualiza√ß√£o */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span className="text-sm text-muted-foreground">
            √öltima atualiza√ß√£o: {stats.lastUpdate.toLocaleTimeString()}
          </span>
        </div>
        <Badge variant="outline" className="animate-pulse">
          <Activity className="h-3 w-3 mr-1" />
          Tempo Real
        </Badge>
      </div>

      {/* M√©tricas em tempo real */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Users className="h-4 w-4" />
              Conversas Ativas
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">
              {stats.activeConversations}
            </div>
            <p className="text-sm text-muted-foreground">
              conversas em andamento
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <MessageSquare className="h-4 w-4" />
              Mensagens/Hora
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {stats.messagesLastHour}
            </div>
            <p className="text-sm text-muted-foreground">
              √∫ltima hora
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Clock className="h-4 w-4" />
              Tempo Resposta
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats.avgResponseTime}s
            </div>
            <p className="text-sm text-muted-foreground">
              tempo m√©dio
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Zap className="h-4 w-4" />
              Carga do Sistema
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="text-2xl font-bold">
                {stats.systemLoad}%
              </div>
              <Progress value={stats.systemLoad} className="h-2" />
              <p className="text-sm text-muted-foreground">
                utiliza√ß√£o atual
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              Taxa de Erro
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">
              {stats.errorRate}%
            </div>
            <p className="text-sm text-muted-foreground">
              √∫ltimas 24h
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium flex items-center gap-2">
              <Activity className="h-4 w-4" />
              Status Geral
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <div className={`w-3 h-3 rounded-full ${
                stats.systemLoad < 80 && stats.errorRate < 3 
                  ? 'bg-green-500' 
                  : stats.systemLoad < 90 && stats.errorRate < 5
                  ? 'bg-yellow-500'
                  : 'bg-red-500'
              }`} />
              <span className="text-sm font-medium">
                {stats.systemLoad < 80 && stats.errorRate < 3 
                  ? 'Excelente' 
                  : stats.systemLoad < 90 && stats.errorRate < 5
                  ? 'Bom'
                  : 'Aten√ß√£o'
                }
              </span>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Alertas */}
      {(stats.systemLoad > 90 || stats.errorRate > 5) && (
        <Card className="border-yellow-200 bg-yellow-50">
          <CardHeader>
            <CardTitle className="text-yellow-800 flex items-center gap-2">
              <AlertCircle className="h-5 w-5" />
              Alertas do Sistema
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {stats.systemLoad > 90 && (
                <div className="flex items-center gap-2">
                  <Badge variant="destructive">Alta Carga</Badge>
                  <span className="text-sm">
                    Sistema com alta utiliza√ß√£o ({stats.systemLoad}%)
                  </span>
                </div>
              )}
              {stats.errorRate > 5 && (
                <div className="flex items-center gap-2">
                  <Badge variant="destructive">Taxa de Erro Alta</Badge>
                  <span className="text-sm">
                    Taxa de erro acima do normal ({stats.errorRate}%)
                  </span>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/evolution/AIAgentConfig.tsx
================================================================================\n

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Bot, Settings, Plus, Edit, Trash2 } from "lucide-react";
import AIAgentSetup from "./AIAgentSetup";
import { useState } from "react";

interface AIAgentConfigProps {
  isOpen: boolean;
  onClose: () => void;
  evolutionConfigId: string;
  instanceName: string;
  aiAgents: any[];
}

export default function AIAgentConfig({ 
  isOpen, 
  onClose, 
  evolutionConfigId, 
  instanceName,
  aiAgents 
}: AIAgentConfigProps) {
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingAgent, setEditingAgent] = useState<any>(null);

  const handleCreateAgent = async (agentData: any) => {
    console.log('Creating agent:', agentData);
    setShowCreateForm(false);
  };

  const handleUpdateAgent = async (agentId: string, updates: any) => {
    console.log('Updating agent:', agentId, updates);
    setEditingAgent(null);
  };

  const handleEditAgent = (agent: any) => {
    setEditingAgent(agent);
    setShowCreateForm(true);
  };

  const activeAgents = aiAgents.filter(agent => agent.is_active);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Bot className="h-5 w-5" />
            Agentes IA - {instanceName}
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Estat√≠sticas */}
          <div className="grid grid-cols-2 gap-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm">Total de Agentes</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{aiAgents.length}</div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm">Agentes Ativos</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-600">{activeAgents.length}</div>
              </CardContent>
            </Card>
          </div>

          {/* Bot√£o para criar novo agente */}
          <div className="flex justify-end">
            <Button onClick={() => setShowCreateForm(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Novo Agente IA
            </Button>
          </div>

          {/* Formul√°rio de cria√ß√£o/edi√ß√£o */}
          {showCreateForm && (
            <AIAgentSetup
              evolutionConfigId={evolutionConfigId}
              onCreateAgent={handleCreateAgent}
              onUpdateAgent={handleUpdateAgent}
              existingAgent={editingAgent}
              agents={aiAgents}
            />
          )}

          {/* Lista de agentes existentes */}
          {aiAgents.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold">Agentes Configurados</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {aiAgents.map((agent) => (
                  <Card key={agent.id}>
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-base">{agent.agent_id}</CardTitle>
                        <Badge variant={agent.is_active ? "default" : "secondary"}>
                          {agent.is_active ? "Ativo" : "Inativo"}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2 text-sm text-muted-foreground">
                        <p>üì± {agent.phone_number}</p>
                        <p>ü§ñ {agent.model}</p>
                        <p>‚è±Ô∏è Delay: {agent.response_delay_seconds}s</p>
                        {agent.system_prompt && (
                          <p className="truncate">üí¨ {agent.system_prompt.substring(0, 50)}...</p>
                        )}
                      </div>
                      <div className="flex gap-2 mt-4">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEditAgent(agent)}
                        >
                          <Edit className="h-3 w-3 mr-1" />
                          Editar
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/toaster.tsx
================================================================================\n
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================================================
ARQUIVO: ./src/components/ui/checkbox.tsx
================================================================================\n

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



================================================================================
ARQUIVO: ./src/components/ui/alert.tsx
================================================================================\n

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================================================
ARQUIVO: ./src/components/ui/alert-dialog.tsx
================================================================================\n
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================================================
ARQUIVO: ./src/components/ui/tabs.tsx
================================================================================\n
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================================================
ARQUIVO: ./src/components/ui/breadcrumb.tsx
================================================================================\n
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



================================================================================
ARQUIVO: ./src/components/ui/navigation-menu.tsx
================================================================================\n
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}



================================================================================
ARQUIVO: ./src/components/ui/card.tsx
================================================================================\n
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================================================
ARQUIVO: ./src/components/ui/theme-toggle.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Moon, Sun } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useLocalStorage } from "@/hooks/use-local-storage";

export function ThemeToggle() {
  const [theme, setTheme] = useLocalStorage<"light" | "dark">("theme", "light");
  const [mounted, setMounted] = useState(false);
  
  // Only run client-side
  useEffect(() => {
    setMounted(true);
  }, []);
  
  // Apply theme on mount and when it changes
  useEffect(() => {
    if (!mounted) return;
    
    // Check for system preference on first mount
    if (!theme) {
      const systemPrefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      setTheme(systemPrefersDark ? "dark" : "light");
      return;
    }
    
    // Apply theme
    applyTheme(theme);
  }, [theme, mounted]);
  
  const applyTheme = (newTheme: "light" | "dark") => {
    if (newTheme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  };
  
  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light");
  };
  
  // Avoid hydration mismatch by only rendering after mount
  if (!mounted) return null;
  
  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={toggleTheme}
      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
    >
      {theme === "light" ? (
        <Moon className="h-5 w-5" />
      ) : (
        <Sun className="h-5 w-5" />
      )}
    </Button>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/progress.tsx
================================================================================\n
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



================================================================================
ARQUIVO: ./src/components/ui/command.tsx
================================================================================\n
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================================================
ARQUIVO: ./src/components/ui/dashboard-stat-card.tsx
================================================================================\n

import { ReactNode } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { LineChart, Line, ResponsiveContainer } from "recharts";

interface DashboardStatCardProps {
  title: string;
  value: string | number;
  change?: {
    value: number;
    positive: boolean;
    label: string;
  };
  chartData: { [key: string]: any }[];
  chartColor?: string;
  className?: string;
}

export function DashboardStatCard({ 
  title, 
  value, 
  change, 
  chartData, 
  chartColor = "hsl(var(--primary))", 
  className 
}: DashboardStatCardProps) {
  return (
    <Card className={cn("overflow-hidden", className)}>
      <CardContent className="p-6">
        <div className="flex flex-col space-y-3">
          <p className="text-sm font-medium text-muted-foreground">{title}</p>
          
          <div className="flex items-baseline justify-between">
            <h2 className="text-3xl font-bold tracking-tight">{value}</h2>
            
            {change && (
              <div 
                className={cn(
                  "text-xs font-medium",
                  change.positive ? "text-emerald-500" : "text-rose-500"
                )}
              >
                <span className="mr-1">{change.positive ? "‚Üë" : "‚Üì"}</span>
                {change.value}%
              </div>
            )}
          </div>
          
          {change && (
            <p className="text-xs text-muted-foreground">
              {change.label}
            </p>
          )}
          
          <div className="h-[60px] mt-4">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={chartData}>
                <defs>
                  <linearGradient id="colorValue" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor={chartColor} stopOpacity={0.8}/>
                    <stop offset="95%" stopColor={chartColor} stopOpacity={0.1}/>
                  </linearGradient>
                </defs>
                <Line 
                  type="monotone" 
                  dataKey="value" 
                  stroke={chartColor}
                  strokeWidth={2}
                  dot={false}
                  activeDot={false}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/dashboard-section.tsx
================================================================================\n

import { ReactNode } from "react";
import { cn } from "@/lib/utils";

interface DashboardSectionProps {
  title: string;
  description?: string;
  children: ReactNode;
  className?: string;
  headerAction?: ReactNode;
}

export function DashboardSection({ 
  title, 
  description, 
  children, 
  className,
  headerAction 
}: DashboardSectionProps) {
  return (
    <section className={cn(
      "space-y-4 animate-fade-in",
      className
    )}>
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h2 className="text-xl font-semibold tracking-tight text-foreground">
            {title}
          </h2>
          {description && (
            <p className="text-sm text-muted-foreground">
              {description}
            </p>
          )}
        </div>
        {headerAction && (
          <div className="flex-shrink-0">
            {headerAction}
          </div>
        )}
      </div>
      <div className="animate-slide-in-right">
        {children}
      </div>
    </section>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/enhanced-skeleton.tsx
================================================================================\n

import { cn } from "@/lib/utils";

interface EnhancedSkeletonProps {
  className?: string;
  variant?: "default" | "card" | "text" | "circle";
}

export function EnhancedSkeleton({ 
  className, 
  variant = "default" 
}: EnhancedSkeletonProps) {
  const variants = {
    default: "h-4 w-full",
    card: "h-32 w-full",
    text: "h-4 w-3/4",
    circle: "h-12 w-12 rounded-full"
  };

  return (
    <div
      className={cn(
        "animate-pulse rounded-lg",
        "bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700",
        "bg-[length:200%_100%]",
        "animate-[shimmer_2s_ease-in-out_infinite]",
        variants[variant],
        className
      )}
    />
  );
}

export function StatCardSkeleton() {
  return (
    <div className="p-6 rounded-xl border bg-card space-y-4 animate-pulse">
      <div className="flex items-center justify-between">
        <div className="space-y-2 flex-1">
          <EnhancedSkeleton variant="text" className="w-24 h-3" />
        </div>
        <EnhancedSkeleton variant="circle" className="h-10 w-10" />
      </div>
      <div className="space-y-3">
        <EnhancedSkeleton className="h-8 w-20" />
        <div className="flex items-center gap-2">
          <EnhancedSkeleton className="h-6 w-12 rounded-full" />
          <EnhancedSkeleton className="h-3 w-16" />
        </div>
      </div>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/sidebar.tsx
================================================================================\n
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



================================================================================
ARQUIVO: ./src/components/ui/toast.tsx
================================================================================\n
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================================================
ARQUIVO: ./src/components/ui/dropdown-menu.tsx
================================================================================\n
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



================================================================================
ARQUIVO: ./src/components/ui/chart.tsx
================================================================================\n
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================================================
ARQUIVO: ./src/components/ui/tooltip.tsx
================================================================================\n
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



================================================================================
ARQUIVO: ./src/components/ui/slider.tsx
================================================================================\n
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



================================================================================
ARQUIVO: ./src/components/ui/collapsible.tsx
================================================================================\n
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



================================================================================
ARQUIVO: ./src/components/ui/popover.tsx
================================================================================\n
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



================================================================================
ARQUIVO: ./src/components/ui/toggle.tsx
================================================================================\n
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



================================================================================
ARQUIVO: ./src/components/ui/resizable.tsx
================================================================================\n
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



================================================================================
ARQUIVO: ./src/components/ui/avatar.tsx
================================================================================\n
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



================================================================================
ARQUIVO: ./src/components/ui/menubar.tsx
================================================================================\n
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



================================================================================
ARQUIVO: ./src/components/ui/pagination.tsx
================================================================================\n
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}



================================================================================
ARQUIVO: ./src/components/ui/textarea.tsx
================================================================================\n

import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }



================================================================================
ARQUIVO: ./src/components/ui/status-indicator.tsx
================================================================================\n

import { cn } from "@/lib/utils";

interface StatusIndicatorProps {
  status: "online" | "offline" | "loading" | "error";
  label?: string;
  className?: string;
}

export function StatusIndicator({ status, label, className }: StatusIndicatorProps) {
  const statusConfig = {
    online: {
      color: "bg-green-500",
      label: label || "Online"
    },
    offline: {
      color: "bg-gray-400",
      label: label || "Offline"
    },
    loading: {
      color: "bg-yellow-500 animate-pulse",
      label: label || "Carregando"
    },
    error: {
      color: "bg-red-500",
      label: label || "Erro"
    }
  };

  const config = statusConfig[status];

  return (
    <div className={cn("flex items-center gap-2", className)}>
      <div className={cn("w-2 h-2 rounded-full", config.color)} />
      {label !== undefined && (
        <span className="text-sm text-muted-foreground">{config.label}</span>
      )}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/separator.tsx
================================================================================\n
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



================================================================================
ARQUIVO: ./src/components/ui/context-menu.tsx
================================================================================\n
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



================================================================================
ARQUIVO: ./src/components/ui/form.tsx
================================================================================\n
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================================================
ARQUIVO: ./src/components/ui/badge.tsx
================================================================================\n

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================================================
ARQUIVO: ./src/components/ui/select.tsx
================================================================================\n
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================================================
ARQUIVO: ./src/components/ui/accordion.tsx
================================================================================\n
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



================================================================================
ARQUIVO: ./src/components/ui/input.tsx
================================================================================\n
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================================================
ARQUIVO: ./src/components/ui/scroll-area.tsx
================================================================================\n
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================================================
ARQUIVO: ./src/components/ui/enhanced-stat-card.tsx
================================================================================\n
import { ReactNode, memo } from "react";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface EnhancedStatCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon?: ReactNode;
  trend?: {
    value: number;
    positive: boolean;
  };
  className?: string;
  variant?: "default" | "success" | "warning" | "danger";
}

export const EnhancedStatCard = memo(function EnhancedStatCard({ 
  title, 
  value, 
  description, 
  icon, 
  trend, 
  className,
  variant = "default"
}: EnhancedStatCardProps) {
  const variantStyles = {
    default: "border-border bg-gray-100/60 hover:bg-gray-100/80 dark:bg-gray-800/30 dark:hover:bg-gray-800/40 backdrop-blur-sm",
    success: "border-green-200 bg-green-50/80 hover:bg-green-50 dark:border-green-800 dark:bg-green-950/80 dark:hover:bg-green-950/90",
    warning: "border-yellow-200 bg-yellow-50/80 hover:bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-950/80 dark:hover:bg-yellow-950/90",
    danger: "border-red-200 bg-red-50/80 hover:bg-red-50 dark:border-red-800 dark:bg-red-950/80 dark:hover:bg-red-950/90"
  };

  const iconVariantStyles = {
    default: "bg-blue-100 text-blue-600 dark:bg-blue-900/50 dark:text-blue-400",
    success: "bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-400",
    warning: "bg-yellow-100 text-yellow-600 dark:bg-yellow-900 dark:text-yellow-400",
    danger: "bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-400"
  };

  return (
    <Card className={cn(
      "group transition-all duration-300 ease-out hover:shadow-lg hover:shadow-black/5 hover:-translate-y-0.5 active:scale-[0.98]",
      variantStyles[variant],
      className
    )}>
      <CardHeader className="flex flex-row items-center justify-between pb-3 space-y-0">
        <div className="space-y-1 min-w-0 flex-1">
          <p className="text-sm font-medium text-muted-foreground leading-none truncate">
            {title}
          </p>
        </div>
        {icon && (
          <div className={cn(
            "p-2.5 rounded-xl transition-transform duration-300 group-hover:scale-110 flex-shrink-0",
            iconVariantStyles[variant]
          )}>
            {icon}
          </div>
        )}
      </CardHeader>
      <CardContent className="pt-0">
        <div className="space-y-3">
          <div className="text-2xl font-bold tracking-tight transition-colors duration-200">
            {value}
          </div>
          
          <div className="flex items-center gap-2 text-xs min-h-[20px]">
            {trend && (
              <span
                className={cn(
                  "inline-flex items-center gap-1 font-medium px-2.5 py-1 rounded-full transition-all duration-200 hover:scale-105",
                  trend.positive 
                    ? "text-green-700 bg-green-100 hover:bg-green-200 dark:text-green-400 dark:bg-green-900/50 dark:hover:bg-green-900/70" 
                    : "text-red-700 bg-red-100 hover:bg-red-200 dark:text-red-400 dark:bg-red-900/50 dark:hover:bg-red-900/70"
                )}
              >
                <span className="text-xs font-semibold">
                  {trend.positive ? "‚Üó" : "‚Üò"}
                </span>
                {Math.abs(trend.value)}%
              </span>
            )}
            {description && (
              <span className="text-muted-foreground font-medium">
                {description}
              </span>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
});



================================================================================
ARQUIVO: ./src/components/ui/dialog.tsx
================================================================================\n

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg max-h-[90vh] overflow-y-auto",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================================================
ARQUIVO: ./src/components/ui/switch.tsx
================================================================================\n
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================================================
ARQUIVO: ./src/components/ui/skeleton.tsx
================================================================================\n

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn(
        "animate-pulse rounded-lg bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700 bg-[length:200%_100%] animate-[shimmer_2s_infinite]", 
        className
      )}
      {...props}
    />
  )
}

export { Skeleton }



================================================================================
ARQUIVO: ./src/components/ui/stat-card.tsx
================================================================================\n

import { ReactNode } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";

interface StatCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon?: ReactNode;
  trend?: {
    value: number;
    positive: boolean;
  };
  className?: string;
}

export function StatCard({ title, value, description, icon, trend, className }: StatCardProps) {
  return (
    <Card className={cn("overflow-hidden", className)}>
      <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        {icon && <div className="text-primary">{icon}</div>}
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        {(description || trend) && (
          <div className="flex items-center text-xs mt-1">
            {trend && (
              <span
                className={cn(
                  "inline-flex items-center mr-1 font-medium",
                  trend.positive ? "text-emerald-500" : "text-rose-500"
                )}
              >
                {trend.positive ? "‚Üë" : "‚Üì"} {Math.abs(trend.value)}%
              </span>
            )}
            {description && (
              <span className="text-muted-foreground">{description}</span>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/ui/button.tsx
================================================================================\n
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================================================
ARQUIVO: ./src/components/ui/aspect-ratio.tsx
================================================================================\n

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



================================================================================
ARQUIVO: ./src/components/ui/use-toast.ts
================================================================================\n
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };



================================================================================
ARQUIVO: ./src/components/ui/drawer.tsx
================================================================================\n
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================================================
ARQUIVO: ./src/components/ui/calendar.tsx
================================================================================\n
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================================================
ARQUIVO: ./src/components/ui/input-otp.tsx
================================================================================\n
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



================================================================================
ARQUIVO: ./src/components/ui/table.tsx
================================================================================\n
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================================================
ARQUIVO: ./src/components/ui/toggle-group.tsx
================================================================================\n
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }



================================================================================
ARQUIVO: ./src/components/ui/sonner.tsx
================================================================================\n
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }



================================================================================
ARQUIVO: ./src/components/ui/carousel.tsx
================================================================================\n
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



================================================================================
ARQUIVO: ./src/components/ui/sheet.tsx
================================================================================\n
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}




================================================================================
ARQUIVO: ./src/components/ui/radio-group.tsx
================================================================================\n
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================================================
ARQUIVO: ./src/components/ui/label.tsx
================================================================================\n
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================================================
ARQUIVO: ./src/components/ui/hover-card.tsx
================================================================================\n
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================================================
ARQUIVO: ./src/components/analytics/BillingChart.tsx
================================================================================\n
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { useIsMobile } from "@/hooks/use-mobile";
import { UserRole } from "@/types";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";

// Mock data for billing charts
const MOCK_BILLING_DATA = {
  "7days": [{
    period: "Seg",
    revenue: 1250.50
  }, {
    period: "Ter",
    revenue: 1876.25
  }, {
    period: "Qua",
    revenue: 2145.75
  }, {
    period: "Qui",
    revenue: 1987.30
  }, {
    period: "Sex",
    revenue: 2234.80
  }, {
    period: "S√°b",
    revenue: 1456.90
  }, {
    period: "Dom",
    revenue: 1123.45
  }],
  "30days": [{
    period: "Sem 1",
    revenue: 8750.30
  }, {
    period: "Sem 2",
    revenue: 12340.75
  }, {
    period: "Sem 3",
    revenue: 15670.20
  }, {
    period: "Sem 4",
    revenue: 18945.50
  }],
  "90days": [{
    period: "M√™s 1",
    revenue: 45600.75
  }, {
    period: "M√™s 2",
    revenue: 52340.20
  }, {
    period: "M√™s 3",
    revenue: 48970.35
  }],
  "12months": [{
    period: "Jan",
    revenue: 35200.50
  }, {
    period: "Fev",
    revenue: 42300.75
  }, {
    period: "Mar",
    revenue: 48970.35
  }, {
    period: "Abr",
    revenue: 45600.75
  }, {
    period: "Mai",
    revenue: 52340.20
  }, {
    period: "Jun",
    revenue: 49850.60
  }, {
    period: "Jul",
    revenue: 55670.40
  }, {
    period: "Ago",
    revenue: 58920.15
  }, {
    period: "Set",
    revenue: 62145.80
  }, {
    period: "Out",
    revenue: 59340.25
  }, {
    period: "Nov",
    revenue: 61875.90
  }, {
    period: "Dez",
    revenue: 64320.50
  }]
};
const FRANCHISEE_BILLING_DATA = {
  "7days": [{
    period: "Seg",
    revenue: 156.30
  }, {
    period: "Ter",
    revenue: 234.50
  }, {
    period: "Qua",
    revenue: 287.75
  }, {
    period: "Qui",
    revenue: 198.40
  }, {
    period: "Sex",
    revenue: 345.20
  }, {
    period: "S√°b",
    revenue: 189.60
  }, {
    period: "Dom",
    revenue: 123.80
  }],
  "30days": [{
    period: "Sem 1",
    revenue: 1250.30
  }, {
    period: "Sem 2",
    revenue: 1540.75
  }, {
    period: "Sem 3",
    revenue: 1870.20
  }, {
    period: "Sem 4",
    revenue: 2145.50
  }],
  "90days": [{
    period: "M√™s 1",
    revenue: 4800.50
  }, {
    period: "M√™s 2",
    revenue: 5234.20
  }, {
    period: "M√™s 3",
    revenue: 4970.35
  }],
  "12months": [{
    period: "Jan",
    revenue: 3520.50
  }, {
    period: "Fev",
    revenue: 4230.75
  }, {
    period: "Mar",
    revenue: 4897.35
  }, {
    period: "Abr",
    revenue: 4560.75
  }, {
    period: "Mai",
    revenue: 5234.20
  }, {
    period: "Jun",
    revenue: 4985.60
  }, {
    period: "Jul",
    revenue: 5567.40
  }, {
    period: "Ago",
    revenue: 5892.15
  }, {
    period: "Set",
    revenue: 6214.80
  }, {
    period: "Out",
    revenue: 5934.25
  }, {
    period: "Nov",
    revenue: 6187.90
  }, {
    period: "Dez",
    revenue: 6432.50
  }]
};
interface BillingChartProps {
  userRole: UserRole;
}
export function BillingChart({
  userRole
}: BillingChartProps) {
  const [selectedPeriod, setSelectedPeriod] = useState<string>("30days");
  const [customStartDate, setCustomStartDate] = useState<Date>();
  const [customEndDate, setCustomEndDate] = useState<Date>();
  const [isCustomPeriod, setIsCustomPeriod] = useState(false);
  const isMobile = useIsMobile();
  const isAdmin = userRole === "admin";
  const currentData = isAdmin ? MOCK_BILLING_DATA : FRANCHISEE_BILLING_DATA;
  const chartData = currentData[selectedPeriod as keyof typeof currentData] || currentData["30days"];
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
      minimumFractionDigits: 2
    }).format(value);
  };
  const periodOptions = [{
    value: "7days",
    label: "√öltimos 7 dias"
  }, {
    value: "30days",
    label: "√öltimo m√™s"
  }, {
    value: "90days",
    label: "√öltimos 3 meses"
  }, {
    value: "12months",
    label: "√öltimo ano"
  }, {
    value: "custom",
    label: "Per√≠odo personalizado"
  }];
  const handlePeriodChange = (value: string) => {
    setSelectedPeriod(value);
    setIsCustomPeriod(value === "custom");
  };
  return <Card className="lg:col-span-2">
      <CardHeader className="pb-3">
        <div className="flex flex-col items-center gap-4">
          <CardTitle className="font-medium text-lg text-center">
            Gr√°fico de Faturamento
          </CardTitle>
          <div className="flex flex-col sm:flex-row gap-2 items-center justify-center">
            <Select value={selectedPeriod} onValueChange={handlePeriodChange}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Selecionar per√≠odo" />
              </SelectTrigger>
              <SelectContent>
                {periodOptions.map(option => <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>)}
              </SelectContent>
            </Select>
            
            {isCustomPeriod && <div className="flex gap-2">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className={cn("w-[140px] justify-start text-left font-normal", !customStartDate && "text-muted-foreground")}>
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {customStartDate ? format(customStartDate, "dd/MM/yyyy") : "Data in√≠cio"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar mode="single" selected={customStartDate} onSelect={setCustomStartDate} initialFocus className={cn("p-3 pointer-events-auto")} />
                  </PopoverContent>
                </Popover>

                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" className={cn("w-[140px] justify-start text-left font-normal", !customEndDate && "text-muted-foreground")}>
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {customEndDate ? format(customEndDate, "dd/MM/yyyy") : "Data fim"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar mode="single" selected={customEndDate} onSelect={setCustomEndDate} initialFocus className={cn("p-3 pointer-events-auto")} />
                  </PopoverContent>
                </Popover>
              </div>}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="h-[300px] overflow-hidden">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={chartData} margin={{
            top: 20,
            right: 20,
            left: isMobile ? 0 : 20,
            bottom: 20
          }}>
              <defs>
                <linearGradient id="colorRevenue" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#0284c7" stopOpacity={0.8} />
                  <stop offset="95%" stopColor="#0284c7" stopOpacity={0.1} />
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
              <XAxis dataKey="period" tick={{
              fontSize: 12
            }} tickLine={false} axisLine={{
              stroke: 'rgba(255,255,255,0.2)'
            }} />
              <YAxis width={isMobile ? 50 : 70} tickFormatter={value => `R$ ${(value / 1000).toFixed(0)}k`} tick={{
              fontSize: 12
            }} tickLine={false} axisLine={{
              stroke: 'rgba(255,255,255,0.2)'
            }} />
              <Tooltip contentStyle={{
              backgroundColor: 'rgba(15, 23, 42, 0.9)',
              border: '1px solid rgba(255,255,255,0.2)',
              borderRadius: '8px',
              boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
            }} itemStyle={{
              color: '#fff'
            }} formatter={(value: number) => [formatCurrency(value), 'Faturamento']} labelFormatter={label => `${label}`} />
              <Area type="monotone" dataKey="revenue" stroke="#0284c7" strokeWidth={2} fillOpacity={1} fill="url(#colorRevenue)" />
            </AreaChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>;
}



================================================================================
ARQUIVO: ./src/components/analytics/RevenueChart.tsx
================================================================================\n

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";
import { ChartContainer } from "@/components/ui/chart";
import { useIsMobile } from "@/hooks/use-mobile";

interface RevenueChartProps {
  data: Array<{
    month: string;
    value: number;
  }>;
}

export function RevenueChart({ data }: RevenueChartProps) {
  const isMobile = useIsMobile();
  
  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle>Faturamento</CardTitle>
        <CardDescription>
          Total faturado por m√™s (R$)
        </CardDescription>
      </CardHeader>
      <CardContent className="pt-2">
        <div className="h-[300px]">
          <ChartContainer 
            config={{
              revenue: {
                color: "hsl(var(--chart-green))"
              }
            }}
          >
            <ResponsiveContainer width="100%" height="100%">
              <LineChart 
                data={data} 
                margin={{
                  top: 20,
                  right: 10,
                  left: isMobile ? 10 : 20,
                  bottom: 20
                }}
              >
                <XAxis 
                  dataKey="month" 
                  tick={{
                    fontSize: 12
                  }} 
                  tickLine={false} 
                  axisLine={false}
                  height={30}
                />
                <YAxis 
                  hide={isMobile} 
                  tickLine={false} 
                  axisLine={false}
                  width={30}
                />
                <Tooltip 
                  cursor={false} 
                  content={({ active, payload }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="rounded-lg border bg-background p-2 shadow-md">
                          <p className="text-xs font-semibold">{`${payload[0].payload.month}`}</p>
                          <p className="text-sm">{`R$ ${payload[0].value.toLocaleString()}`}</p>
                        </div>
                      );
                    }
                    return null;
                  }}
                  wrapperStyle={{ zIndex: 100 }}
                />
                <Line 
                  type="monotone" 
                  dataKey="value" 
                  stroke="#10B981" 
                  strokeWidth={3} 
                  dot={{
                    r: 4,
                    strokeWidth: 2,
                    fill: "#fff"
                  }} 
                  activeDot={{
                    r: 6,
                    strokeWidth: 2
                  }} 
                />
              </LineChart>
            </ResponsiveContainer>
          </ChartContainer>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/analytics/FranchiseeTable.tsx
================================================================================\n
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Bot } from "lucide-react";
interface Franchisee {
  name: string;
  agents: number;
  revenue: string;
}
interface FranchiseeTableProps {
  franchisees: Franchisee[];
}
export function FranchiseeTable({
  franchisees
}: FranchiseeTableProps) {
  return <Card>
      <CardHeader className="pb-3">
        <CardTitle className="text-lg font-medium text-center">Dados dos Franqueados</CardTitle>
        <CardDescription className="text-center">Faturamento por franqueado:</CardDescription>
      </CardHeader>
      <CardContent>
        {/* Desktop Table */}
        <div className="hidden md:block">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Franqueado</TableHead>
                <TableHead className="text-center">N¬∫ Agentes</TableHead>
                <TableHead className="text-right">Faturamento</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {franchisees.map((franchisee, index) => <TableRow key={index}>
                  <TableCell className="font-medium">{franchisee.name}</TableCell>
                  <TableCell className="text-center">{franchisee.agents}</TableCell>
                  <TableCell className="text-right font-medium">{franchisee.revenue}</TableCell>
                </TableRow>)}
            </TableBody>
          </Table>
        </div>

        {/* Mobile Cards */}
        <div className="md:hidden space-y-3">
          {franchisees.map((franchisee, index) => <div key={index} className="flex items-center p-4 rounded-lg border bg-gray-50 dark:bg-gray-800">
              <div className="mr-3 h-10 w-10 rounded-full bg-sky-600/10 flex items-center justify-center">
                <Bot size={20} className="text-sky-600" />
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium truncate">{franchisee.name}</p>
                <div className="flex items-center justify-between mt-1">
                  <span className="text-xs text-muted-foreground">
                    {franchisee.agents} agentes
                  </span>
                  <span className="text-sm font-medium text-green-600">
                    {franchisee.revenue}
                  </span>
                </div>
              </div>
            </div>)}
        </div>
      </CardContent>
    </Card>;
}


================================================================================
ARQUIVO: ./src/components/analytics/MessageVolumeChart.tsx
================================================================================\n

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";
import { ChartContainer } from "@/components/ui/chart";
import { useIsMobile } from "@/hooks/use-mobile";

interface MessageVolumeChartProps {
  data: Array<{
    day: string;
    value: number;
  }>;
}

export function MessageVolumeChart({ data }: MessageVolumeChartProps) {
  const isMobile = useIsMobile();
  
  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle>Volume de Mensagens</CardTitle>
        <CardDescription>
          Total de mensagens trocadas por dia
        </CardDescription>
      </CardHeader>
      <CardContent className="pt-2">
        <div className="h-[300px]">
          <ChartContainer 
            config={{
              messages: {
                color: "hsl(var(--chart-blue))"
              }
            }}
          >
            <ResponsiveContainer width="100%" height="100%">
              <BarChart 
                data={data} 
                margin={{
                  top: 20,
                  right: 10,
                  left: isMobile ? 10 : 20,
                  bottom: 20
                }}
              >
                <XAxis 
                  dataKey="day" 
                  tick={{
                    fontSize: 12
                  }} 
                  tickLine={false} 
                  axisLine={false}
                  height={30}
                />
                <YAxis 
                  hide={isMobile} 
                  tickLine={false} 
                  axisLine={false}
                  width={30}
                />
                <Tooltip 
                  cursor={{
                    fill: 'rgba(0, 0, 0, 0.1)'
                  }} 
                  content={({ active, payload }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="rounded-lg border bg-background p-2 shadow-md">
                          <p className="text-xs font-semibold">{`${payload[0].payload.day}`}</p>
                          <p className="text-sm">{`${payload[0].value.toLocaleString()} mensagens`}</p>
                        </div>
                      );
                    }
                    return null;
                  }} 
                  wrapperStyle={{ zIndex: 100 }}
                />
                <Bar 
                  dataKey="value" 
                  fill="currentColor" 
                  radius={[4, 4, 0, 0]} 
                  className="fill-[#0EA5E9] hover:fill-[#0284C7]" 
                  barSize={isMobile ? 25 : 40} 
                />
              </BarChart>
            </ResponsiveContainer>
          </ChartContainer>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/analytics/TopFranchiseesCard.tsx
================================================================================\n

import { Bot } from "lucide-react";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { useIsMobile } from "@/hooks/use-mobile";

export interface TopFranchisee {
  id: string;
  name: string;
  revenue: number;
  agentCount: number;
  isActive: boolean;
}

interface TopFranchiseesCardProps {
  franchisees: TopFranchisee[];
  className?: string;
}

export function TopFranchiseesCard({ franchisees, className }: TopFranchiseesCardProps) {
  const isMobile = useIsMobile();
  
  // Format currency values
  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
      minimumFractionDigits: 2
    }).format(value);
  };

  // Sort franchisees by revenue (highest to lowest)
  const sortedFranchisees = [...franchisees].sort((a, b) => b.revenue - a.revenue);
  
  return (
    <Card className={cn("h-fit", className)}>
      <CardHeader className="pb-3">
        <CardTitle className="text-lg font-medium text-center sm:text-left">
          Top Franqueados
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          {sortedFranchisees.length > 0 ? (
            sortedFranchisees.map(franchisee => (
              <div 
                key={franchisee.id} 
                className="flex items-center p-2 rounded-lg border bg-gray-50 dark:bg-gray-800"
              >
                <div className="mr-3 h-10 w-10 rounded-full bg-sky-600/10 flex items-center justify-center">
                  <Bot size={20} className="text-sky-600" />
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium truncate">{franchisee.name}</p>
                  <p className="text-xs text-muted-foreground">
                    {formatCurrency(franchisee.revenue)} ‚Ä¢ {franchisee.agentCount} agentes
                  </p>
                </div>
                <div className={cn(
                  "h-2.5 w-2.5 rounded-full", 
                  franchisee.isActive ? "bg-green-500" : "bg-gray-300"
                )}></div>
              </div>
            ))
          ) : (
            <div className="text-center py-8 text-muted-foreground h-full flex flex-col items-center justify-center">
              <Bot className="h-12 w-12 text-muted-foreground/50 mb-2" />
              <p>Nenhum franqueado cadastrado</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/analytics/ChannelDistributionChart.tsx
================================================================================\n

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ResponsiveContainer, PieChart, Pie, Tooltip, Cell } from "recharts";

interface ChannelDistributionProps {
  data: Array<{
    name: string;
    value: number;
    color: string;
  }>;
}

export function ChannelDistributionChart({ data }: ChannelDistributionProps) {
  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle>Distribui√ß√£o por Canal</CardTitle>
        <CardDescription>
          Porcentagem de uso por canal de comunica√ß√£o
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-center h-[300px]">
          <div className="w-full max-w-[300px]">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie 
                  data={data} 
                  cx="50%" 
                  cy="50%" 
                  labelLine={false} 
                  outerRadius={100} 
                  innerRadius={60} 
                  paddingAngle={3} 
                  dataKey="value" 
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                >
                  {data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip 
                  content={({ active, payload }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="rounded-lg border bg-background p-2 shadow-md">
                          <p 
                            className="text-xs font-semibold" 
                            style={{
                              color: payload[0].payload.color
                            }}
                          >
                            {payload[0].name}
                          </p>
                          <p className="text-sm">{`${payload[0].value}%`}</p>
                        </div>
                      );
                    }
                    return null;
                  }}
                  wrapperStyle={{ zIndex: 100 }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/analytics/MarketDistributionChart.tsx
================================================================================\n

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ResponsiveContainer, PieChart, Pie, Tooltip, Cell } from "recharts";
import { useIsMobile } from "@/hooks/use-mobile";

interface MarketDistributionProps {
  data: Array<{
    name: string;
    value: number;
    color: string;
  }>;
}

export function MarketDistributionChart({ data }: MarketDistributionProps) {
  const isMobile = useIsMobile();
  
  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle>Distribui√ß√£o de Mercado</CardTitle>
        <CardDescription>
          Segmenta√ß√£o por nicho de mercado
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex items-center justify-center h-[300px]">
          <div className="w-full max-w-[300px]">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie 
                  data={data} 
                  cx="50%" 
                  cy="50%" 
                  labelLine={false} 
                  outerRadius={100} 
                  innerRadius={60} 
                  paddingAngle={3} 
                  dataKey="value"
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                >
                  {data.map((entry, index) => (
                    <Cell 
                      key={`cell-${index}`} 
                      fill={entry.color} 
                    />
                  ))}
                </Pie>
                <Tooltip 
                  content={({ active, payload }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="rounded-lg border bg-background p-2 shadow-md">
                          <p 
                            className="text-xs font-semibold" 
                            style={{
                              color: payload[0].payload.color
                            }}
                          >
                            {payload[0].name}
                          </p>
                          <p className="text-sm">{`${payload[0].value}%`}</p>
                        </div>
                      );
                    }
                    return null;
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/dashboard/DashboardCharts.tsx
================================================================================\n

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { AspectRatio } from "@/components/ui/aspect-ratio";
import { BillingChart } from "@/components/analytics/BillingChart";
import { TopFranchiseesCard, TopFranchisee } from "@/components/analytics/TopFranchiseesCard";
import { AreaChart, Area, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { Bot } from "lucide-react";
import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Agent, UserRole } from "@/types";

interface DashboardChartsProps {
  userRole: UserRole;
  topAgents: Agent[];
  topFranchisees: TopFranchisee[];
  weeklyMessages: { day: string; count: number }[];
  isLoadingResults: boolean;
}

export function DashboardCharts({ userRole, topAgents, topFranchisees, weeklyMessages, isLoadingResults }: DashboardChartsProps) {
  const isMobile = useIsMobile();

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Billing Chart - only show for admin and franchisee */}
      {(userRole === "admin" || userRole === "franchisee") && (
        isLoadingResults ? (
          <Skeleton className="lg:col-span-2 h-80 rounded-lg" />
        ) : (
          <BillingChart userRole={userRole} />
        )
      )}
      
      {/* Customer still gets the original messages chart */}
      {userRole === "customer" && (
        <Card className="lg:col-span-2">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-medium">
              Mensagens Recentes
            </CardTitle>
          </CardHeader>
          <CardContent>
            {isLoadingResults ? (
              <Skeleton className="h-[300px] w-full" />
            ) : (
              <div className="h-[300px] overflow-hidden">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart
                    data={weeklyMessages}
                    margin={{ top: 20, right: 20, left: isMobile ? 0 : 20, bottom: 20 }}
                  >
                    <defs>
                      <linearGradient id="colorMessages" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#0EA5E9" stopOpacity={0.8}/>
                        <stop offset="95%" stopColor="#0EA5E9" stopOpacity={0.1}/>
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.1)" />
                    <XAxis 
                      dataKey="day" 
                      tick={{ fontSize: 12 }} 
                      tickLine={false} 
                      axisLine={{ stroke: 'rgba(255,255,255,0.2)' }}
                    />
                    <YAxis 
                      width={isMobile ? 30 : 40}
                      tickFormatter={(value) => value.toString()}
                      tick={{ fontSize: 12 }}
                      tickLine={false}
                      axisLine={{ stroke: 'rgba(255,255,255,0.2)' }}
                    />
                    <Tooltip
                      contentStyle={{ 
                        backgroundColor: 'rgba(15, 23, 42, 0.9)', 
                        border: '1px solid rgba(255,255,255,0.2)',
                        borderRadius: '8px',
                        boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)'
                      }}
                      itemStyle={{ color: '#fff' }}
                      formatter={(value) => [`${value} mensagens`, 'Quantidade']}
                      labelFormatter={(label) => `${label}`}
                    />
                    <Area 
                      type="monotone" 
                      dataKey="count" 
                      stroke="#0EA5E9" 
                      strokeWidth={2}
                      fillOpacity={1} 
                      fill="url(#colorMessages)" 
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            )}
          </CardContent>
        </Card>
      )}
      
      {/* Stats/Charts - Replaced with TopFranchiseesCard for admin */}
      {userRole === "admin" ? (
        isLoadingResults ? (
          <Skeleton className="lg:col-span-1 h-80 rounded-lg" />
        ) : (
          <TopFranchiseesCard franchisees={topFranchisees} className="lg:col-span-1" />
        )
      ) : userRole === "franchisee" ? (
        <Card className="h-fit">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-medium">
              Principais Agentes
            </CardTitle>
          </CardHeader>
          <CardContent>
            <AspectRatio ratio={isMobile ? 16 / 12 : 16 / 9} className="overflow-hidden">
              {isLoadingResults ? (
                <div className="space-y-3 h-full">
                  <Skeleton className="h-16" />
                  <Skeleton className="h-16" />
                  <Skeleton className="h-16" />
                </div>
              ) : (
                <div className="space-y-3 h-full">
                  {topAgents.map(agent => (
                    <div key={agent.id} className="flex items-center p-2 rounded-lg border bg-gray-50 dark:bg-gray-800">
                      <div className="mr-3 h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                        <Bot size={20} className="text-primary" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium truncate">{agent.name}</p>
                        <p className="text-xs text-muted-foreground">{agent.messageCount} mensagens</p>
                      </div>
                      <div className={cn("h-2.5 w-2.5 rounded-full", agent.isActive ? "bg-green-500" : "bg-gray-300")}></div>
                    </div>
                  ))}

                  {topAgents.length === 0 && (
                    <div className="text-center py-8 text-muted-foreground h-full flex flex-col items-center justify-center">
                      <Bot className="h-12 w-12 text-muted-foreground/50 mb-2" />
                      <p>Nenhum agente cadastrado</p>
                    </div>
                  )}
                </div>
              )}
            </AspectRatio>
          </CardContent>
        </Card>
      ) : (
        <Card className="h-fit">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-medium">
              An√°lise de Uso
            </CardTitle>
          </CardHeader>
          <CardContent>
            <AspectRatio ratio={isMobile ? 16 / 12 : 16 / 9} className="overflow-hidden">
              {isLoadingResults ? (
                <div className="space-y-4 h-full">
                  <Skeleton className="h-6" />
                  <Skeleton className="h-6" />
                  <Skeleton className="h-6" />
                  <Skeleton className="h-6" />
                  <Skeleton className="h-2.5" />
                  <Skeleton className="h-24" />
                </div>
              ) : (
                <div className="space-y-4 h-full">
                  <div className="flex justify-between items-center pb-2 border-b border-border/50">
                    <span className="text-sm">Conversas Hoje</span>
                    <span className="text-sm font-medium">24</span>
                  </div>
                  <div className="flex justify-between items-center pb-2 border-b border-border/50">
                    <span className="text-sm">Tempo M√©dio</span>
                    <span className="text-sm font-medium">2:45 min</span>
                  </div>
                  <div className="flex justify-between items-center pb-2 border-b border-border/50">
                    <span className="text-sm">Hor√°rio de Pico</span>
                    <span className="text-sm font-medium">14h - 16h</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm">Tokens Restantes</span>
                    <span className="text-sm font-medium">41%</span>
                  </div>
                  
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mt-2">
                    <div className="bg-primary h-2.5 rounded-full" style={{
                      width: '41%'
                    }}></div>
                  </div>
                  
                  <div className="mt-2 h-24">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={weeklyMessages}>
                        <Line 
                          type="monotone" 
                          dataKey="count" 
                          stroke="#0EA5E9" 
                          strokeWidth={2}
                          dot={false}
                        />
                        <Tooltip
                          contentStyle={{ 
                            backgroundColor: 'rgba(15, 23, 42, 0.9)', 
                            border: '1px solid rgba(255,255,255,0.2)',
                            borderRadius: '8px'
                          }}
                          itemStyle={{ color: '#fff' }}
                          formatter={(value) => [`${value} msgs`, '']}
                          labelFormatter={(label) => `${label}`}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}
            </AspectRatio>
          </CardContent>
        </Card>
      )}
    </div>
  );
}



================================================================================
ARQUIVO: ./src/components/dashboard/DashboardMainStats.tsx
================================================================================\n

import { MessageCircle, Bot, Clock, Zap } from "lucide-react";
import { Analytics } from "@/types";
import { EnhancedStatCard } from "@/components/ui/enhanced-stat-card";
import { StatCardSkeleton } from "@/components/ui/enhanced-skeleton";

interface DashboardMainStatsProps {
  analytics: Analytics;
  isLoadingResults: boolean;
}

export function DashboardMainStats({ analytics, isLoadingResults }: DashboardMainStatsProps) {
  return (
    <section className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      {isLoadingResults ? (
        <>
          <StatCardSkeleton />
          <StatCardSkeleton />
          <StatCardSkeleton />
          <StatCardSkeleton />
        </>
      ) : (
        <>
          <EnhancedStatCard 
            title="Total de Mensagens" 
            value={analytics.messageCount.toLocaleString()} 
            description="√öltimos 30 dias" 
            icon={<MessageCircle size={20} />} 
            trend={{
              value: 12,
              positive: true
            }}
            variant="default"
          />
          
          <EnhancedStatCard 
            title="Agentes Ativos" 
            value={`${analytics.activeAgents}/${analytics.totalAgents}`} 
            description="Agentes conectados" 
            icon={<Bot size={20} />}
            variant="default"
          />
          
          <EnhancedStatCard 
            title="Tempo de Resposta" 
            value={`${analytics.responseTime}s`} 
            description="M√©dia" 
            icon={<Clock size={20} />} 
            trend={{
              value: 5,
              positive: true
            }}
            variant="default"
          />
          
          <EnhancedStatCard 
            title="Tokens Usados" 
            value={analytics.tokensUsed.toLocaleString()} 
            description="√öltimos 30 dias" 
            icon={<Zap size={20} />}
            variant="default"
          />
        </>
      )}
    </section>
  );
}



================================================================================
ARQUIVO: ./src/components/dashboard/DashboardStats.tsx
================================================================================\n

import { Button } from "@/components/ui/button";
import { RefreshCw, CircleDollarSign, Building2, Users, Bot, UserCheck } from "lucide-react";
import { Analytics, UserRole } from "@/types";
import { cn } from "@/lib/utils";
import { EnhancedStatCard } from "@/components/ui/enhanced-stat-card";
import { StatCardSkeleton } from "@/components/ui/enhanced-skeleton";
import { DashboardSection } from "@/components/ui/dashboard-section";
import { memo, useMemo } from "react";

interface DashboardStatsProps {
  userRole: UserRole;
  analytics: Analytics;
  isLoadingResults: boolean;
  onRefresh: () => void;
}

export const DashboardStats = memo(function DashboardStats({
  userRole,
  analytics,
  isLoadingResults,
  onRefresh
}: DashboardStatsProps) {
  const refreshButton = useMemo(() => (
    <Button 
      onClick={onRefresh} 
      disabled={isLoadingResults} 
      variant="outline" 
      size="sm" 
      className="gap-2 hover:scale-105 transition-transform duration-200"
    >
      <RefreshCw className={cn("h-4 w-4", isLoadingResults && "animate-spin")} />
      Atualizar
    </Button>
  ), [onRefresh, isLoadingResults]);

  const formatCurrency = useMemo(() => (value: number) => 
    `R$ ${value?.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`, []);

  const renderLoadingSkeletons = (count: number) => (
    Array.from({ length: count }, (_, i) => <StatCardSkeleton key={i} />)
  );

  if (userRole === "admin") {
    return (
      <div className="space-y-3">
        <DashboardSection 
          title="Resultados" 
          headerAction={refreshButton}
        >
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            {isLoadingResults ? renderLoadingSkeletons(3) : (
              <>
                <EnhancedStatCard 
                  title="Faturamento Mensal" 
                  value={formatCurrency(analytics.monthlyRevenue)}
                  icon={<CircleDollarSign size={20} />} 
                  trend={{ value: 12, positive: true }}
                  variant="default"
                />
                
                <EnhancedStatCard 
                  title="Franqueados" 
                  value={analytics.franchiseeCount?.toString() || "0"} 
                  icon={<Building2 size={20} />}
                  variant="default"
                />
                
                <EnhancedStatCard 
                  title="Clientes" 
                  value={analytics.customerCount?.toString() || "0"} 
                  icon={<Users size={20} />}
                  variant="default"
                />
              </>
            )}
          </div>
        </DashboardSection>
      </div>
    );
  }

  if (userRole === "franchisee") {
    return (
      <div className="space-y-3">
        <DashboardSection 
          title="Resultado com agentes" 
          headerAction={refreshButton}
        >
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {isLoadingResults ? renderLoadingSkeletons(2) : (
              <>
                <EnhancedStatCard 
                  title="Instala√ß√£o" 
                  value={formatCurrency(analytics.installationRevenue)}
                  icon={<Bot size={20} />}
                  variant="default"
                />
                
                <EnhancedStatCard 
                  title="Faturamento Mensal" 
                  value={formatCurrency(analytics.monthlyRevenue)}
                  icon={<CircleDollarSign size={20} />} 
                  trend={{ value: 8, positive: true }}
                  variant="default"
                />
              </>
            )}
          </div>
        </DashboardSection>
        
        <DashboardSection title="Total Clientes">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            {isLoadingResults ? renderLoadingSkeletons(2) : (
              <>
                <EnhancedStatCard 
                  title="N¬∫ de Clientes" 
                  value={analytics.customerCount?.toString() || "0"} 
                  icon={<Users size={20} />}
                  variant="default"
                />
                
                <EnhancedStatCard 
                  title="Status" 
                  value={`${analytics.activeCustomers} ativos`} 
                  icon={<UserCheck size={20} />}
                  variant="default"
                />
              </>
            )}
          </div>
        </DashboardSection>
      </div>
    );
  }

  return null;
});



================================================================================
ARQUIVO: ./src/components/customers/CustomerCard.tsx
================================================================================\n

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Customer } from "@/types";
import { Bot, ExternalLink, Globe } from "lucide-react";
import { cn } from "@/lib/utils";

interface CustomerCardProps {
  customer: Customer;
  onView: (customer: Customer) => void;
  onManage: (customer: Customer) => void;
}

export default function CustomerCard({ customer, onView, onManage }: CustomerCardProps) {
  // Generate a random color for the customer avatar if no logo is provided
  const getInitials = () => {
    return customer.businessName.substring(0, 2).toUpperCase();
  };
  
  const getRandomColor = () => {
    const colors = [
      "bg-blue-100 text-blue-700",
      "bg-green-100 text-green-700",
      "bg-purple-100 text-purple-700",
      "bg-amber-100 text-amber-700",
      "bg-rose-100 text-rose-700",
      "bg-teal-100 text-teal-700",
    ];
    
    const index = customer.id.charCodeAt(0) % colors.length;
    return colors[index];
  };

  const formattedDate = new Date(customer.createdAt).toLocaleDateString("pt-BR");
  
  const customerPortalUrl = `https://cliente.plataforma.com/${customer.id}`;

  return (
    <Card className="overflow-hidden border border-gray-200 dark:border-gray-800">
      <CardHeader className="p-4 flex flex-row items-center justify-between">
        <div className="flex items-center space-x-3">
          {customer.logo ? (
            <div className="w-10 h-10 rounded-full overflow-hidden">
              <img src={customer.logo} alt={customer.businessName} className="w-full h-full object-cover" />
            </div>
          ) : (
            <div className={cn(
              "w-10 h-10 rounded-full flex items-center justify-center",
              getRandomColor()
            )}>
              {getInitials()}
            </div>
          )}
          <div>
            <CardTitle className="text-base font-medium">{customer.businessName}</CardTitle>
            <div className="text-xs text-muted-foreground">Desde {formattedDate}</div>
          </div>
        </div>
      </CardHeader>

      <CardContent className="p-4 space-y-4">
        <div className="flex items-center">
          <Bot className="mr-2 h-4 w-4 text-muted-foreground" />
          <span className="text-sm">
            <strong>{customer.agentCount}</strong> agentes ativos
          </span>
        </div>
        
        <div className="flex items-center text-sm text-primary">
          <Globe className="mr-2 h-4 w-4" />
          <a 
            href={customerPortalUrl} 
            target="_blank" 
            rel="noopener noreferrer"
            className="underline underline-offset-2"
          >
            Portal do Cliente
          </a>
        </div>

        <div className="flex space-x-2 pt-2">
          <Button variant="outline" size="sm" onClick={() => onView(customer)} className="flex-1">
            Visualizar
          </Button>
          <Button variant="default" size="sm" onClick={() => onManage(customer)} className="flex-1">
            Gerenciar
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}



================================================================================
ARQUIVO: ./src/components/customers/CreateCustomerModal.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Customer } from "@/types";
import { toast } from "sonner";

interface CreateCustomerModalProps {
  open: boolean;
  onClose: () => void;
  onSubmit: (customer: Partial<Customer>) => void;
  editing?: Customer;
}

export default function CreateCustomerModal({
  open,
  onClose,
  onSubmit,
  editing
}: CreateCustomerModalProps) {
  const [formData, setFormData] = useState<Partial<Customer>>(
    editing || {
      businessName: "",
      name: "",
      email: "",
      document: "",
      contactPhone: "",
    }
  );

  // Reset form when modal opens/closes or editing changes
  useEffect(() => {
    if (open) {
      if (editing) {
        setFormData({ ...editing });
      } else {
        setFormData({
          businessName: "",
          name: "",
          email: "",
          document: "",
          contactPhone: "",
        });
      }
    }
  }, [open, editing]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.businessName || !formData.name || !formData.email) {
      toast.error("Por favor, preencha todos os campos obrigat√≥rios");
      return;
    }
    
    onSubmit(formData);
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg max-w-[90vw]">
        <DialogHeader>
          <DialogTitle>{editing ? "Editar Cliente" : "Novo Cliente"}</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="businessName">Nome da Empresa</Label>
            <Input
              id="businessName"
              name="businessName"
              value={formData.businessName}
              onChange={handleChange}
              placeholder="Nome da empresa cliente"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="name">Nome do Respons√°vel</Label>
            <Input
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="Nome da pessoa respons√°vel"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="document">CNPJ/CPF</Label>
            <Input
              id="document"
              name="document"
              value={formData.document}
              onChange={handleChange}
              placeholder="Documento do cliente (CNPJ ou CPF)"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">E-mail</Label>
            <Input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="Email para acesso ao painel"
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="contactPhone">WhatsApp para contato</Label>
            <Input
              id="contactPhone"
              name="contactPhone"
              value={formData.contactPhone}
              onChange={handleChange}
              placeholder="N√∫mero para contato do respons√°vel"
            />
            <p className="text-xs text-muted-foreground">
              Este √© apenas para contato com o respons√°vel, n√£o √© o n√∫mero que ser√° vinculado ao agente.
            </p>
          </div>

          <DialogFooter className="pt-4">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancelar
            </Button>
            <Button type="submit">
              {editing ? "Salvar Altera√ß√µes" : "Criar Cliente"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/lib/utils.ts
================================================================================\n
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================================================
ARQUIVO: ./src/App.css
================================================================================\n

#root {
  max-width: 100%;
  margin: 0 auto;
  padding: 0;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em rgba(100, 108, 255, 0.6));
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em rgba(97, 218, 251, 0.6));
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

/* Dark mode enhancements */
.dark #root {
  color-scheme: dark;
}

.dark .logo:hover {
  filter: drop-shadow(0 0 2em rgba(100, 108, 255, 0.8));
}

.dark .logo.react:hover {
  filter: drop-shadow(0 0 2em rgba(97, 218, 251, 0.8));
}

.dark .read-the-docs {
  color: #aaa;
}

/* Chart Colors */
:root {
  --chart-blue: 199 89% 48%;
  --chart-blue-dark: 200 98% 39%;
  --chart-green: 159 90% 44%;
  --chart-green-dark: 160 84% 39%;
  --chart-purple: 262 80% 58%;
  --chart-purple-dark: 262 83% 52%;
  --chart-orange: 30 94% 64%;
  --chart-orange-dark: 21 90% 48%;
}

.dark {
  --chart-blue: 201 94% 67%;
  --chart-blue-dark: 201 94% 57%;
  --chart-green: 158 64% 52%;
  --chart-green-dark: 158 64% 42%;
  --chart-purple: 263 70% 71%;
  --chart-purple-dark: 263 70% 61%;
  --chart-orange: 33 97% 70%;
  --chart-orange-dark: 33 97% 60%;
}

.recharts-tooltip-wrapper {
  z-index: 1000;
}



================================================================================
ARQUIVO: ./src/services/franchiseeService.ts
================================================================================\n
// src/services/franchiseeService.ts

import { supabase } from "@/integrations/supabase/client";
import { Franchisee } from "@/types";
import { toast } from "sonner";

// Mapeia os dados do RPC para o tipo Franchisee do frontend
const mapFranchiseeFromDB = (dbFranchisee: any): Franchisee => ({
  id: dbFranchisee.id,
  name: dbFranchisee.name,
  email: dbFranchisee.email,
  role: 'franchisee',
  agentCount: dbFranchisee.agent_count || 0,
  customerCount: dbFranchisee.customer_count || 0,
  revenue: dbFranchisee.revenue || 0,
  isActive: dbFranchisee.is_active,
  createdAt: dbFranchisee.created_at,
});

export const franchiseeService = {
  async getFranchisees(): Promise<Franchisee[]> {
    console.log('Buscando franqueados do banco de dados...');

    // Chama a fun√ß√£o RPC no Supabase
    const { data, error } = await supabase.rpc('get_franchisees_details');

    if (error) {
      console.error("Erro ao buscar franqueados:", error);
      toast.error("N√£o foi poss√≠vel carregar os franqueados. Verifique o console.");
      throw new Error(error.message);
    }

    console.log(`Sucesso! ${data.length} franqueados encontrados.`);
    return data.map(mapFranchiseeFromDB);
  },
  
  // Aqui adicionar outras fun√ß√µes como create, update, delete...
};


================================================================================
ARQUIVO: ./src/services/agentService.ts
================================================================================\n

import { supabase } from "@/integrations/supabase/client";
import { Agent, Customer } from "@/types";

export interface CreateAgentRequest {
  name: string;
  sector: string;
  prompt?: string;
  open_ai_key: string;
  enable_voice_recognition?: boolean;
  knowledge_base?: string;
  customer_id: string;
  phone_number?: string;
}

export interface CreateCustomerRequest {
  business_name: string;
  name: string;
  email: string;
  document?: string;
  contact_phone?: string;
}

export const agentService = {
  async createAgent(agentData: CreateAgentRequest, franchiseeId: string): Promise<Agent> {
    console.log('Creating agent:', { agentData, franchiseeId });
    
    const { data, error } = await supabase
      .from('agents')
      .insert({
        name: agentData.name,
        sector: agentData.sector,
        prompt: agentData.prompt || '',
        open_ai_key: agentData.open_ai_key,
        enable_voice_recognition: agentData.enable_voice_recognition || false,
        knowledge_base: agentData.knowledge_base || '',
        customer_id: agentData.customer_id,
        franchisee_id: franchiseeId,
        phone_number: agentData.phone_number || '',
        whatsapp_connected: false,
        is_active: true,
        message_count: 0,
        response_time: 0
      })
      .select('*')
      .single();

    if (error) {
      console.error('Error creating agent:', error);
      throw new Error(`Failed to create agent: ${error.message}`);
    }

    console.log('Agent created successfully:', data);

    // Update customer agent count using RPC or raw SQL
    const { error: updateError } = await supabase.rpc('increment_customer_agent_count', {
      customer_id: agentData.customer_id
    });

    if (updateError) {
      console.warn('Failed to update customer agent count:', updateError);
      // Don't throw error here as the agent was created successfully
    }

    return this.mapAgentFromDB(data);
  },

  async updateAgent(agentId: string, updates: Partial<CreateAgentRequest>): Promise<Agent> {
    console.log('Updating agent:', { agentId, updates });
    
    const { data, error } = await supabase
      .from('agents')
      .update({
        name: updates.name,
        sector: updates.sector,
        prompt: updates.prompt,
        open_ai_key: updates.open_ai_key,
        enable_voice_recognition: updates.enable_voice_recognition,
        knowledge_base: updates.knowledge_base,
        phone_number: updates.phone_number
      })
      .eq('id', agentId)
      .select('*')
      .single();

    if (error) {
      console.error('Error updating agent:', error);
      throw new Error(`Failed to update agent: ${error.message}`);
    }

    console.log('Agent updated successfully:', data);
    return this.mapAgentFromDB(data);
  },

  async getAgents(franchiseeId: string): Promise<Agent[]> {
    console.log('Fetching agents for franchisee:', franchiseeId);
    
    const { data, error } = await supabase
      .from('agents')
      .select('*')
      .eq('franchisee_id', franchiseeId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching agents:', error);
      throw new Error(`Failed to fetch agents: ${error.message}`);
    }

    console.log('Agents fetched successfully:', data.length);
    return data.map(this.mapAgentFromDB);
  },

  async updateAgentWhatsAppStatus(agentId: string, connected: boolean): Promise<void> {
    console.log('Updating WhatsApp status:', { agentId, connected });
    
    const { error } = await supabase
      .from('agents')
      .update({ whatsapp_connected: connected })
      .eq('id', agentId);

    if (error) {
      console.error('Error updating WhatsApp status:', error);
      throw new Error(`Failed to update WhatsApp status: ${error.message}`);
    }

    console.log('WhatsApp status updated successfully');
  },

  mapAgentFromDB(dbAgent: any): Agent {
    return {
      id: dbAgent.id,
      name: dbAgent.name,
      sector: dbAgent.sector,
      prompt: dbAgent.prompt || '',
      openAiKey: dbAgent.open_ai_key,
      enableVoiceRecognition: dbAgent.enable_voice_recognition,
      knowledgeBase: dbAgent.knowledge_base || '',
      customerId: dbAgent.customer_id,
      franchiseeId: dbAgent.franchisee_id,
      whatsappConnected: dbAgent.whatsapp_connected,
      createdAt: dbAgent.created_at,
      isActive: dbAgent.is_active,
      messageCount: dbAgent.message_count,
      responseTime: dbAgent.response_time,
      phoneNumber: dbAgent.phone_number,
      demoUrl: dbAgent.demo_url
    };
  }
};

export const customerService = {
  async createCustomer(customerData: CreateCustomerRequest, franchiseeId: string): Promise<Customer> {
    console.log('Creating customer:', { customerData, franchiseeId });
    
    const { data, error } = await supabase
      .from('customers')
      .insert({
        business_name: customerData.business_name,
        name: customerData.name,
        email: customerData.email,
        document: customerData.document || '',
        contact_phone: customerData.contact_phone || '',
        franchisee_id: franchiseeId,
        agent_count: 0,
        role: 'customer'
      })
      .select('*')
      .single();

    if (error) {
      console.error('Error creating customer:', error);
      throw new Error(`Failed to create customer: ${error.message}`);
    }

    console.log('Customer created successfully:', data);
    return this.mapCustomerFromDB(data);
  },

  async getCustomers(franchiseeId: string): Promise<Customer[]> {
    console.log('Fetching customers for franchisee:', franchiseeId);
    
    const { data, error } = await supabase
      .from('customers')
      .select('*')
      .eq('franchisee_id', franchiseeId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching customers:', error);
      throw new Error(`Failed to fetch customers: ${error.message}`);
    }

    console.log('Customers fetched successfully:', data.length);
    return data.map(this.mapCustomerFromDB);
  },

  mapCustomerFromDB(dbCustomer: any): Customer {
    return {
      id: dbCustomer.id,
      businessName: dbCustomer.business_name,
      name: dbCustomer.name,
      email: dbCustomer.email,
      document: dbCustomer.document,
      contactPhone: dbCustomer.contact_phone,
      franchiseeId: dbCustomer.franchisee_id,
      agentCount: dbCustomer.agent_count,
      createdAt: dbCustomer.created_at,
      role: dbCustomer.role as "customer",
      logo: dbCustomer.logo,
      portalUrl: dbCustomer.portal_url
    };
  }
};



================================================================================
ARQUIVO: ./src/services/prospectingService.ts
================================================================================\n

import { Lead, ProspectingHistory } from "@/types/prospecting";

class ProspectingService {
  private static STORAGE_KEY = 'prospecting_history';

  // Obter hist√≥rico de prospec√ß√£o do localStorage
  static getProspectingHistory(): ProspectingHistory[] {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      console.error('Error loading prospecting history:', error);
      return [];
    }
  }

  // Salvar hist√≥rico de prospec√ß√£o
  static saveProspectingHistory(history: ProspectingHistory[]): void {
    try {
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(history));
    } catch (error) {
      console.error('Error saving prospecting history:', error);
    }
  }

  // Obter IDs de leads j√° utilizados para um franqueado/nicho/cidade/estado espec√≠fico
  static getUsedLeadIds(franchiseeId: string, niche: string, city: string, state: string): string[] {
    const history = this.getProspectingHistory();
    const entry = history.find(h => 
      h.franchiseeId === franchiseeId && 
      h.niche === niche && 
      h.city.toLowerCase() === city.toLowerCase() && 
      h.state === state
    );
    return entry ? entry.usedLeadIds : [];
  }

  // Adicionar novos IDs de leads utilizados
  static addUsedLeadIds(franchiseeId: string, niche: string, city: string, state: string, newLeadIds: string[]): void {
    const history = this.getProspectingHistory();
    const existingIndex = history.findIndex(h => 
      h.franchiseeId === franchiseeId && 
      h.niche === niche && 
      h.city.toLowerCase() === city.toLowerCase() && 
      h.state === state
    );

    if (existingIndex >= 0) {
      // Atualizar entrada existente
      history[existingIndex].usedLeadIds = [...new Set([...history[existingIndex].usedLeadIds, ...newLeadIds])];
      history[existingIndex].lastSearchAt = new Date().toISOString();
    } else {
      // Criar nova entrada
      history.push({
        franchiseeId,
        niche,
        city: city.toLowerCase(),
        state,
        usedLeadIds: newLeadIds,
        lastSearchAt: new Date().toISOString()
      });
    }

    this.saveProspectingHistory(history);
  }

  // Simular busca de leads com exclus√£o de duplicatas
  static async fetchUniqueLeads(
    franchiseeId: string, 
    niche: string, 
    city: string, 
    state: string, 
    quantity: number
  ): Promise<Lead[]> {
    // Simular delay da API
    await new Promise(resolve => setTimeout(resolve, 1500));

    // Obter IDs j√° utilizados
    const usedIds = this.getUsedLeadIds(franchiseeId, niche, city, state);
    
    // Gerar leads simulados
    const allPossibleLeads = Array.from({ length: 100 }, (_, i) => ({
      id: `lead-${niche.replace(/\s/g, '')}-${city.replace(/\s/g, '')}-${state}-${i}`,
      name: `${niche} ${i + 1} em ${city}`,
      niche,
      address: `Rua Principal, ${i * 123}, ${city} - ${state}`,
      phone: `+5511${Math.floor(90000000 + Math.random() * 9999999)}`,
      email: Math.random() > 0.3 ? `contato${i}@empresa${i}.com` : null,
      selected: false
    }));

    // Filtrar leads n√£o utilizados
    const availableLeads = allPossibleLeads.filter(lead => !usedIds.includes(lead.id));
    
    // Verificar se h√° leads suficientes dispon√≠veis
    if (availableLeads.length === 0) {
      throw new Error('N√£o h√° mais empresas dispon√≠veis para este nicho nesta cidade. Tente outra cidade ou nicho.');
    }

    // Retornar a quantidade solicitada (ou o que estiver dispon√≠vel)
    const selectedLeads = availableLeads.slice(0, Math.min(quantity, availableLeads.length));
    
    // Registrar os IDs utilizados
    this.addUsedLeadIds(franchiseeId, niche, city, state, selectedLeads.map(lead => lead.id));
    
    return selectedLeads;
  }
}

export default ProspectingService;



================================================================================
ARQUIVO: ./src/App.tsx
================================================================================\n
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { AuthProvider, useAuth } from "@/context/AuthContext";
import { useMemo } from "react";

// Import pages
import Auth from "./pages/Auth";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import NotFound from "./pages/NotFound";

// Admin pages
import Franchisees from "./pages/admin/Franchisees";
import Analytics from "./pages/admin/Analytics";
import Lessons from "./pages/admin/Lessons";
import EvolutionConfig from "./pages/admin/EvolutionConfig";

// Franchisee pages
import Agents from "./pages/franchisee/Agents";
import Prompts from "./pages/franchisee/Prompts";
import Customers from "./pages/franchisee/Customers";
import Schedule from "./pages/franchisee/Schedule";
import Plans from "./pages/franchisee/Plans";
import WhatsAppConnections from "./pages/franchisee/WhatsAppConnections";
import Prospecting from "./pages/franchisee/Prospecting";
import AISalesAgent from "./pages/franchisee/AISalesAgent";
import FranchiseeLessons from "./pages/franchisee/Lessons";

// Customer pages
import CustomerDashboard from "./pages/customer/Dashboard";
import AIAgentConfig from "./pages/customer/AIAgentConfig";
import CustomerSchedule from "./pages/customer/Schedule";

// Protected route component
interface ProtectedRouteProps {
  element: React.ReactElement;
  allowedRoles: string[];
}

const ProtectedRoute = ({ element, allowedRoles }: ProtectedRouteProps) => {
  const { user, loading } = useAuth();
  
  // Show nothing while loading
  if (loading) return null;
  
  // If user is not logged in, redirect to auth page
  if (!user) return <Navigate to="/auth" replace />;
  
  // If user role is not allowed, redirect to dashboard
  if (!allowedRoles.includes(user.role)) return <Navigate to="/dashboard" replace />;
  
  return element;
};

const AppRoutes = () => {
  const { user, loading } = useAuth();

  // Show nothing while loading
  if (loading) return null;

  return (
    <Routes>
      <Route path="/auth" element={user ? <Navigate to="/dashboard" replace /> : <Auth />} />
      <Route path="/login" element={<Navigate to="/auth" replace />} />

      {/* Protected routes */}
      <Route path="/dashboard" element={<ProtectedRoute element={<Dashboard />} allowedRoles={["admin", "franchisee", "customer"]} />} />
      
      {/* Admin routes */}
      <Route path="/admin/franchisees" element={<ProtectedRoute element={<Franchisees />} allowedRoles={["admin"]} />} />
      <Route path="/admin/analytics" element={<ProtectedRoute element={<Analytics />} allowedRoles={["admin"]} />} />
      <Route path="/admin/evolution-config" element={<ProtectedRoute element={<EvolutionConfig />} allowedRoles={["admin"]} />} />
      <Route path="/admin/lessons" element={<ProtectedRoute element={<Lessons />} allowedRoles={["admin"]} />} />

      {/* Franchisee routes */}
      <Route path="/franchisee/agents" element={<ProtectedRoute element={<Agents />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/prompts" element={<ProtectedRoute element={<Prompts />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/customers" element={<ProtectedRoute element={<Customers />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/schedule" element={<ProtectedRoute element={<Schedule />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/plans" element={<ProtectedRoute element={<Plans />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/whatsapp" element={<ProtectedRoute element={<WhatsAppConnections />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/prospecting" element={<ProtectedRoute element={<Prospecting />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/ai-sales-agent" element={<ProtectedRoute element={<AISalesAgent />} allowedRoles={["franchisee"]} />} />
      <Route path="/franchisee/lessons" element={<ProtectedRoute element={<FranchiseeLessons />} allowedRoles={["franchisee"]} />} />

      {/* Customer routes */}
      <Route path="/customer/dashboard" element={<ProtectedRoute element={<CustomerDashboard />} allowedRoles={["customer"]} />} />
      <Route path="/customer/ai-agents" element={<ProtectedRoute element={<AIAgentConfig />} allowedRoles={["customer"]} />} />
      <Route path="/customer/schedule" element={<ProtectedRoute element={<CustomerSchedule />} allowedRoles={["customer"]} />} />
      
      {/* Redirect root to auth or dashboard */}
      <Route path="/" element={user ? <Navigate to="/dashboard" replace /> : <Navigate to="/auth" replace />} />
      
      {/* Catch-all route */}
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
};

const App = () => {
  // Create QueryClient inside the component to ensure proper React context
  const queryClient = useMemo(
    () => new QueryClient({
      defaultOptions: {
        queries: {
          staleTime: 5 * 60 * 1000, // 5 minutes
          retry: 1,
        },
      },
    }),
    []
  );

  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <TooltipProvider>
          <Toaster />
          <Sonner />
          <BrowserRouter>
            <AppRoutes />
          </BrowserRouter>
        </TooltipProvider>
      </AuthProvider>
    </QueryClientProvider>
  );
};

export default App;



================================================================================
ARQUIVO: ./src/index.css
================================================================================\n

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    /* Sidebar variables */
    --sidebar-background: 0 0% 100%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 10.6% 64.9%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    /* Sidebar variables for dark mode */
    --sidebar-background: 222.2 84% 4.9%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 94.1%;
    --sidebar-primary-foreground: 220.9 39.3% 11%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 10.6% 64.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-family: 'Inter', sans-serif;
  }
}

@layer utilities {
  .container-padding {
    @apply px-4 sm:px-6 lg:px-8;
  }
  
  .section-spacing {
    @apply py-8 sm:py-12 lg:py-16;
  }
  
  .card-hover {
    @apply transition-all duration-300 hover:shadow-lg hover:-translate-y-1;
  }
  
  .dashboard-background {
    @apply bg-background;
  }
  
  .dashboard-section {
    @apply bg-background;
  }
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

@keyframes fade-in-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scale-in {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-shimmer {
  animation: shimmer 2s infinite;
}

.animate-fade-in-up {
  animation: fade-in-up 0.6s ease-out;
}

.animate-scale-in {
  animation: scale-in 0.4s ease-out;
}

/* Smooth scrollbar */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: hsl(var(--muted-foreground) / 0.3);
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.5);
}

/* Focus improvements */
button:focus-visible,
a:focus-visible {
  outline: 2px solid hsl(var(--ring));
  outline-offset: 2px;
}

/* Improved transitions */
* {
  scroll-behavior: smooth;
}

.group:hover .group-hover\:scale-110 {
  transform: scale(1.1);
}



================================================================================
ARQUIVO: ./src/hooks/useEvolutionAPI.tsx
================================================================================\n
import { useState, useEffect, useRef } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { Agent } from "@/types";

export interface EvolutionConfig {
  id: string;
  instance_name: string;
  status: string;
  qr_code?: string;
  webhook_url?: string;
  created_at: string;
  updated_at: string;
}

export interface AIAgent {
  id: string;
  agent_id: string;
  evolution_config_id: string;
  phone_number: string;
  model: string;
  system_prompt?: string;
  is_active: boolean;
  auto_response: boolean;
  response_delay_seconds?: number;
  created_at: string;
  updated_at: string;
}

export interface GlobalConfig {
  id: string;
  name: string;
  api_url: string;
  api_key: string;
  manager_url?: string;
  global_api_key?: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface CreateAIAgentRequest {
  agent_id: string;
  evolution_config_id: string;
  phone_number: string;
  openai_api_key?: string;
  model: string;
  system_prompt: string;
  auto_response: boolean;
  response_delay_seconds: number;
}

export function useEvolutionAPI(franchiseeId?: string) {
  const [configs, setConfigs] = useState<EvolutionConfig[]>([]);
  const [aiAgents, setAiAgents] = useState<AIAgent[]>([]);
  const [globalConfigs, setGlobalConfigs] = useState<GlobalConfig[]>([]);
  const [agents, setAgents] = useState<Agent[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isCreating, setIsCreating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Status monitoring
  const statusCheckInterval = useRef<NodeJS.Timeout | null>(null);
  const [isMonitoring, setIsMonitoring] = useState(false);

  useEffect(() => {
    loadInitialData();
    
    // Cleanup interval on unmount
    return () => {
      if (statusCheckInterval.current) {
        clearInterval(statusCheckInterval.current);
        statusCheckInterval.current = null;
      }
    };
  }, [franchiseeId]);

  const loadInitialData = async () => {
    await loadGlobalConfigs();
    if (franchiseeId) {
      await Promise.all([
        loadConfigs(),
        loadAIAgents(),
        loadTraditionalAgents()
      ]);
      
      // Start status monitoring if we have configs
      setTimeout(() => {
        startStatusMonitoring();
      }, 1000);
    }
    setIsLoading(false);
  };

  const startStatusMonitoring = () => {
    if (statusCheckInterval.current || !franchiseeId) {
      return;
    }

    console.log('üîÑ Starting status monitoring...');
    setIsMonitoring(true);

    // Check status every 10 seconds for active configs
    statusCheckInterval.current = setInterval(async () => {
      await monitorConfigStatuses();
    }, 10000);
  };

  const stopStatusMonitoring = () => {
    if (statusCheckInterval.current) {
      console.log('‚èπÔ∏è Stopping status monitoring...');
      clearInterval(statusCheckInterval.current);
      statusCheckInterval.current = null;
      setIsMonitoring(false);
    }
  };

  const monitorConfigStatuses = async () => {
    // Only monitor configs that might change status
    const configsToMonitor = configs.filter(config => 
      config.status === 'qr_ready' || config.status === 'connecting'
    );

    if (configsToMonitor.length === 0) {
      return;
    }

    console.log('üîç Monitoring', configsToMonitor.length, 'configs for status changes...');

    for (const config of configsToMonitor) {
      try {
        const statusData = await checkInstanceStatus(config.id);
        
        if (statusData?.status === 'connected' && config.status !== 'connected') {
          console.log('üéâ Status change detected! Config', config.id, 'is now connected');
          toast.success(`WhatsApp conectado para ${config.instance_name}!`);
          
          // Reload configs to get updated data
          await loadConfigs();
        }
      } catch (error) {
        console.error('‚ùå Error monitoring config', config.id, ':', error);
      }
    }
  };

  const loadGlobalConfigs = async () => {
    try {
      const { data, error } = await supabase
        .from('evolution_global_configs')
        .select('*')
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setGlobalConfigs(data || []);
    } catch (error) {
      console.error('Erro ao carregar configura√ß√µes globais:', error);
      setError('Erro ao carregar configura√ß√µes globais');
    }
  };

  const loadConfigs = async () => {
    if (!franchiseeId) return;
    
    try {
      const { data, error } = await supabase
        .from('evolution_api_configs')
        .select('*')
        .eq('franchisee_id', franchiseeId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      
      const newConfigs = data || [];
      setConfigs(newConfigs);
      
      // Check if monitoring should be started/stopped
      const needsMonitoring = newConfigs.some(config => 
        config.status === 'qr_ready' || config.status === 'connecting'
      );
      
      if (needsMonitoring && !statusCheckInterval.current) {
        startStatusMonitoring();
      } else if (!needsMonitoring && statusCheckInterval.current) {
        stopStatusMonitoring();
      }
      
    } catch (error) {
      console.error('Erro ao carregar configura√ß√µes:', error);
      setError('Erro ao carregar configura√ß√µes');
    }
  };

  const loadAIAgents = async () => {
    if (!franchiseeId) return;
    
    try {
      const { data, error } = await supabase
        .from('ai_whatsapp_agents')
        .select(`
          *,
          evolution_api_configs!inner(franchisee_id)
        `)
        .eq('evolution_api_configs.franchisee_id', franchiseeId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setAiAgents(data || []);
    } catch (error) {
      console.error('Erro ao carregar agentes IA:', error);
      setError('Erro ao carregar agentes IA');
    }
  };

  const loadTraditionalAgents = async () => {
    if (!franchiseeId) return;
    try {
      const { data, error } = await supabase
        .from('agents')
        .select('*')
        .eq('franchisee_id', franchiseeId);

      if (error) throw error;
      setAgents(data || []);
    } catch (error) {
      console.error('Erro ao carregar agentes tradicionais:', error);
      setError('Erro ao carregar agentes tradicionais');
    }
  };

  const checkInstanceStatus = async (configId: string) => {
    try {
      console.log('üîç Verificando status da inst√¢ncia:', configId);
      
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'check_status',
          config_id: configId
        }
      });

      if (error) {
        console.error('‚ùå Erro na fun√ß√£o de verifica√ß√£o:', error);
        throw error;
      }
      
      console.log('üìä Status da inst√¢ncia retornado:', data);
      
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao verificar status da inst√¢ncia:', error);
      throw error;
    }
  };

  const forceStatusSync = async (configId: string) => {
    try {
      console.log('üîÑ Forcing status sync for config:', configId);
      
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'force_status_sync',
          config_id: configId
        }
      });

      if (error) {
        console.error('‚ùå Error in force sync:', error);
        throw error;
      }
      
      console.log('‚úÖ Force sync completed:', data);
      
      // Reload configs after sync
      await loadConfigs();
      
      if (data?.status === 'connected') {
        toast.success('Status sincronizado: WhatsApp conectado!');
      }
      
      return data;
    } catch (error) {
      console.error('‚ùå Error forcing status sync:', error);
      toast.error('Erro ao sincronizar status');
      throw error;
    }
  };

  const createInstanceWithAutoConfig = async (instanceName: string, agentId?: string) => {
    if (!franchiseeId) {
      throw new Error('FranchiseeId √© obrigat√≥rio');
    }
    
    if (globalConfigs.length === 0) {
      throw new Error('EvolutionAPI n√£o configurada globalmente');
    }
    
    setIsCreating(true);
    try {
      console.log('Criando inst√¢ncia autom√°tica:', { instanceName, franchiseeId, agentId });
      
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'create_instance',
          franchisee_id: franchiseeId,
          instance_name: instanceName,
          agent_id: agentId
        }
      });

      if (error) {
        console.error('Erro na fun√ß√£o create_instance:', error);
        throw new Error(`Erro na fun√ß√£o: ${error.message || 'Erro desconhecido'}`);
      }

      if (!data || !data.success) {
        console.error('Resposta inv√°lida da fun√ß√£o:', data);
        throw new Error(data?.error || 'Resposta inv√°lida da fun√ß√£o');
      }
      
      console.log('Inst√¢ncia criada com sucesso:', data);
      
      // Aguardar um pouco e recarregar os dados
      await new Promise(resolve => setTimeout(resolve, 1000));
      await loadConfigs();
      
      toast.success('Inst√¢ncia criada e configurada automaticamente');
      return data.config;
    } catch (error) {
      console.error('Erro ao criar inst√¢ncia:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      toast.error(`Erro ao criar inst√¢ncia: ${errorMessage}`);
      throw error;
    } finally {
      setIsCreating(false);
    }
  };

  const createInstance = async (instanceName: string) => {
    return createInstanceWithAutoConfig(instanceName);
  };

  const connectInstance = async (configId: string) => {
    try {
      console.log('Conectando inst√¢ncia:', configId);
      
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'connect_instance',
          config_id: configId
        }
      });

      if (error) {
        console.error('Erro da fun√ß√£o connect_instance:', error);
        throw new Error(`Erro na fun√ß√£o: ${error.message || 'Erro desconhecido'}`);
      }
      
      if (!data) {
        throw new Error('Nenhum dado retornado pela fun√ß√£o');
      }

      console.log('Resposta da fun√ß√£o connectInstance:', data);

      if (!data.success) {
        throw new Error(data.error || 'Erro ao conectar inst√¢ncia');
      }
      
      // Aguardar um pouco e recarregar os dados
      await new Promise(resolve => setTimeout(resolve, 500));
      await loadConfigs();
      
      // Start monitoring for this config
      startStatusMonitoring();
      
      // Retornar o QR code se dispon√≠vel
      const qrCode = data.qr_code || data.qrCode || data.base64;
      if (qrCode) {
        console.log('QR code gerado com sucesso');
        return qrCode;
      }
      
      if (data.message && data.message.includes('connected')) {
        toast.success('WhatsApp j√° conectado');
        return null;
      }
      
      throw new Error('QR code n√£o foi gerado pela EvolutionAPI');
    } catch (error) {
      console.error('Erro ao conectar inst√¢ncia:', error);
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      toast.error(`Erro ao conectar: ${errorMessage}`);
      throw error;
    }
  };

  const disconnectInstance = async (configId: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'disconnect_instance',
          config_id: configId
        }
      });

      if (error) throw error;
      
      await loadConfigs();
      toast.success('Inst√¢ncia desconectada');
      return data;
    } catch (error) {
      console.error('Erro ao desconectar inst√¢ncia:', error);
      toast.error('Erro ao desconectar inst√¢ncia');
      throw error;
    }
  };

  const deleteInstance = async (configId: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'delete_instance',
          config_id: configId
        }
      });

      if (error) throw error;
      
      await loadConfigs();
      toast.success('Inst√¢ncia removida');
      return data;
    } catch (error) {
      console.error('Erro ao remover inst√¢ncia:', error);
      toast.error('Erro ao remover inst√¢ncia');
      throw error;
    }
  };

  const updateAIAgent = async (agentId: string, updates: Partial<AIAgent>) => {
    try {
      const { data, error } = await supabase
        .from('ai_whatsapp_agents')
        .update(updates)
        .eq('id', agentId)
        .select()
        .single();

      if (error) throw error;
      
      await loadAIAgents();
      return data;
    } catch (error) {
      console.error('Erro ao atualizar agente:', error);
      throw error;
    }
  };

  const createAIAgent = async (agentData: CreateAIAgentRequest) => {
    try {
      const { data, error } = await supabase
        .from('ai_whatsapp_agents')
        .insert([{
          agent_id: agentData.agent_id,
          evolution_config_id: agentData.evolution_config_id,
          phone_number: agentData.phone_number,
          openai_api_key: agentData.openai_api_key,
          model: agentData.model,
          system_prompt: agentData.system_prompt,
          auto_response: agentData.auto_response,
          response_delay_seconds: agentData.response_delay_seconds,
          is_active: true
        }])
        .select()
        .single();

      if (error) throw error;
      
      await loadAIAgents();
      return data;
    } catch (error) {
      console.error('Erro ao criar agente IA:', error);
      throw error;
    }
  };

  const createAgentWithAutoInstance = async (agentId: string, agentName: string, phoneNumber?: string) => {
    try {
      console.log('Criando inst√¢ncia autom√°tica para agente:', agentId);
      
      // Verificar se j√° existe uma inst√¢ncia para este agente
      const existingConfig = configs.find(c => c.instance_name.includes(agentId));
      
      if (existingConfig) {
        console.log('Using existing configuration:', existingConfig.id);
        return existingConfig;
      }
      
      // Criar nome √∫nico para a inst√¢ncia
      const instanceName = `agent_${agentId.replace(/-/g, '_')}_${Date.now()}`;
      
      // Criar inst√¢ncia com configura√ß√£o autom√°tica
      const evolutionConfig = await createInstanceWithAutoConfig(instanceName, agentId);
      
      console.log('Inst√¢ncia criada para agente:', evolutionConfig);
      
      return evolutionConfig;
    } catch (error) {
      console.error('Erro ao criar inst√¢ncia autom√°tica para agente:', error);
      throw error;
    }
  };

  const sendTestMessage = async (configId: string, phoneNumber: string, message: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'send_message',
          config_id: configId,
          phone_number: phoneNumber,
          message: message
        }
      });

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      throw error;
    }
  };

  const testConnection = async () => {
    try {
      if (globalConfigs.length === 0) {
        throw new Error('Nenhuma configura√ß√£o global encontrada');
      }

      const config = globalConfigs[0];
      const { data, error } = await supabase.functions.invoke('evolution-api-manager', {
        body: {
          action: 'test_connection',
          api_url: config.api_url,
          api_key: config.api_key
        }
      });

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Erro ao testar conex√£o:', error);
      throw error;
    }
  };

  const refreshData = async () => {
    setIsLoading(true);
    await loadInitialData();
  };

  return {
    configs,
    aiAgents,
    globalConfigs,
    agents,
    isLoading,
    isCreating,
    isMonitoring,
    error,
    createInstance,
    createInstanceWithAutoConfig,
    createAgentWithAutoInstance,
    connectInstance,
    checkInstanceStatus,
    forceStatusSync,
    disconnectInstance,
    deleteInstance,
    updateAIAgent,
    createAIAgent,
    sendTestMessage,
    testConnection,
    loadConfigs,
    refreshData,
    startStatusMonitoring,
    stopStatusMonitoring
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAgentState.tsx
================================================================================\n

import { useState } from "react";
import { Agent, Customer, CustomerPortalAccess } from "@/types";

export function useAgentState(
  initialAgents: Agent[],
  initialCustomers: Customer[]
) {
  const [agents, setAgents] = useState<Agent[]>(initialAgents);
  const [customers, setCustomers] = useState<Customer[]>(initialCustomers);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isWhatsAppModalOpen, setIsWhatsAppModalOpen] = useState(false);
  const [isCustomerPortalModalOpen, setIsCustomerPortalModalOpen] = useState(false);
  const [isPlanLimitModalOpen, setIsPlanLimitModalOpen] = useState(false);
  const [currentAgent, setCurrentAgent] = useState<Agent | null>(null);
  const [currentCustomer, setCurrentCustomer] = useState<Customer | null>(null);
  const [currentCustomerPortal, setCurrentCustomerPortal] = useState<CustomerPortalAccess | null>(null);

  // Calculate stats
  const totalAgents = agents.length;
  const connectedAgents = agents.filter(agent => agent.whatsappConnected).length;

  return {
    agents,
    customers,
    currentAgent,
    currentCustomer,
    currentCustomerPortal,
    isCreateModalOpen,
    isEditModalOpen,
    isWhatsAppModalOpen,
    isCustomerPortalModalOpen,
    isPlanLimitModalOpen,
    totalAgents,
    connectedAgents,
    setAgents,
    setCustomers,
    setIsCreateModalOpen,
    setIsEditModalOpen,
    setIsWhatsAppModalOpen,
    setIsPlanLimitModalOpen,
    setIsCustomerPortalModalOpen,
    setCurrentAgent,
    setCurrentCustomer,
    setCurrentCustomerPortal,
  };
}



================================================================================
ARQUIVO: ./src/hooks/use-mobile.tsx
================================================================================\n

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    // Initial check
    const checkMobile = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    
    // Check immediately
    checkMobile()
    
    // Set up listener
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      checkMobile()
    }
    
    // Modern approach to add event listener
    mql.addEventListener("change", onChange)
    
    // Clean up
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return isMobile === undefined ? false : isMobile
}



================================================================================
ARQUIVO: ./src/hooks/useAgentFormValidation.tsx
================================================================================\n

import { Agent, Customer } from "@/types";
import { toast } from "sonner";
import { useCallback } from "react";

interface UseAgentFormValidationProps {
  formData: Partial<Agent>;
  customerData: Partial<Customer>;
  isNewCustomer: boolean;
  selectedCustomerId: string;
  setActiveTab: (tab: string) => void;
}

export function useAgentFormValidation({
  formData,
  customerData,
  isNewCustomer,
  selectedCustomerId,
  setActiveTab,
}: UseAgentFormValidationProps) {
  const validateAgentForm = useCallback(() => {
    console.log('Validating agent form:', formData);
    
    if (!formData.name?.trim()) {
      toast.error("Por favor, preencha o nome do agente");
      return false;
    }

    if (!formData.sector?.trim()) {
      toast.error("Por favor, preencha o setor do agente");
      return false;
    }

    if (!formData.openAiKey?.trim()) {
      toast.error("Por favor, forne√ßa uma chave da OpenAI");
      return false;
    }

    if (!formData.openAiKey.startsWith("sk-")) {
      toast.error("A chave da OpenAI deve come√ßar com 'sk-'");
      return false;
    }

    console.log('Agent form validation passed');
    return true;
  }, [formData]);

  const validateCustomerForm = useCallback(() => {
    console.log('Validating customer form:', { isNewCustomer, customerData, selectedCustomerId });
    
    if (isNewCustomer) {
      if (!customerData.businessName?.trim()) {
        toast.error("Por favor, preencha o nome da empresa");
        return false;
      }

      if (!customerData.name?.trim()) {
        toast.error("Por favor, preencha o nome do respons√°vel");
        return false;
      }

      if (!customerData.email?.trim()) {
        toast.error("Por favor, preencha o email do respons√°vel");
        return false;
      }

      // Valida√ß√£o b√°sica de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(customerData.email)) {
        toast.error("Por favor, forne√ßa um email v√°lido");
        return false;
      }
    } else {
      if (!selectedCustomerId) {
        toast.error("Por favor, selecione um cliente existente");
        return false;
      }
    }
    
    console.log('Customer form validation passed');
    return true;
  }, [isNewCustomer, customerData, selectedCustomerId]);

  return {
    validateAgentForm,
    validateCustomerForm,
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAgentFormData.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { Agent, Customer } from "@/types";
import { Prompt } from "@/types/prompts";

interface UseAgentFormDataProps {
  editing?: Agent;
  selectedPrompt?: Prompt | null;
  open: boolean;
}

export function useAgentFormData({ editing, selectedPrompt, open }: UseAgentFormDataProps) {
  const [formData, setFormData] = useState<Partial<Agent>>(
    editing || {
      name: "",
      sector: "",
      prompt: "",
      openAiKey: "",
      enableVoiceRecognition: false,
      knowledgeBase: "",
    }
  );
  
  const [customerData, setCustomerData] = useState<Partial<Customer>>({
    businessName: "",
    name: "",
    email: "",
    document: "",
    contactPhone: "",
  });

  const [isNewCustomer, setIsNewCustomer] = useState(true);
  const [selectedCustomerId, setSelectedCustomerId] = useState<string>("");
  const [selectedPromptId, setSelectedPromptId] = useState<string>("");

  // Reset form when modal opens/closes or editing changes
  useEffect(() => {
    if (open) {
      if (editing) {
        setFormData({...editing});
        setIsNewCustomer(false);
        if (editing.customerId) {
          setSelectedCustomerId(editing.customerId);
        }
      } else {
        setFormData({
          name: "",
          sector: "",
          prompt: "",
          openAiKey: "",
          enableVoiceRecognition: false,
          knowledgeBase: "",
        });
        setCustomerData({
          businessName: "",
          name: "",
          email: "",
          document: "",
          contactPhone: "",
        });
        setIsNewCustomer(true);
        setSelectedCustomerId("");
      }
      setSelectedPromptId("");
    }
  }, [open, editing]);

  // Update the prompt field when a prompt is selected from the library
  useEffect(() => {
    if (selectedPrompt) {
      setFormData(prev => ({
        ...prev,
        prompt: selectedPrompt.text
      }));
      setSelectedPromptId(selectedPrompt.id);
    }
  }, [selectedPrompt]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleCustomerChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setCustomerData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleCustomerSelect = (value: string) => {
    setSelectedCustomerId(value);
  };

  const handleSwitchChange = (checked: boolean) => {
    setFormData((prev) => ({
      ...prev,
      enableVoiceRecognition: checked,
    }));
  };

  const handlePromptSelect = (value: string) => {
    setSelectedPromptId(value);
    
    if (value) {
      const prompts = []; // This will be passed from the parent component
      const selectedPrompt = prompts.find(p => p.id === value);
      if (selectedPrompt) {
        setFormData((prev) => ({
          ...prev,
          prompt: selectedPrompt.text
        }));
      }
    }
  };

  return {
    formData,
    customerData,
    isNewCustomer,
    selectedCustomerId,
    selectedPromptId,
    setIsNewCustomer,
    handleChange,
    handleCustomerChange,
    handleCustomerSelect,
    handleSwitchChange,
    handlePromptSelect,
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAgentManagement.tsx
================================================================================\n

import { Agent, Customer } from "@/types";
import { useAgentState } from "./useAgentState";
import { useAgentActions } from "./useAgentActions";
import { useAgentSubmission } from "./useAgentSubmission";
import { useEffect } from "react";
import { agentService, customerService } from "@/services/agentService";
import { toast } from "sonner";

export default function useAgentManagement(
  initialAgents: Agent[],
  initialCustomers: Customer[],
  franchiseeId: string
) {
  console.log('useAgentManagement initialized with franchiseeId:', franchiseeId);

  // State management
  const {
    agents,
    customers,
    currentAgent,
    currentCustomer,
    currentCustomerPortal,
    isCreateModalOpen,
    isEditModalOpen,
    isWhatsAppModalOpen,
    isCustomerPortalModalOpen,
    isPlanLimitModalOpen,
    totalAgents,
    connectedAgents,
    setAgents,
    setCustomers,
    setIsCreateModalOpen,
    setIsEditModalOpen,
    setIsWhatsAppModalOpen,
    setIsPlanLimitModalOpen,
    setIsCustomerPortalModalOpen,
    setCurrentAgent,
    setCurrentCustomer,
    setCurrentCustomerPortal,
  } = useAgentState(initialAgents, initialCustomers);

  // Load data from Supabase on mount
  useEffect(() => {
    const loadData = async () => {
      if (!franchiseeId) {
        console.warn('No franchiseeId provided, skipping data load');
        return;
      }

      try {
        console.log('Loading agents and customers for franchisee:', franchiseeId);
        
        const [agentsData, customersData] = await Promise.all([
          agentService.getAgents(franchiseeId),
          customerService.getCustomers(franchiseeId)
        ]);
        
        console.log('Data loaded successfully:', {
          agents: agentsData.length,
          customers: customersData.length
        });
        
        setAgents(agentsData);
        setCustomers(customersData);
      } catch (error) {
        console.error('Error loading data:', error);
        toast.error('Erro ao carregar dados. Verifique sua conex√£o.');
      }
    };

    loadData();
  }, [franchiseeId, setAgents, setCustomers]);

  // Agent actions
  const {
    handleViewAgent,
    handleEditAgent,
    handleConnectAgent,
    handleTestAgent,
    handleCreateAgentClick,
  } = useAgentActions({
    customers,
    setCurrentAgent,
    setCurrentCustomer,
    setIsEditModalOpen,
    setIsWhatsAppModalOpen,
    setIsCreateModalOpen,
    setIsPlanLimitModalOpen,
  });

  // Agent submission logic
  const {
    handleSubmitAgent,
    handleConnectWhatsApp,
    handleClosePortalModal,
    handleSendCredentialsEmail,
  } = useAgentSubmission({
    agents,
    customers,
    currentAgent,
    franchiseeId,
    isEditModalOpen,
    setAgents,
    setCustomers,
    setCurrentAgent,
    setCurrentCustomer,
    setCurrentCustomerPortal,
    setIsCreateModalOpen,
    setIsEditModalOpen,
    setIsWhatsAppModalOpen,
    setIsCustomerPortalModalOpen,
  });

  // Enhanced create agent click handler
  const handleCreateAgentClickWithLimit = (agentLimit: number) => {
    console.log('Creating agent with limit:', agentLimit, 'Current agents:', agents.length);
    handleCreateAgentClick(agentLimit, agents);
  };

  return {
    agents,
    customers,
    currentAgent,
    currentCustomer,
    currentCustomerPortal,
    isCreateModalOpen,
    isEditModalOpen,
    isWhatsAppModalOpen,
    isCustomerPortalModalOpen,
    isPlanLimitModalOpen,
    totalAgents,
    connectedAgents,
    setIsCreateModalOpen,
    setIsEditModalOpen,
    setIsWhatsAppModalOpen,
    setIsPlanLimitModalOpen,
    setIsCustomerPortalModalOpen,
    setCurrentAgent,
    handleViewAgent,
    handleEditAgent,
    handleConnectAgent,
    handleTestAgent,
    handleCreateAgentClick: handleCreateAgentClickWithLimit,
    handleSubmitAgent,
    handleConnectWhatsApp,
    handleClosePortalModal,
    handleSendCredentialsEmail
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAgentSubmission.tsx
================================================================================\n

import { Agent, Customer, CustomerPortalAccess } from "@/types";
import { toast } from "sonner";
import { generateCustomerPortalAccess } from "@/utils/agentHelpers";
import { agentService, customerService, CreateAgentRequest, CreateCustomerRequest } from "@/services/agentService";
import { useEvolutionAPI } from "@/hooks/useEvolutionAPI";

interface UseAgentSubmissionProps {
  agents: Agent[];
  customers: Customer[];
  currentAgent: Agent | null;
  franchiseeId: string;
  isEditModalOpen: boolean;
  setAgents: (agents: Agent[]) => void;
  setCustomers: (customers: Customer[]) => void;
  setCurrentAgent: (agent: Agent | null) => void;
  setCurrentCustomer: (customer: Customer | null) => void;
  setCurrentCustomerPortal: (portal: CustomerPortalAccess | null) => void;
  setIsCreateModalOpen: (open: boolean) => void;
  setIsEditModalOpen: (open: boolean) => void;
  setIsWhatsAppModalOpen: (open: boolean) => void;
  setIsCustomerPortalModalOpen: (open: boolean) => void;
}

export function useAgentSubmission({
  agents,
  customers,
  currentAgent,
  franchiseeId,
  isEditModalOpen,
  setAgents,
  setCustomers,
  setCurrentAgent,
  setCurrentCustomer,
  setCurrentCustomerPortal,
  setIsCreateModalOpen,
  setIsEditModalOpen,
  setIsWhatsAppModalOpen,
  setIsCustomerPortalModalOpen,
}: UseAgentSubmissionProps) {
  const { createAgentWithAutoInstance, createAIAgent, globalConfigs } = useEvolutionAPI(franchiseeId);

  const handleSubmitAgent = async (
    agentData: Partial<Agent>, 
    customerData?: Partial<Customer>, 
    isNewCustomer?: boolean
  ) => {
    console.log('handleSubmitAgent called:', { 
      agentData, 
      customerData, 
      isNewCustomer, 
      franchiseeId,
      isEditModalOpen 
    });

    try {
      let customerId = "";
      let customer: Customer | undefined;

      if (isNewCustomer && customerData) {
        console.log('Creating new customer...');
        const createCustomerRequest: CreateCustomerRequest = {
          business_name: customerData.businessName || "",
          name: customerData.name || "",
          email: customerData.email || "",
          document: customerData.document,
          contact_phone: customerData.contactPhone
        };
        
        customer = await customerService.createCustomer(createCustomerRequest, franchiseeId);
        setCustomers([...customers, customer]);
        customerId = customer.id;
        console.log('Customer created successfully:', customer.id);
      } else if (agentData.customerId) {
        customerId = agentData.customerId;
        customer = customers.find(c => c.id === customerId);
        console.log('Using existing customer:', customerId);
      }

      if (!customerId) {
        throw new Error('Customer ID √© obrigat√≥rio');
      }

      if (isEditModalOpen && currentAgent) {
        console.log('Updating existing agent...');
        const updateRequest: Partial<CreateAgentRequest> = {
          name: agentData.name,
          sector: agentData.sector,
          prompt: agentData.prompt,
          open_ai_key: agentData.openAiKey,
          enable_voice_recognition: agentData.enableVoiceRecognition,
          knowledge_base: agentData.knowledgeBase,
          phone_number: agentData.phoneNumber
        };

        const updatedAgent = await agentService.updateAgent(currentAgent.id, updateRequest);
        
        const updatedAgents = agents.map(agent =>
          agent.id === currentAgent.id ? updatedAgent : agent
        );
        setAgents(updatedAgents);
        
        toast.success("Agente atualizado com sucesso!");
        setIsEditModalOpen(false);
        setCurrentAgent(null);
      } else {
        console.log('Creating new agent...');
        const createAgentRequest: CreateAgentRequest = {
          name: agentData.name || "",
          sector: agentData.sector || "",
          prompt: agentData.prompt,
          open_ai_key: agentData.openAiKey || "",
          enable_voice_recognition: agentData.enableVoiceRecognition,
          knowledge_base: agentData.knowledgeBase,
          customer_id: customerId,
          phone_number: agentData.phoneNumber
        };

        const newAgent = await agentService.createAgent(createAgentRequest, franchiseeId);
        setAgents([...agents, newAgent]);
        setCurrentAgent(newAgent);
        setIsCreateModalOpen(false);
        
        console.log('Agent created successfully:', newAgent.id);
        
        if (customer) {
          setCurrentCustomer(customer);
          
          toast.success("Agente criado com sucesso!");
          
          // Verificar se EvolutionAPI est√° configurada
          if (globalConfigs.length > 0) {
            console.log('EvolutionAPI dispon√≠vel, criando inst√¢ncia autom√°tica...');
            await handleCreateEvolutionInstance(newAgent, customer);
          } else {
            console.log('EvolutionAPI n√£o configurada, pulando integra√ß√£o autom√°tica');
            toast.info("Agente criado! Configure a EvolutionAPI para usar WhatsApp.");
            
            // Gerar portal do cliente mesmo sem WhatsApp
            const customerPortal = generateCustomerPortalAccess(customer);
            setCurrentCustomerPortal(customerPortal);
            setIsCustomerPortalModalOpen(true);
          }
        }
      }
    } catch (error) {
      console.error('Error submitting agent:', error);
      toast.error(`Erro ao salvar agente: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  };

  const handleCreateEvolutionInstance = async (agent: Agent, customer: Customer) => {
    try {
      console.log('Criando inst√¢ncia autom√°tica EvolutionAPI para agente:', agent.id);
      
      toast.loading("Configurando WhatsApp autom√°tico...");
      
      // Criar inst√¢ncia Evolution autom√°tica (usa configura√ß√£o global automaticamente)
      const evolutionConfig = await createAgentWithAutoInstance(
        agent.id,
        agent.name,
        agent.phoneNumber
      );
      
      console.log('Inst√¢ncia EvolutionAPI criada:', evolutionConfig.id);
      
      // Criar integra√ß√£o AI Agent
      await createAIAgent({
        agent_id: agent.id,
        evolution_config_id: evolutionConfig.id,
        phone_number: agent.phoneNumber || '',
        openai_api_key: agent.openAiKey,
        model: 'gpt-4o-mini',
        system_prompt: agent.prompt || 'Voc√™ √© um assistente √∫til.',
        auto_response: true,
        response_delay_seconds: 2
      });

      console.log('Integra√ß√£o AI Agent criada com sucesso');
      
      toast.dismiss();
      toast.success("WhatsApp configurado automaticamente!");
      
      // Mostrar modal de conex√£o WhatsApp
      setTimeout(() => {
        setIsWhatsAppModalOpen(true);
        
        // Gerar acesso ao portal do cliente
        const customerPortal = generateCustomerPortalAccess(customer);
        setCurrentCustomerPortal(customerPortal);
      }, 1000);
      
    } catch (error) {
      console.error('Erro ao criar inst√¢ncia EvolutionAPI autom√°tica:', error);
      toast.dismiss();
      toast.error(`Erro ao configurar WhatsApp autom√°tico: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
      
      // Ainda mostrar o modal, mas com fluxo de fallback
      setTimeout(() => {
        setIsWhatsAppModalOpen(true);
        const customerPortal = generateCustomerPortalAccess(customer);
        setCurrentCustomerPortal(customerPortal);
      }, 1000);
    }
  };

  const handleConnectWhatsApp = async () => {
    if (!currentAgent) return;
    
    const loadingToast = toast.loading("Conectando ao WhatsApp...");
    
    try {
      console.log('Conectando WhatsApp para o agente:', currentAgent.id);
      
      // Atualizar status de conex√£o WhatsApp no banco
      await agentService.updateAgentWhatsAppStatus(currentAgent.id, true);
      
      // Atualizar estado local
      const updatedAgents = agents.map(agent =>
        agent.id === currentAgent.id ? { ...agent, whatsappConnected: true } : agent
      );
      setAgents(updatedAgents);
      setIsWhatsAppModalOpen(false);
      
      toast.dismiss(loadingToast);
      
      // Mostrar portal do cliente ap√≥s conex√£o do WhatsApp
      setIsCustomerPortalModalOpen(true);
      
      toast.success("WhatsApp conectado com sucesso!");
    } catch (error) {
      console.error('Error connecting WhatsApp:', error);
      toast.dismiss(loadingToast);
      toast.error('Erro ao conectar WhatsApp. Tente novamente.');
    }
  };

  const handleClosePortalModal = () => {
    setIsCustomerPortalModalOpen(false);
    setCurrentCustomerPortal(null);
    setCurrentAgent(null);
    
    toast.success("Configura√ß√£o conclu√≠da! Agente criado e conectado com sucesso.");
  };

  const handleSendCredentialsEmail = () => {
    const loadingToast = toast.loading("Enviando email com instru√ß√µes...");
    
    setTimeout(() => {
      toast.dismiss(loadingToast);
      toast.success("Email enviado com sucesso!");
      handleClosePortalModal();
    }, 1500);
  };

  return {
    handleSubmitAgent,
    handleConnectWhatsApp,
    handleClosePortalModal,
    handleSendCredentialsEmail,
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAgentFileHandling.tsx
================================================================================\n

import { useState } from "react";

export function useAgentFileHandling() {
  const [knowledgeBaseFile, setKnowledgeBaseFile] = useState<File | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Validar tipo de arquivo
      const allowedTypes = ['.pdf', '.txt', '.doc', '.docx'];
      const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();
      
      if (!allowedTypes.includes(fileExtension)) {
        console.error('Tipo de arquivo n√£o suportado:', fileExtension);
        return null;
      }

      // Validar tamanho (m√°ximo 10MB)
      const maxSize = 10 * 1024 * 1024; // 10MB
      if (file.size > maxSize) {
        console.error('Arquivo muito grande:', file.size);
        return null;
      }

      setKnowledgeBaseFile(file);
      console.log('Arquivo selecionado:', file.name);
      return file;
    }
    return null;
  };

  const resetFile = () => {
    setKnowledgeBaseFile(null);
  };

  return {
    knowledgeBaseFile,
    handleFileChange,
    resetFile,
  };
}



================================================================================
ARQUIVO: ./src/hooks/usePromptManagement.tsx
================================================================================\n

import { useState } from "react";
import { Prompt } from "@/types/prompts";
import { MOCK_PROMPTS } from "@/mocks/promptsMockData";
import { toast } from "sonner";
import { v4 as uuidv4 } from 'uuid';

export default function usePromptManagement() {
  const [prompts, setPrompts] = useState<Prompt[]>(MOCK_PROMPTS);
  const [isPromptModalOpen, setIsPromptModalOpen] = useState(false);
  const [isPromptsLibraryModalOpen, setIsPromptsLibraryModalOpen] = useState(false);
  const [isPromptsManagementModalOpen, setIsPromptsManagementModalOpen] = useState(false);
  const [currentPrompt, setCurrentPrompt] = useState<Prompt | null>(null);
  const [selectedPromptForAgent, setSelectedPromptForAgent] = useState<Prompt | null>(null);

  const createPrompt = (promptData: Omit<Prompt, 'id' | 'createdAt'>) => {
    const newPrompt: Prompt = {
      id: uuidv4(),
      ...promptData,
      createdAt: new Date().toISOString(),
    };

    setPrompts((prev) => [...prev, newPrompt]);
    toast.success(`Prompt "${promptData.name}" criado com sucesso!`);
    return newPrompt;
  };

  const updatePrompt = (id: string, promptData: Partial<Prompt>) => {
    setPrompts((prev) => 
      prev.map((prompt) => 
        prompt.id === id ? { ...prompt, ...promptData } : prompt
      )
    );
    toast.success(`Prompt "${promptData.name || 'Selecionado'}" atualizado com sucesso!`);
  };

  const deletePrompt = (id: string) => {
    const promptToDelete = prompts.find(prompt => prompt.id === id);
    if (promptToDelete?.isDefault) {
      toast.error("N√£o √© poss√≠vel excluir prompts padr√£o do sistema.");
      return;
    }
    
    setPrompts((prev) => prev.filter((prompt) => prompt.id !== id));
    toast.success("Prompt exclu√≠do com sucesso!");
  };

  const getAllNiches = () => {
    const niches = [...new Set(prompts.map((prompt) => prompt.niche))];
    return niches;
  };

  // Handler functions
  const handleSubmitPrompt = (promptData: Omit<Prompt, 'id' | 'createdAt'>) => {
    if (currentPrompt) {
      updatePrompt(currentPrompt.id, promptData);
    } else {
      createPrompt(promptData);
    }
    setIsPromptModalOpen(false);
    setCurrentPrompt(null);
  };

  const handleSelectPrompt = (prompt: Prompt) => {
    setSelectedPromptForAgent(prompt);
    setIsPromptsLibraryModalOpen(false);
  };

  const handleEditPrompt = (prompt: Prompt) => {
    setCurrentPrompt(prompt);
    setIsPromptModalOpen(true);
  };

  const handleDeletePrompt = (id: string) => {
    deletePrompt(id);
  };

  const handleCreatePrompt = () => {
    setCurrentPrompt(null);
    setIsPromptModalOpen(true);
  };

  return {
    prompts,
    currentPrompt,
    isPromptModalOpen,
    isPromptsLibraryModalOpen,
    isPromptsManagementModalOpen,
    selectedPromptForAgent,
    allNiches: getAllNiches(),
    setIsPromptModalOpen,
    setIsPromptsLibraryModalOpen,
    setIsPromptsManagementModalOpen,
    handleSubmitPrompt,
    handleSelectPrompt,
    handleEditPrompt,
    handleDeletePrompt,
    handleCreatePrompt,
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAuthCheck.tsx
================================================================================\n

import { useEffect, useState } from "react";
import { supabase } from "@/integrations/supabase/client";
import { User } from "@supabase/supabase-js";
import { toast } from "sonner";

export function useAuthCheck() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Get initial session
    const getSession = async () => {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error) {
        console.error('Error getting session:', error);
        toast.error('Erro ao verificar autentica√ß√£o');
      }
      setUser(session?.user ?? null);
      setLoading(false);
    };

    getSession();

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Auth state changed:', event, session?.user?.id);
        setUser(session?.user ?? null);
        setLoading(false);
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  return { user, loading };
}



================================================================================
ARQUIVO: ./src/hooks/use-local-storage.tsx
================================================================================\n

import { useState, useEffect } from "react";

export function useLocalStorage<T>(key: string, initialValue: T) {
  // Get from local storage then parse stored json or return initialValue
  const readValue = (): T => {
    // SSR check
    if (typeof window === "undefined") {
      return initialValue;
    }

    try {
      const item = window.localStorage.getItem(key);
      return item ? (JSON.parse(item) as T) : initialValue;
    } catch (error) {
      console.warn(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  };

  // State to store our value
  // Pass initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState<T>(readValue);

  // Return a wrapped version of useState's setter function that
  // persists the new value to localStorage.
  const setValue = (value: T | ((val: T) => T)) => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore =
        value instanceof Function ? value(storedValue) : value;
      
      // Save state
      setStoredValue(valueToStore);
      
      // Save to local storage
      if (typeof window !== "undefined") {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.warn(`Error setting localStorage key "${key}":`, error);
    }
  };

  useEffect(() => {
    setStoredValue(readValue());
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [key]);

  return [storedValue, setValue] as const;
}



================================================================================
ARQUIVO: ./src/hooks/useDashboardData.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { useAuth } from "@/context/AuthContext";
import { Analytics, Agent, Message, UserRole } from "@/types";
import { TopFranchisee } from "@/components/analytics/TopFranchiseesCard";

// Mock data for demonstration
const MOCK_ANALYTICS: Record<UserRole, Analytics> = {
  admin: {
    messageCount: 12548,
    activeAgents: 42,
    totalAgents: 50,
    responseTime: 2.4,
    tokensUsed: 1458962,
    franchiseeCount: 8,
    customerCount: 24,
    revenue: 11980.50,
    monthlyRevenue: 45600.75
  },
  franchisee: {
    messageCount: 3245,
    activeAgents: 8,
    totalAgents: 10,
    responseTime: 2.1,
    tokensUsed: 387429,
    customerCount: 5,
    activeCustomers: 4,
    installationRevenue: 2500.00,
    monthlyRevenue: 4800.50
  },
  customer: {
    messageCount: 876,
    activeAgents: 2,
    totalAgents: 2,
    responseTime: 1.9,
    tokensUsed: 98421
  }
};

const MOCK_WEEKLY_MESSAGES = [
  { day: "Dom", count: 345 },
  { day: "Seg", count: 456 },
  { day: "Ter", count: 523 },
  { day: "Qua", count: 578 },
  { day: "Qui", count: 498 },
  { day: "Sex", count: 467 },
  { day: "S√°b", count: 389 }
];

const MOCK_MESSAGES: Message[] = [{
  id: "1",
  sender: "+5511999999999",
  content: "Ol√°, gostaria de saber mais sobre os servi√ßos oferecidos.",
  timestamp: new Date(Date.now() - 25 * 60000).toISOString(),
  agentId: "agent1",
  isAi: false
}, {
  id: "2",
  sender: "Agente IA",
  content: "Ol√°! Claro, posso ajudar. Nossa empresa oferece diversos servi√ßos incluindo consultoria, desenvolvimento de software e suporte t√©cnico. Em qual servi√ßo voc√™ tem interesse?",
  timestamp: new Date(Date.now() - 24 * 60000).toISOString(),
  agentId: "agent1",
  isAi: true
}, {
  id: "3",
  sender: "+5511999999999",
  content: "Estou interessado em desenvolvimento de software. Voc√™s desenvolvem aplicativos para iOS?",
  timestamp: new Date(Date.now() - 10 * 60000).toISOString(),
  agentId: "agent1",
  isAi: false
}, {
  id: "4",
  sender: "Agente IA",
  content: "Sim, desenvolvemos aplicativos para iOS, Android e tamb√©m web apps. Posso explicar nossas metodologias de desenvolvimento, prazos e or√ßamentos. Voc√™ j√° tem alguma ideia espec√≠fica para o aplicativo que gostaria de desenvolver?",
  timestamp: new Date(Date.now() - 9 * 60000).toISOString(),
  agentId: "agent1",
  isAi: true
}, {
  id: "5",
  sender: "+5511999999999",
  content: "Tenho sim. Preciso de um app para gerenciar meu pequeno neg√≥cio.",
  timestamp: new Date(Date.now() - 2 * 60000).toISOString(),
  agentId: "agent1",
  isAi: false
}];

const MOCK_AGENTS: Agent[] = [{
  id: "agent1",
  name: "Atendente Virtual",
  sector: "Atendimento ao Cliente",
  prompt: "Voc√™ √© um atendente virtual especializado em responder d√∫vidas sobre produtos e servi√ßos da empresa.",
  isActive: true,
  createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
  customerId: "customer1",
  franchiseeId: "franchisee1",
  openAiKey: "sk-xxxxxxxxxxxxxxxxxxxx",
  whatsappConnected: true,
  messageCount: 450,
  phoneNumber: "+5511999999999",
  responseTime: 2.3,
  demoUrl: "https://demo.whatsapp.com/agent1"
}, {
  id: "agent2",
  name: "Vendedor Virtual",
  sector: "Vendas",
  prompt: "Voc√™ √© um vendedor virtual especializado em oferecer produtos e servi√ßos da empresa.",
  isActive: true,
  createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
  customerId: "customer2",
  franchiseeId: "franchisee1",
  openAiKey: "sk-xxxxxxxxxxxxxxxxxxxx",
  whatsappConnected: true,
  messageCount: 230,
  phoneNumber: "+5511888888888",
  responseTime: 1.8,
  demoUrl: "https://demo.whatsapp.com/agent2"
}];

const MOCK_TOP_FRANCHISEES: TopFranchisee[] = [
  {
    id: "franchisee1",
    name: "Jo√£o Silva",
    revenue: 45600.75,
    agentCount: 12,
    isActive: true
  },
  {
    id: "franchisee2",
    name: "M√°rcia Oliveira",
    revenue: 38750.30,
    agentCount: 9,
    isActive: true
  },
  {
    id: "franchisee3",
    name: "Roberto Santos",
    revenue: 32340.20,
    agentCount: 8,
    isActive: true
  },
  {
    id: "franchisee4",
    name: "Ana Costa",
    revenue: 28970.35,
    agentCount: 6,
    isActive: false
  },
  {
    id: "franchisee5",
    name: "Carlos Ferreira",
    revenue: 25600.75,
    agentCount: 5,
    isActive: true
  }
];

// Function to generate random variations for mock data
const generateRandomVariation = (baseValue: number, variationPercent: number = 0.1) => {
  const variation = baseValue * variationPercent;
  return baseValue + (Math.random() - 0.5) * 2 * variation;
};

export function useDashboardData() {
  const { user } = useAuth();
  const [analytics, setAnalytics] = useState<Analytics | null>(null);
  const [recentMessages, setRecentMessages] = useState<Message[]>([]);
  const [topAgents, setTopAgents] = useState<Agent[]>([]);
  const [topFranchisees, setTopFranchisees] = useState<TopFranchisee[]>([]);
  const [weeklyMessages, setWeeklyMessages] = useState(MOCK_WEEKLY_MESSAGES);
  const [isLoadingResults, setIsLoadingResults] = useState(false);
  const [isInitialLoading, setIsInitialLoading] = useState(true);

  useEffect(() => {
    if (user) {
      console.log("Dashboard: Loading initial data for user:", user.role);
      
      setTimeout(() => {
        setAnalytics(MOCK_ANALYTICS[user.role]);
        setRecentMessages(MOCK_MESSAGES);
        setTopAgents(MOCK_AGENTS.slice(0, 3));
        
        if (user.role === "admin") {
          setTopFranchisees(MOCK_TOP_FRANCHISEES);
        }
        
        setIsInitialLoading(false);
        console.log("Dashboard: Initial load complete");
      }, 100);
    }
  }, [user]);

  const handleRefreshResults = async () => {
    if (isLoadingResults || !user) return;
    
    console.log("Dashboard: Starting refresh");
    setIsLoadingResults(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const updatedAnalytics = { ...MOCK_ANALYTICS[user.role] };
      
      updatedAnalytics.messageCount = Math.max(1000, Math.floor(generateRandomVariation(updatedAnalytics.messageCount, 0.08)));
      updatedAnalytics.activeAgents = Math.max(1, Math.floor(generateRandomVariation(updatedAnalytics.activeAgents, 0.1)));
      updatedAnalytics.responseTime = Math.max(1, parseFloat(generateRandomVariation(updatedAnalytics.responseTime, 0.15).toFixed(1)));
      updatedAnalytics.tokensUsed = Math.max(10000, Math.floor(generateRandomVariation(updatedAnalytics.tokensUsed, 0.12)));
      
      if (user.role === "admin") {
        updatedAnalytics.monthlyRevenue = Math.max(20000, generateRandomVariation(updatedAnalytics.monthlyRevenue || 0, 0.1));
        updatedAnalytics.franchiseeCount = Math.max(1, Math.floor(generateRandomVariation(updatedAnalytics.franchiseeCount || 0, 0.15)));
        updatedAnalytics.customerCount = Math.max(1, Math.floor(generateRandomVariation(updatedAnalytics.customerCount || 0, 0.12)));
        setTopFranchisees(MOCK_TOP_FRANCHISEES.map(franchisee => ({
          ...franchisee,
          revenue: Math.max(10000, generateRandomVariation(franchisee.revenue, 0.12)),
          agentCount: Math.max(1, Math.floor(generateRandomVariation(franchisee.agentCount, 0.2)))
        })));
      } else if (user.role === "franchisee") {
        updatedAnalytics.installationRevenue = Math.max(1000, generateRandomVariation(updatedAnalytics.installationRevenue || 0, 0.15));
        updatedAnalytics.monthlyRevenue = Math.max(2000, generateRandomVariation(updatedAnalytics.monthlyRevenue || 0, 0.1));
        updatedAnalytics.customerCount = Math.max(1, Math.floor(generateRandomVariation(updatedAnalytics.customerCount || 0, 0.2)));
        updatedAnalytics.activeCustomers = Math.min(updatedAnalytics.customerCount || 0, Math.max(1, Math.floor(generateRandomVariation(updatedAnalytics.activeCustomers || 0, 0.15))));
        setTopAgents(MOCK_AGENTS.map(agent => ({
          ...agent,
          messageCount: Math.max(50, Math.floor(generateRandomVariation(agent.messageCount, 0.2))),
          responseTime: Math.max(1, parseFloat(generateRandomVariation(agent.responseTime, 0.15).toFixed(1)))
        })).slice(0, 3));
      }
      
      setWeeklyMessages(MOCK_WEEKLY_MESSAGES.map(item => ({
        ...item,
        count: Math.max(100, Math.floor(generateRandomVariation(item.count, 0.15)))
      })));
      
      const updatedMessages = MOCK_MESSAGES.map(msg => ({
        ...msg,
        timestamp: new Date(Date.now() - Math.random() * 60 * 60000).toISOString()
      }));
      setRecentMessages(updatedMessages);
      
      setAnalytics(updatedAnalytics);
      console.log("Dashboard: Refresh complete");
    } catch (error) {
      console.error("Dashboard: Refresh error:", error);
    } finally {
      setIsLoadingResults(false);
    }
  };

  return {
    analytics,
    recentMessages,
    topAgents,
    topFranchisees,
    weeklyMessages,
    isLoadingResults,
    isInitialLoading,
    handleRefreshResults
  };
}



================================================================================
ARQUIVO: ./src/hooks/useCreateAgentModal.tsx
================================================================================\n

import { useEffect } from "react";
import { Agent, Customer } from "@/types";
import { Prompt } from "@/types/prompts";
import { useAgentFormData } from "./useAgentFormData";
import { useAgentFormValidation } from "./useAgentFormValidation";
import { useAgentFileHandling } from "./useAgentFileHandling";
import { useAgentTabNavigation } from "./useAgentTabNavigation";

interface UseCreateAgentModalProps {
  editing?: Agent;
  selectedPrompt?: Prompt | null;
  open: boolean;
}

export function useCreateAgentModal({ editing, selectedPrompt, open }: UseCreateAgentModalProps) {
  const {
    formData,
    customerData,
    isNewCustomer,
    selectedCustomerId,
    selectedPromptId,
    setIsNewCustomer,
    handleChange,
    handleCustomerChange,
    handleCustomerSelect,
    handleSwitchChange,
    handlePromptSelect,
  } = useAgentFormData({ editing, selectedPrompt, open });

  const { activeTab, setActiveTab, nextTab, prevTab, resetTab } = useAgentTabNavigation();

  const { validateAgentForm, validateCustomerForm } = useAgentFormValidation({
    formData,
    customerData,
    isNewCustomer,
    selectedCustomerId,
    setActiveTab,
  });

  const { knowledgeBaseFile, handleFileChange, resetFile } = useAgentFileHandling();

  // Reset tab and file when modal opens (only when it actually opens, not on every render)
  useEffect(() => {
    if (open) {
      console.log('Modal opened, resetting to agent tab');
      resetTab();
      resetFile();
    }
  }, [open]); // Remove resetTab and resetFile from dependencies to prevent infinite loops

  // Enhanced file change handler that updates form data
  const handleFileChangeWithFormUpdate = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = handleFileChange(e);
    if (file) {
      // Update form data with file name
      handleChange({ 
        target: { 
          name: 'knowledgeBase', 
          value: file.name 
        } 
      } as React.ChangeEvent<HTMLInputElement>);
    }
  };

  // Enhanced next tab function with proper validation
  const nextTabWithValidation = () => {
    console.log('nextTabWithValidation called, current tab:', activeTab);
    
    if (activeTab !== 'agent') {
      console.log('Not on agent tab, ignoring next tab call');
      return;
    }
    
    const isValid = validateAgentForm();
    console.log('Agent form validation result:', isValid);
    
    if (isValid) {
      console.log('Validation passed, moving to customer tab');
      const moved = nextTab();
      if (moved) {
        console.log('Successfully moved to customer tab');
      } else {
        console.log('Failed to move to customer tab');
      }
    } else {
      console.log('Validation failed, staying on agent tab');
    }
  };

  return {
    activeTab,
    setActiveTab,
    isNewCustomer,
    setIsNewCustomer,
    selectedCustomerId,
    formData,
    customerData,
    knowledgeBaseFile,
    selectedPromptId,
    handleChange,
    handleCustomerChange,
    handleCustomerSelect,
    handleSwitchChange,
    handleFileChange: handleFileChangeWithFormUpdate,
    handlePromptSelect,
    validateAgentForm,
    validateCustomerForm,
    nextTab: nextTabWithValidation,
    prevTab,
  };
}



================================================================================
ARQUIVO: ./src/hooks/use-toast.ts
================================================================================\n

import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 5
const TOAST_REMOVE_DELAY = 3000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================================================
ARQUIVO: ./src/hooks/useAgentActions.tsx
================================================================================\n

import { Agent, Customer } from "@/types";
import { toast } from "sonner";

interface UseAgentActionsProps {
  customers: Customer[];
  setCurrentAgent: (agent: Agent | null) => void;
  setCurrentCustomer: (customer: Customer | null) => void;
  setIsEditModalOpen: (open: boolean) => void;
  setIsWhatsAppModalOpen: (open: boolean) => void;
  setIsCreateModalOpen: (open: boolean) => void;
  setIsPlanLimitModalOpen: (open: boolean) => void;
}

export function useAgentActions({
  customers,
  setCurrentAgent,
  setCurrentCustomer,
  setIsEditModalOpen,
  setIsWhatsAppModalOpen,
  setIsCreateModalOpen,
  setIsPlanLimitModalOpen,
}: UseAgentActionsProps) {
  const handleViewAgent = (agent: Agent) => {
    toast.info(`Visualizando estat√≠sticas do agente ${agent.name}`);
  };

  const handleEditAgent = (agent: Agent) => {
    setCurrentAgent(agent);
    setIsEditModalOpen(true);
  };

  const handleConnectAgent = (agent: Agent) => {
    setCurrentAgent(agent);
    // Find associated customer
    const customer = customers.find(c => c.id === agent.customerId);
    if (customer) {
      setCurrentCustomer(customer);
    }
    setIsWhatsAppModalOpen(true);
    
    // Enhanced notification with more context
    toast.info(
      <div className="flex flex-col gap-2">
        <div className="flex items-center gap-2">
          <div className="w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
          <p className="font-medium">Configura√ß√£o WhatsApp Necess√°ria</p>
        </div>
        <p className="text-sm text-muted-foreground">
          O agente <strong>{agent.name}</strong> precisa ser conectado ao WhatsApp para funcionar corretamente.
        </p>
        <p className="text-xs text-muted-foreground">
          Cliente: {customer?.businessName || 'N/A'}
        </p>
      </div>,
      {
        duration: 5000,
      }
    );
  };
  
  const handleTestAgent = (agent: Agent) => {
    setCurrentAgent(agent);
  };

  const handleCreateAgentClick = (agentLimit: number, agents: Agent[]) => {
    if (agents.length >= agentLimit) {
      setIsPlanLimitModalOpen(true);
    } else {
      setIsCreateModalOpen(true);
    }
  };

  return {
    handleViewAgent,
    handleEditAgent,
    handleConnectAgent,
    handleTestAgent,
    handleCreateAgentClick,
  };
}



================================================================================
ARQUIVO: ./src/hooks/useAgentTabNavigation.tsx
================================================================================\n

import { useState, useCallback } from "react";

export function useAgentTabNavigation() {
  const [activeTab, setActiveTab] = useState("agent");

  const nextTab = useCallback((validateCurrentTab?: () => boolean) => {
    console.log('nextTab called, current tab:', activeTab);
    
    if (validateCurrentTab && !validateCurrentTab()) {
      console.log('Validation failed, staying on current tab');
      return false;
    }
    
    if (activeTab === "agent") {
      console.log('Moving from agent tab to customer tab');
      setActiveTab("customer");
      return true;
    }
    
    return false;
  }, [activeTab]);

  const prevTab = useCallback(() => {
    console.log('prevTab called, current tab:', activeTab);
    
    if (activeTab === "customer") {
      console.log('Moving from customer tab to agent tab');
      setActiveTab("agent");
      return true;
    }
    
    return false;
  }, [activeTab]);

  const resetTab = useCallback(() => {
    console.log('Resetting tab to agent');
    setActiveTab("agent");
  }, []);

  return {
    activeTab,
    setActiveTab,
    nextTab,
    prevTab,
    resetTab,
  };
}



================================================================================
ARQUIVO: ./src/context/AuthContext.tsx
================================================================================\n

import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import { User as SupabaseUser, Session } from "@supabase/supabase-js";
import { supabase } from "@/integrations/supabase/client";
import { User, AuthContextType } from "@/types";

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      if (session?.user) {
        loadUserProfile(session.user);
      } else {
        setLoading(false);
      }
    });

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Auth state change:', event, session?.user?.email);
        setSession(session);
        
        if (event === 'SIGNED_IN' && session?.user) {
          // Defer user profile loading to prevent potential deadlocks
          setTimeout(() => {
            loadUserProfile(session.user);
          }, 0);
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          setLoading(false);
        }
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  const loadUserProfile = async (supabaseUser: SupabaseUser) => {
    try {
      console.log('Loading profile for user:', supabaseUser.email);
      
      // Load user profile and role
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', supabaseUser.id)
        .single();

      if (profileError) {
        console.error('Error loading profile:', profileError);
        setLoading(false);
        return;
      }

      const { data: userRoles, error: rolesError } = await supabase
        .from('user_roles')
        .select('role')
        .eq('user_id', supabaseUser.id);

      if (rolesError) {
        console.error('Error loading user roles:', rolesError);
        setLoading(false);
        return;
      }

      // Get the primary role (first one found, prefer admin > franchisee > customer)
      const rolesPriority = ['admin', 'franchisee', 'customer'];
      const availableRoles = userRoles?.map(ur => ur.role) || [];
      const primaryRole = rolesPriority.find(role => availableRoles.includes(role)) || 'customer';

      console.log('User roles found:', availableRoles, 'Primary role:', primaryRole);

      const userObj: User = {
        id: profile.id,
        name: profile.name,
        email: profile.email,
        role: primaryRole as "admin" | "franchisee" | "customer"
      };

      setUser(userObj);
      console.log('User profile loaded successfully:', userObj);
    } catch (error) {
      console.error('Unexpected error loading user profile:', error);
    } finally {
      setLoading(false);
    }
  };

  const login = async (email: string, password: string) => {
    setLoading(true);
    try {
      console.log('Attempting login for:', email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;

      console.log('Login successful for:', email);
      // User profile will be loaded by the auth state change listener
      return;
    } catch (error) {
      console.error("Login error:", error);
      setLoading(false);
      throw error;
    }
  };

  const logout = async () => {
    try {
      console.log('Logging out user');
      await supabase.auth.signOut();
      setUser(null);
      setSession(null);
      console.log('Logout successful');
    } catch (error) {
      console.error("Logout error:", error);
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};



================================================================================
ARQUIVO: ./src/constants/plans.ts
================================================================================\n

import { Plan } from "@/types";

export const MONTHLY_PLANS: Plan[] = [
  {
    id: "starter-monthly",
    name: "Plano Iniciante",
    description: "Ideal para come√ßar sua jornada com IA",
    price: 149.9,
    billingCycle: "monthly",
    agentLimit: 3,
    features: [
      "At√© 3 agentes",
      "Suporte por email",
      "Painel administrativo b√°sico",
      "Integra√ß√£o com WhatsApp"
    ]
  },
  {
    id: "intermediate-monthly",
    name: "Plano Intermedi√°rio",
    description: "Para neg√≥cios em crescimento",
    price: 347,
    billingCycle: "monthly",
    agentLimit: 6,
    recommended: true,
    features: [
      "At√© 6 agentes",
      "Suporte priorit√°rio",
      "Relat√≥rios avan√ßados",
      "Personaliza√ß√£o de agentes",
      "Integra√ß√£o com WhatsApp"
    ]
  },
  {
    id: "professional-monthly",
    name: "Plano Profissional",
    description: "Solu√ß√£o completa para grandes opera√ß√µes",
    price: 997,
    billingCycle: "monthly",
    agentLimit: 20,
    features: [
      "At√© 20 agentes",
      "Suporte priorit√°rio 24/7",
      "Relat√≥rios personalizados",
      "API avan√ßada",
      "Integra√ß√£o com WhatsApp",
      "Treinamento da equipe"
    ]
  }
];

export const ANNUAL_PLANS: Plan[] = [
  {
    id: "starter-annual",
    name: "Plano Iniciante Anual",
    description: "Ideal para come√ßar sua jornada com IA",
    price: 1497,
    billingCycle: "annual",
    agentLimit: 3,
    features: [
      "At√© 3 agentes",
      "Suporte por email",
      "Painel administrativo b√°sico",
      "Integra√ß√£o com WhatsApp",
      "Economia de ~20% em rela√ß√£o ao mensal"
    ]
  },
  {
    id: "intermediate-annual",
    name: "Plano Intermedi√°rio Anual",
    description: "Para neg√≥cios em crescimento",
    price: 3497,
    billingCycle: "annual",
    agentLimit: 6,
    recommended: true,
    features: [
      "At√© 6 agentes",
      "Suporte priorit√°rio",
      "Relat√≥rios avan√ßados",
      "Personaliza√ß√£o de agentes",
      "Integra√ß√£o com WhatsApp",
      "Economia de ~20% em rela√ß√£o ao mensal"
    ]
  },
  {
    id: "professional-annual",
    name: "Plano Profissional Anual",
    description: "Solu√ß√£o completa para grandes opera√ß√µes",
    price: 9997,
    billingCycle: "annual",
    agentLimit: 20,
    features: [
      "At√© 20 agentes",
      "Suporte priorit√°rio 24/7",
      "Relat√≥rios personalizados",
      "API avan√ßada",
      "Integra√ß√£o com WhatsApp",
      "Treinamento da equipe",
      "Economia de ~20% em rela√ß√£o ao mensal"
    ]
  }
];

export const ALL_PLANS = [...MONTHLY_PLANS, ...ANNUAL_PLANS];

export const getPlanById = (id: string): Plan | undefined => {
  return ALL_PLANS.find(plan => plan.id === id);
};

export const formatCurrency = (value: number): string => {
  return value.toLocaleString('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  });
};



================================================================================
ARQUIVO: ./src/integrations/supabase/types.ts
================================================================================\n
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instanciate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "12.2.3 (519615d)"
  }
  public: {
    Tables: {
      agents: {
        Row: {
          created_at: string | null
          customer_id: string
          demo_url: string | null
          enable_voice_recognition: boolean | null
          franchisee_id: string
          id: string
          is_active: boolean | null
          knowledge_base: string | null
          message_count: number | null
          name: string
          open_ai_key: string
          phone_number: string | null
          prompt: string | null
          response_time: number | null
          sector: string
          updated_at: string | null
          whatsapp_connected: boolean | null
        }
        Insert: {
          created_at?: string | null
          customer_id: string
          demo_url?: string | null
          enable_voice_recognition?: boolean | null
          franchisee_id: string
          id?: string
          is_active?: boolean | null
          knowledge_base?: string | null
          message_count?: number | null
          name: string
          open_ai_key: string
          phone_number?: string | null
          prompt?: string | null
          response_time?: number | null
          sector: string
          updated_at?: string | null
          whatsapp_connected?: boolean | null
        }
        Update: {
          created_at?: string | null
          customer_id?: string
          demo_url?: string | null
          enable_voice_recognition?: boolean | null
          franchisee_id?: string
          id?: string
          is_active?: boolean | null
          knowledge_base?: string | null
          message_count?: number | null
          name?: string
          open_ai_key?: string
          phone_number?: string | null
          prompt?: string | null
          response_time?: number | null
          sector?: string
          updated_at?: string | null
          whatsapp_connected?: boolean | null
        }
        Relationships: []
      }
      ai_interaction_logs: {
        Row: {
          agent_id: string | null
          ai_response: string
          conversation_id: string | null
          created_at: string
          id: string
          model_used: string | null
          response_time_ms: number | null
          tokens_used: number | null
          user_message: string
        }
        Insert: {
          agent_id?: string | null
          ai_response: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          model_used?: string | null
          response_time_ms?: number | null
          tokens_used?: number | null
          user_message: string
        }
        Update: {
          agent_id?: string | null
          ai_response?: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          model_used?: string | null
          response_time_ms?: number | null
          tokens_used?: number | null
          user_message?: string
        }
        Relationships: [
          {
            foreignKeyName: "ai_interaction_logs_agent_id_fkey"
            columns: ["agent_id"]
            isOneToOne: false
            referencedRelation: "ai_whatsapp_agents"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "ai_interaction_logs_conversation_id_fkey"
            columns: ["conversation_id"]
            isOneToOne: false
            referencedRelation: "whatsapp_conversations"
            referencedColumns: ["id"]
          },
        ]
      }
      ai_whatsapp_agents: {
        Row: {
          agent_id: string
          auto_response: boolean | null
          created_at: string
          evolution_config_id: string | null
          id: string
          is_active: boolean | null
          model: string | null
          openai_api_key: string | null
          phone_number: string
          response_delay_seconds: number | null
          system_prompt: string | null
          updated_at: string
        }
        Insert: {
          agent_id: string
          auto_response?: boolean | null
          created_at?: string
          evolution_config_id?: string | null
          id?: string
          is_active?: boolean | null
          model?: string | null
          openai_api_key?: string | null
          phone_number: string
          response_delay_seconds?: number | null
          system_prompt?: string | null
          updated_at?: string
        }
        Update: {
          agent_id?: string
          auto_response?: boolean | null
          created_at?: string
          evolution_config_id?: string | null
          id?: string
          is_active?: boolean | null
          model?: string | null
          openai_api_key?: string | null
          phone_number?: string
          response_delay_seconds?: number | null
          system_prompt?: string | null
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "ai_whatsapp_agents_evolution_config_id_fkey"
            columns: ["evolution_config_id"]
            isOneToOne: false
            referencedRelation: "evolution_api_configs"
            referencedColumns: ["id"]
          },
        ]
      }
      customers: {
        Row: {
          agent_count: number | null
          business_name: string
          contact_phone: string | null
          created_at: string | null
          document: string | null
          email: string
          franchisee_id: string
          id: string
          logo: string | null
          name: string
          portal_url: string | null
          role: string | null
          updated_at: string | null
        }
        Insert: {
          agent_count?: number | null
          business_name: string
          contact_phone?: string | null
          created_at?: string | null
          document?: string | null
          email: string
          franchisee_id: string
          id?: string
          logo?: string | null
          name: string
          portal_url?: string | null
          role?: string | null
          updated_at?: string | null
        }
        Update: {
          agent_count?: number | null
          business_name?: string
          contact_phone?: string | null
          created_at?: string | null
          document?: string | null
          email?: string
          franchisee_id?: string
          id?: string
          logo?: string | null
          name?: string
          portal_url?: string | null
          role?: string | null
          updated_at?: string | null
        }
        Relationships: []
      }
      evolution_api_configs: {
        Row: {
          created_at: string
          franchisee_id: string
          global_config_id: string | null
          id: string
          instance_name: string
          qr_code: string | null
          qr_code_expires_at: string | null
          status: string | null
          updated_at: string
          webhook_url: string | null
        }
        Insert: {
          created_at?: string
          franchisee_id: string
          global_config_id?: string | null
          id?: string
          instance_name: string
          qr_code?: string | null
          qr_code_expires_at?: string | null
          status?: string | null
          updated_at?: string
          webhook_url?: string | null
        }
        Update: {
          created_at?: string
          franchisee_id?: string
          global_config_id?: string | null
          id?: string
          instance_name?: string
          qr_code?: string | null
          qr_code_expires_at?: string | null
          status?: string | null
          updated_at?: string
          webhook_url?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "evolution_api_configs_global_config_id_fkey"
            columns: ["global_config_id"]
            isOneToOne: false
            referencedRelation: "evolution_global_configs"
            referencedColumns: ["id"]
          },
        ]
      }
      evolution_global_configs: {
        Row: {
          api_key: string
          api_url: string
          created_at: string
          global_api_key: string | null
          id: string
          is_active: boolean
          manager_url: string | null
          name: string
          updated_at: string
        }
        Insert: {
          api_key: string
          api_url: string
          created_at?: string
          global_api_key?: string | null
          id?: string
          is_active?: boolean
          manager_url?: string | null
          name: string
          updated_at?: string
        }
        Update: {
          api_key?: string
          api_url?: string
          created_at?: string
          global_api_key?: string | null
          id?: string
          is_active?: boolean
          manager_url?: string | null
          name?: string
          updated_at?: string
        }
        Relationships: []
      }
      profiles: {
        Row: {
          created_at: string
          email: string
          id: string
          name: string
          updated_at: string
        }
        Insert: {
          created_at?: string
          email: string
          id: string
          name: string
          updated_at?: string
        }
        Update: {
          created_at?: string
          email?: string
          id?: string
          name?: string
          updated_at?: string
        }
        Relationships: []
      }
      user_roles: {
        Row: {
          created_at: string
          id: string
          role: Database["public"]["Enums"]["app_role"]
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          role: Database["public"]["Enums"]["app_role"]
          user_id: string
        }
        Update: {
          created_at?: string
          id?: string
          role?: Database["public"]["Enums"]["app_role"]
          user_id?: string
        }
        Relationships: []
      }
      whatsapp_conversations: {
        Row: {
          agent_id: string | null
          contact_name: string | null
          contact_number: string
          created_at: string
          evolution_config_id: string | null
          id: string
          is_active: boolean | null
          last_message_at: string | null
          updated_at: string
        }
        Insert: {
          agent_id?: string | null
          contact_name?: string | null
          contact_number: string
          created_at?: string
          evolution_config_id?: string | null
          id?: string
          is_active?: boolean | null
          last_message_at?: string | null
          updated_at?: string
        }
        Update: {
          agent_id?: string | null
          contact_name?: string | null
          contact_number?: string
          created_at?: string
          evolution_config_id?: string | null
          id?: string
          is_active?: boolean | null
          last_message_at?: string | null
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "whatsapp_conversations_agent_id_fkey"
            columns: ["agent_id"]
            isOneToOne: false
            referencedRelation: "ai_whatsapp_agents"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "whatsapp_conversations_evolution_config_id_fkey"
            columns: ["evolution_config_id"]
            isOneToOne: false
            referencedRelation: "evolution_api_configs"
            referencedColumns: ["id"]
          },
        ]
      }
      whatsapp_messages: {
        Row: {
          ai_response_generated: boolean | null
          content: string
          conversation_id: string | null
          created_at: string
          id: string
          is_from_me: boolean
          media_url: string | null
          message_id: string
          message_type: string | null
          sender_type: string
          timestamp: string
        }
        Insert: {
          ai_response_generated?: boolean | null
          content: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          is_from_me: boolean
          media_url?: string | null
          message_id: string
          message_type?: string | null
          sender_type: string
          timestamp?: string
        }
        Update: {
          ai_response_generated?: boolean | null
          content?: string
          conversation_id?: string | null
          created_at?: string
          id?: string
          is_from_me?: boolean
          media_url?: string | null
          message_id?: string
          message_type?: string | null
          sender_type?: string
          timestamp?: string
        }
        Relationships: [
          {
            foreignKeyName: "whatsapp_messages_conversation_id_fkey"
            columns: ["conversation_id"]
            isOneToOne: false
            referencedRelation: "whatsapp_conversations"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      debug_user_status: {
        Args: Record<PropertyKey, never>
        Returns: {
          current_user_id: string
          has_admin_role: boolean
          user_roles_count: number
        }[]
      }
      get_active_ai_agents: {
        Args: { config_id_param: string }
        Returns: {
          id: string
          agent_id: string
          phone_number: string
          model: string
          system_prompt: string
          auto_response: boolean
        }[]
      }
      get_active_evolution_config: {
        Args: { franchisee_id_param: string }
        Returns: {
          id: string
          instance_name: string
          api_url: string
          status: string
        }[]
      }
      has_role: {
        Args: {
          _user_id: string
          _role: Database["public"]["Enums"]["app_role"]
        }
        Returns: boolean
      }
      is_admin: {
        Args: { user_id: string }
        Returns: boolean
      }
    }
    Enums: {
      app_role: "admin" | "franchisee" | "customer"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      app_role: ["admin", "franchisee", "customer"],
    },
  },
} as const



================================================================================
ARQUIVO: ./src/integrations/supabase/client.ts
================================================================================\n

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://kzxiqdakyfxtyyuybwtl.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt6eGlxZGFreWZ4dHl5dXlid3RsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0NTYwNjksImV4cCI6MjA2NDAzMjA2OX0.8GwAjmdwup-i7gfhHKAxKi2Uufr3JAisKj5jg0qIALk'

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
})



================================================================================
ARQUIVO: ./src/main.tsx
================================================================================\n

import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

// Add viewport meta tag for mobile responsiveness
const meta = document.createElement('meta');
meta.name = 'viewport';
meta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';
document.getElementsByTagName('head')[0].appendChild(meta);

createRoot(document.getElementById("root")!).render(<App />);



================================================================================
ARQUIVO: ./src/vite-env.d.ts
================================================================================\n
/// <reference types="vite/client" />



================================================================================
ARQUIVO: ./src/types/prospecting.ts
================================================================================\n

export interface ProspectingHistory {
  franchiseeId: string;
  niche: string;
  city: string;
  state: string;
  usedLeadIds: string[];
  lastSearchAt: string;
}

export interface SearchFilters {
  city: string;
  state: string;
  niche: string;
  quantity: number;
}

export interface Lead {
  id: string;
  name: string;
  niche: string;
  address: string;
  phone: string;
  email: string | null;
  selected: boolean;
}

// Estados brasileiros com siglas
export const BRAZILIAN_STATES = [
  { code: "AC", name: "Acre" },
  { code: "AL", name: "Alagoas" },
  { code: "AP", name: "Amap√°" },
  { code: "AM", name: "Amazonas" },
  { code: "BA", name: "Bahia" },
  { code: "CE", name: "Cear√°" },
  { code: "DF", name: "Distrito Federal" },
  { code: "ES", name: "Esp√≠rito Santo" },
  { code: "GO", name: "Goi√°s" },
  { code: "MA", name: "Maranh√£o" },
  { code: "MT", name: "Mato Grosso" },
  { code: "MS", name: "Mato Grosso do Sul" },
  { code: "MG", name: "Minas Gerais" },
  { code: "PA", name: "Par√°" },
  { code: "PB", name: "Para√≠ba" },
  { code: "PR", name: "Paran√°" },
  { code: "PE", name: "Pernambuco" },
  { code: "PI", name: "Piau√≠" },
  { code: "RJ", name: "Rio de Janeiro" },
  { code: "RN", name: "Rio Grande do Norte" },
  { code: "RS", name: "Rio Grande do Sul" },
  { code: "RO", name: "Rond√¥nia" },
  { code: "RR", name: "Roraima" },
  { code: "SC", name: "Santa Catarina" },
  { code: "SP", name: "S√£o Paulo" },
  { code: "SE", name: "Sergipe" },
  { code: "TO", name: "Tocantins" }
];

// Mapeamento de cidades para estados (exemplo com principais cidades)
export const CITY_TO_STATE_MAP: Record<string, string> = {
  // S√£o Paulo
  "s√£o paulo": "SP",
  "campinas": "SP",
  "santos": "SP",
  "ribeir√£o preto": "SP",
  "sorocaba": "SP",
  "s√£o jos√© dos campos": "SP",
  "osasco": "SP",
  "santo andr√©": "SP",
  "s√£o bernardo do campo": "SP",
  
  // Rio de Janeiro
  "rio de janeiro": "RJ",
  "niter√≥i": "RJ",
  "nova igua√ßu": "RJ",
  "duque de caxias": "RJ",
  "campos dos goytacazes": "RJ",
  "petr√≥polis": "RJ",
  "volta redonda": "RJ",
  
  // Minas Gerais
  "belo horizonte": "MG",
  "uberl√¢ndia": "MG",
  "contagem": "MG",
  "juiz de fora": "MG",
  "betim": "MG",
  "montes claros": "MG",
  "ribeir√£o das neves": "MG",
  
  // Bahia
  "salvador": "BA",
  "feira de santana": "BA",
  "vit√≥ria da conquista": "BA",
  "cama√ßari": "BA",
  "juazeiro": "BA",
  "ilh√©us": "BA",
  
  // Paran√°
  "curitiba": "PR",
  "londrina": "PR",
  "maring√°": "PR",
  "ponta grossa": "PR",
  "cascavel": "PR",
  "s√£o jos√© dos pinhais": "PR",
  
  // Rio Grande do Sul
  "porto alegre": "RS",
  "caxias do sul": "RS",
  "pelotas": "RS",
  "canoas": "RS",
  "santa maria": "RS",
  "gravata√≠": "RS",
  
  // Goi√°s
  "goi√¢nia": "GO",
  "aparecida de goi√¢nia": "GO",
  "an√°polis": "GO",
  "rio verde": "GO",
  
  // Cear√°
  "fortaleza": "CE",
  "caucaia": "CE",
  "juazeiro do norte": "CE",
  "maracana√∫": "CE",
  
  // Distrito Federal
  "bras√≠lia": "DF",
  
  // Esp√≠rito Santo
  "vit√≥ria": "ES",
  "vila velha": "ES",
  "cariacica": "ES",
  "serra": "ES",
  
  // Amazonas
  "manaus": "AM",
  
  // Par√°
  "bel√©m": "PA",
  "ananindeua": "PA",
  "santar√©m": "PA",
  
  // Maranh√£o
  "s√£o lu√≠s": "MA",
  "imperatriz": "MA",
  
  // Pernambuco
  "recife": "PE",
  "jaboat√£o dos guararapes": "PE",
  "olinda": "PE",
  "caruaru": "PE",
  
  // Santa Catarina
  "florian√≥polis": "SC",
  "joinville": "SC",
  "blumenau": "SC",
  "s√£o jos√©": "SC"
};



================================================================================
ARQUIVO: ./src/types/index.ts
================================================================================\n

import { ReactNode } from "react";

export type UserRole = "admin" | "franchisee" | "customer";

export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
}

export interface Admin extends User {
  role: "admin";
}

export interface Franchisee extends User {
  role: "franchisee";
  agentCount: number;
  revenue: number;
  isActive: boolean;
  createdAt: string;
  customerCount: number;
  planId?: string; // Reference to the plan
  planType?: "monthly" | "annual";
  planExpiresAt?: string;
}

export interface Customer extends User {
  role: "customer";
  businessName: string;
  logo?: string;
  franchiseeId: string;
  agentCount: number;
  createdAt: string;
  document?: string; // CNPJ or CPF
  contactPhone?: string; // WhatsApp number for contact
  portalUrl?: string; // URL for customer portal
  password?: string; // Temporary password for first access
}

export interface Agent {
  id: string;
  name: string;
  sector: string;
  prompt: string;
  isActive: boolean;
  createdAt: string;
  customerId: string;
  franchiseeId: string;
  openAiKey: string;
  whatsappConnected: boolean;
  qrCode?: string;
  messageCount: number;
  phoneNumber?: string;
  responseTime: number;
  demoUrl?: string;
  enableVoiceRecognition?: boolean;
  knowledgeBase?: string;
}

export interface Plan {
  id: string;
  name: string;
  description?: string;
  price: number;
  billingCycle: "monthly" | "annual";
  agentLimit: number;
  features?: string[];
  recommended?: boolean;
}

export interface Message {
  id: string;
  sender: string;
  content: string;
  timestamp: string;
  agentId: string;
  isAi: boolean;
}

export interface Analytics {
  messageCount: number;
  activeAgents: number;
  totalAgents: number;
  responseTime: number;
  tokensUsed: number;
  franchiseeCount?: number;
  customerCount?: number;
  activeCustomers?: number;
  revenue?: number;
  monthlyRevenue?: number;
  installationRevenue?: number;
}

export interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  loading: boolean;
}

// Interface for Sidebar navigation items
export interface NavItem {
  label: string;
  icon: React.ComponentType<any>; // Changed from ReactNode to ComponentType
  href: string;
}

// Interfaces for WhatsApp connections (Evolution API)
export interface WhatsAppConnection {
  id: string;
  name: string;
  phoneNumber: string;
  customerId: string;
  customerName: string;
  status: "connected" | "disconnected" | "pending";
  lastActive: string;
  messageCount: number;
}

export interface WhatsAppSession {
  id: string;
  connectionId: string;
  sessionName: string;
  jwt?: string;
  qrCode?: string;
  state: "CONNECTING" | "CONNECTED" | "DISCONNECTED" | "TIMEOUT" | "CONFLICT";
  createdAt: string;
  updatedAt: string;
}

// Interface para configura√ß√£o do agente de IA
export interface AIAgentConfig {
  id: string;
  name: string;
  instructions: string;
  openAIApiKey?: string;
  enableVoice: boolean;
  voiceModel?: string;
  personalityType: "informative" | "friendly" | "professional" | "creative";
  knowledgeBase?: string;
  maxResponseTokens: number;
  temperature: number;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
  messageCount: number;
  avgResponseTime: number;
  associatedWhatsAppId?: string;
}

// Alias para compatibilidade com o componente AIAgentConfig
export type AgentConfig = AIAgentConfig;

// Interface para configura√ß√µes de voz com Eleven Labs
export interface ElevenLabsVoiceConfig {
  voiceId: string;
  modelId: string;
  stability: number;
  similarityBoost: number;
  style: number;
  speakerBoost: boolean;
}

export interface ElevenLabsVoice {
  id: string;
  name: string;
  preview_url: string;
  category: string;
  description?: string;
  labels?: Record<string, string>;
}

// Add new types for WhatsApp connection flow
export interface WhatsAppConnectionStatus {
  status: "pending" | "connected" | "failed";
  qrCodeUrl?: string;
  agentId: string;
  customerId: string;
  timestamp: string;
}

export interface CustomerPortalAccess {
  url: string;
  username: string;
  password: string;
  customerId: string;
}

// New interfaces for video lessons
export interface VideoLesson {
  id: string;
  title: string;
  description: string;
  youtubeUrl: string;
  thumbnailUrl: string;
  createdAt: string;
  updatedAt: string;
  attachments: LessonAttachment[];
}

export interface LessonAttachment {
  id: string;
  lessonId: string;
  name: string;
  fileUrl: string;
  fileType: string;
  fileSize: number;
  createdAt: string;
}



================================================================================
ARQUIVO: ./src/types/campaign.ts
================================================================================\n

export interface Campaign {
  id: string;
  name: string;
  totalContacts: number;
  sentMessages: number;
  failedMessages: number;
  status: "running" | "paused" | "completed";
  startedAt: string | null;
  completedAt: string | null;
}



================================================================================
ARQUIVO: ./src/types/prompts.ts
================================================================================\n

export interface Prompt {
  id: string;
  name: string;
  text: string;
  niche: string;
  createdAt: string;
  isDefault?: boolean;
}



================================================================================
ARQUIVO: ./src/types/whatsapp.ts
================================================================================\n

export interface WhatsAppConnection {
  id: string;
  name: string;
  phoneNumber: string;
  customerId: string;
  customerName: string;
  status: "connected" | "disconnected" | "pending";
  lastActive: string;
  messageCount: number;
}

export interface Customer {
  id: string;
  name: string;
}



================================================================================
ARQUIVO: ./src/pages/admin/Lessons.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { VideoUploader } from "@/components/lessons/VideoUploader";
import { LessonsTable } from "@/components/lessons/LessonsTable";
import { Plus } from "lucide-react";
import { VideoLesson } from "@/types";

// Mock data for lessons
const MOCK_LESSONS: VideoLesson[] = [
  {
    id: "1",
    title: "Introdu√ß√£o √† Plataforma",
    description: "Uma aula introdut√≥ria sobre como utilizar a plataforma de vendas.",
    youtubeUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    thumbnailUrl: "https://images.unsplash.com/photo-1588702547923-7093a6c3ba33?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-05-20T14:30:00Z",
    updatedAt: "2023-05-20T14:30:00Z",
    attachments: [
      {
        id: "a1",
        lessonId: "1",
        name: "Manual da Plataforma.pdf",
        fileUrl: "/documents/manual.pdf",
        fileType: "application/pdf",
        fileSize: 2458000,
        createdAt: "2023-05-20T14:35:00Z"
      }
    ]
  },
  {
    id: "2",
    title: "T√©cnicas Avan√ßadas de Vendas",
    description: "Aprenda t√©cnicas de vendas que aumentar√£o sua taxa de convers√£o.",
    youtubeUrl: "https://www.youtube.com/watch?v=9bZkp7q19f0",
    thumbnailUrl: "https://images.unsplash.com/photo-1553877522-43269d4ea984?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-06-15T10:00:00Z",
    updatedAt: "2023-06-16T11:20:00Z",
    attachments: [
      {
        id: "a2",
        lessonId: "2",
        name: "Slides da Apresenta√ß√£o.pptx",
        fileUrl: "/documents/slides.pptx",
        fileType: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        fileSize: 3580000,
        createdAt: "2023-06-15T10:05:00Z"
      },
      {
        id: "a3",
        lessonId: "2",
        name: "Planilha de Exemplos.xlsx",
        fileUrl: "/documents/exemplos.xlsx",
        fileType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        fileSize: 1240000,
        createdAt: "2023-06-15T10:10:00Z"
      }
    ]
  }
];

export default function Lessons() {
  const [activeTab, setActiveTab] = useState("todas");
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [lessons, setLessons] = useState<VideoLesson[]>(MOCK_LESSONS);

  const handleAddLesson = (newLesson: VideoLesson) => {
    setLessons([newLesson, ...lessons]);
    setShowUploadForm(false);
  };

  return (
    <DashboardLayout title="Aulas">
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className="text-2xl font-semibold">Gerenciamento de Videoaulas</h2>
          {!showUploadForm && (
            <Button 
              onClick={() => setShowUploadForm(true)}
              className="flex items-center gap-1"
            >
              <Plus className="h-4 w-4" />
              Nova Aula
            </Button>
          )}
        </div>

        {showUploadForm ? (
          <Card className="border border-gray-200 dark:border-gray-800 shadow-sm">
            <CardContent className="p-6">
              <VideoUploader 
                onSubmit={handleAddLesson} 
                onCancel={() => setShowUploadForm(false)} 
              />
            </CardContent>
          </Card>
        ) : (
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList>
              <TabsTrigger value="todas">Todas as Aulas</TabsTrigger>
              <TabsTrigger value="recentes">Adicionadas Recentemente</TabsTrigger>
            </TabsList>

            <TabsContent value="todas" className="pt-4">
              <LessonsTable lessons={lessons} />
            </TabsContent>
            
            <TabsContent value="recentes" className="pt-4">
              <LessonsTable 
                lessons={lessons.sort((a, b) => 
                  new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
                ).slice(0, 5)} 
              />
            </TabsContent>
          </Tabs>
        )}
      </div>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/admin/Franchisees.tsx
================================================================================\n
// src/pages/admin/Franchisees.tsx

import { useState, useEffect } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Search, Building2 } from "lucide-react";
import FranchiseeCard from "@/components/franchisees/FranchiseeCard";
import { Franchisee } from "@/types";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { franchiseeService } from "@/services/franchiseeService";
import { Skeleton } from "@/components/ui/skeleton";
import { Card, CardHeader, CardContent } from "@/components/ui/card";

export default function Franchisees() {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [franchisees, setFranchisees] = useState<Franchisee[]>([]);
  
  const [searchTerm, setSearchTerm] = useState("");
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingFranchisee, setEditingFranchisee] = useState<Franchisee | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    isActive: true
  });

  useEffect(() => {
    const fetchFranchisees = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await franchiseeService.getFranchisees();
        setFranchisees(data);
      } catch (e) {
        setError("Falha ao carregar dados dos franqueados. Verifique se voc√™ tem permiss√£o de administrador.");
        console.error(e);
      } finally {
        setIsLoading(false);
      }
    };

    fetchFranchisees();
  }, []);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value.toLowerCase());
  };

  const filteredFranchisees = franchisees.filter(franchisee => 
    franchisee.name.toLowerCase().includes(searchTerm) ||
    franchisee.email.toLowerCase().includes(searchTerm)
  );

  const handleViewFranchisee = (franchisee: Franchisee) => {
    toast.info(`Visualizando detalhes de ${franchisee.name}`);
    // Futuramente, isso navegaria para /admin/franchisees/${franchisee.id}
  };

  const handleEditFranchisee = (franchisee: Franchisee) => {
    setEditingFranchisee(franchisee);
    setFormData({
      name: franchisee.name,
      email: franchisee.email,
      isActive: franchisee.isActive
    });
    setIsEditModalOpen(true);
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleAddSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Implementar a chamada ao servi√ßo para criar um franqueado no Supabase
    // Exemplo: await franchiseeService.createFranchisee(formData);
    toast.success(`Funcionalidade de adicionar franqueado a ser implementada.`);
    setIsAddModalOpen(false);
  };

  const handleEditSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // TODO: Implementar a chamada ao servi√ßo para atualizar um franqueado no Supabase
    // Exemplo: await franchiseeService.updateFranchisee(editingFranchisee.id, formData);
    toast.success(`Funcionalidade de editar franqueado a ser implementada.`);
    setIsEditModalOpen(false);
  };

  const renderSkeleton = () => (
    Array.from({ length: 3 }).map((_, index) => (
      <Card key={index}>
        <CardHeader className="p-4 flex flex-row items-center justify-between">
            <div className="flex items-center space-x-3">
                <Skeleton className="w-9 h-9 rounded-full" />
                <div className="space-y-2">
                    <Skeleton className="h-4 w-[150px]" />
                    <Skeleton className="h-3 w-[120px]" />
                </div>
            </div>
            <Skeleton className="h-6 w-16 rounded-full" />
        </CardHeader>
        <CardContent className="p-4 space-y-4">
            <div className="grid grid-cols-2 gap-4">
                <Skeleton className="h-4 w-20" />
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-4 w-28" />
                <Skeleton className="h-4 w-20" />
            </div>
            <div className="flex space-x-2 pt-2">
                <Skeleton className="h-9 flex-1 rounded-md" />
                <Skeleton className="h-9 flex-1 rounded-md" />
            </div>
        </CardContent>
      </Card>
    ))
  );

  const renderContent = () => {
    if (isLoading) {
      return (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-4">
          {renderSkeleton()}
        </div>
      );
    }

    if (error) {
      return (
        <div className="text-center py-10 text-destructive bg-destructive/10 border border-destructive/20 rounded-lg">
          <p className="font-semibold">Erro ao carregar dados</p>
          <p className="text-sm mt-1">{error}</p>
          <Button variant="outline" onClick={() => window.location.reload()} className="mt-4">
            Tentar Novamente
          </Button>
        </div>
      );
    }

    if (filteredFranchisees.length > 0) {
      return (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-4">
          {filteredFranchisees.map(franchisee => (
            <FranchiseeCard 
              key={franchisee.id} 
              franchisee={franchisee} 
              onView={handleViewFranchisee}
              onEdit={handleEditFranchisee}
            />
          ))}
        </div>
      );
    }

    return (
      <div className="flex flex-col items-center justify-center h-64 border-2 border-dashed rounded-lg">
        <Building2 size={48} className="text-muted-foreground/30 mb-4" />
        <p className="text-muted-foreground mb-2 font-semibold">
          {searchTerm ? "Nenhum franqueado encontrado." : "Nenhum franqueado cadastrado."}
        </p>
        {searchTerm && (
          <Button variant="link" onClick={() => setSearchTerm("")}>
            Limpar busca
          </Button>
        )}
      </div>
    );
  };

  return (
    <DashboardLayout title="Franqueados">
      <div className="space-y-4 md:space-y-6">
        <div className="flex flex-col sm:flex-row items-center justify-between gap-3">
          <div className="relative w-full sm:w-auto">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Buscar franqueados..."
              className="w-full sm:w-[250px] md:w-[300px] pl-8"
              value={searchTerm}
              onChange={handleSearch}
              disabled={isLoading}
            />
          </div>
          <Button onClick={() => setIsAddModalOpen(true)} className="w-full sm:w-auto">
            <PlusCircle className="mr-2 h-4 w-4" />
            Novo Franqueado
          </Button>
        </div>

        {renderContent()}
      </div>

      {/* Add Franchisee Modal */}
      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent className="sm:max-w-md max-w-[90vw]">
          <DialogHeader>
            <DialogTitle>Adicionar Novo Franqueado</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleAddSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Nome</Label>
              <Input
                id="name"
                name="name"
                placeholder="Nome do franqueado"
                value={formData.name}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="email@exemplo.com"
                value={formData.email}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="flex items-center space-x-2">
              <input 
                type="checkbox" 
                id="isActive" 
                name="isActive"
                checked={formData.isActive}
                onChange={handleFormChange}
                className="h-4 w-4 rounded border-gray-300"
              />
              <Label htmlFor="isActive">Ativo</Label>
            </div>
            <DialogFooter className="flex-col sm:flex-row gap-2 sm:gap-0">
              <Button variant="outline" type="button" onClick={() => setIsAddModalOpen(false)} className="w-full sm:w-auto">
                Cancelar
              </Button>
              <Button type="submit" className="w-full sm:w-auto">Adicionar</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Edit Franchisee Modal */}
      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>
        <DialogContent className="sm:max-w-md max-w-[90vw]">
          <DialogHeader>
            <DialogTitle>Editar Franqueado</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleEditSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="edit-name">Nome</Label>
              <Input
                id="edit-name"
                name="name"
                placeholder="Nome do franqueado"
                value={formData.name}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="edit-email">Email</Label>
              <Input
                id="edit-email"
                name="email"
                type="email"
                placeholder="email@exemplo.com"
                value={formData.email}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="flex items-center space-x-2">
              <input 
                type="checkbox" 
                id="edit-isActive" 
                name="isActive"
                checked={formData.isActive}
                onChange={handleFormChange}
                className="h-4 w-4 rounded border-gray-300"
              />
              <Label htmlFor="edit-isActive">Ativo</Label>
            </div>
            <DialogFooter className="flex-col sm:flex-row gap-2 sm:gap-0">
              <Button variant="outline" type="button" onClick={() => setIsEditModalOpen(false)} className="w-full sm:w-auto">
                Cancelar
              </Button>
              <Button type="submit" className="w-full sm:w-auto">Salvar Altera√ß√µes</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}


================================================================================
ARQUIVO: ./src/pages/admin/Analytics.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { StatCard } from "@/components/ui/stat-card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { MessageCircle, Zap, Clock, Bot } from "lucide-react";
import { DashboardStatCard } from "@/components/ui/dashboard-stat-card";
import { BillingChart } from "@/components/analytics/BillingChart";
import { FranchiseeTable } from "@/components/analytics/FranchiseeTable";

// Mock data for analytics
const MOCK_DAILY_MESSAGES = [
  { day: "dom", value: 4580 },
  { day: "seg", value: 5240 },
  { day: "ter", value: 4920 },
  { day: "qua", value: 5100 },
  { day: "qui", value: 4800 },
  { day: "sex", value: 5300 },
  { day: "sab", value: 5680 }
];

const MOCK_MONTHLY_REVENUE = [
  { month: "jan", value: 8740 },
  { month: "fev", value: 9450 },
  { month: "mar", value: 10200 },
  { month: "abr", value: 11980 }
];

const MOCK_FRANCHISEES = [
  {
    name: "Jo√£o Silva",
    agents: 8,
    revenue: "R$ 1.497,00"
  },
  {
    name: "Ana Souza",
    agents: 12,
    revenue: "R$ 2.992,50"
  },
  {
    name: "Carlos Mendes",
    agents: 5,
    revenue: "R$ 1.048,70"
  },
  {
    name: "Patricia Lima",
    agents: 15,
    revenue: "R$ 3.745,20"
  },
  {
    name: "Roberto Alves",
    agents: 2,
    revenue: "R$ 297,00"
  }
];

export default function Analytics() {
  const [periodTab, setPeriodTab] = useState("7d");

  // Formatter for currency values
  const currencyFormatter = new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL',
    minimumFractionDigits: 2
  });

  return (
    <DashboardLayout title="Estat√≠sticas">
      <div className="space-y-6">
        {/* Period selector tabs */}
        <Tabs defaultValue="7d" value={periodTab} onValueChange={setPeriodTab} className="w-full">
          <TabsList>
            <TabsTrigger value="7d">7 dias</TabsTrigger>
            <TabsTrigger value="30d">30 dias</TabsTrigger>
            <TabsTrigger value="90d">90 dias</TabsTrigger>
            <TabsTrigger value="12m">12 meses</TabsTrigger>
          </TabsList>
        </Tabs>

        {/* Main Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <DashboardStatCard 
            title="Faturamento" 
            value={currencyFormatter.format(50598.98)} 
            change={{
              value: 9.2,
              positive: true,
              label: "desde m√™s anterior"
            }} 
            chartData={MOCK_MONTHLY_REVENUE} 
            chartColor="#0EA5E9" 
          />
          
          <DashboardStatCard 
            title="Vendas Realizadas" 
            value="120" 
            change={{
              value: 10.5,
              positive: true,
              label: "desde semana anterior"
            }} 
            chartData={MOCK_DAILY_MESSAGES} 
            chartColor="#0EA5E9" 
          />
          
          <DashboardStatCard 
            title="M√©dia por Venda" 
            value={currencyFormatter.format(421.66)} 
            change={{
              value: 2.8,
              positive: false,
              label: "desde m√™s anterior"
            }} 
            chartData={[...MOCK_DAILY_MESSAGES].reverse()} 
            chartColor="#0EA5E9" 
          />
        </div>

        {/* Overview stats */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <StatCard 
            title="Total de Mensagens" 
            value={periodTab === "7d" ? "35,620" : periodTab === "30d" ? "142,480" : "428,640"} 
            description={`√öltimos ${periodTab === "7d" ? "7 dias" : periodTab === "30d" ? "30 dias" : "3 meses"}`} 
            icon={<MessageCircle size={20} />} 
            trend={{
              value: 8,
              positive: true
            }} 
          />
          
          <StatCard 
            title="Tokens Consumidos" 
            value={periodTab === "7d" ? "489k" : periodTab === "30d" ? "1.8M" : "5.4M"} 
            description="Total" 
            icon={<Zap size={20} />} 
          />
          
          <StatCard 
            title="Tempo de Resposta" 
            value="2.1s" 
            description="M√©dia geral" 
            icon={<Clock size={20} />} 
            trend={{
              value: 12,
              positive: true
            }} 
          />
          
          <StatCard 
            title="Agentes Ativos" 
            value="42/50" 
            description="84% ativos" 
            icon={<Bot size={20} />} 
          />
        </div>

        {/* Billing Chart */}
        <BillingChart userRole="admin" />

        {/* Usage by franchisees */}
        <FranchiseeTable franchisees={MOCK_FRANCHISEES} />
      </div>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/admin/EvolutionConfig.tsx
================================================================================\n
// src/pages/admin/EvolutionConfig.tsx

// --- IN√çCIO DAS MODIFICA√á√ïES ---
import { useAuth } from "@/context/AuthContext";
import DashboardLayout from "@/components/layout/DashboardLayout"; // ADICIONADO: Para consist√™ncia de UI
import { Button } from "@/components/ui/button"; // ADICIONADO: Para o bot√£o de voltar
import { ArrowLeft } from "lucide-react"; // ADICIONADO: √çcone para o bot√£o
import { useNavigate } from "react-router-dom"; // ADICIONADO: Hook para navega√ß√£o
import GlobalEvolutionConfig from "@/components/evolution/GlobalEvolutionConfig";
import EvolutionAnalytics from "@/components/evolution/EvolutionAnalytics";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// --- FIM DAS MODIFICA√á√ïES ---

export default function EvolutionConfig() {
  const { user } = useAuth();
  const navigate = useNavigate();

  if (!user || user.role !== 'admin') {
    return <div>Acesso negado</div>;
  }


  const handleGoBack = () => {
    navigate('/admin/analytics');
  };

  return (
   
    <DashboardLayout title="Configura√ß√£o Evolution API">
      <div className="space-y-6">
        
        <div className="flex flex-col sm:flex-row items-start justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold">Configura√ß√£o da Evolution API</h1>
            <p className="text-muted-foreground mt-1">
              Configure as inst√¢ncias globais da Evolution API para os franqueados.
            </p>
          </div>
          <Button onClick={handleGoBack} variant="outline">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Voltar para Analytics
          </Button>
        </div>

        <Tabs defaultValue="global-config" className="space-y-6">
          <TabsList>
            <TabsTrigger value="global-config">Configura√ß√£o Global</TabsTrigger>
            <TabsTrigger value="analytics">Analytics Global</TabsTrigger>
          </TabsList>

          <TabsContent value="global-config">
            <GlobalEvolutionConfig />
          </TabsContent>

          <TabsContent value="analytics">
            <EvolutionAnalytics />
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}


================================================================================
ARQUIVO: ./src/pages/Index.tsx
================================================================================\n

import { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/context/AuthContext";

const Index = () => {
  const navigate = useNavigate();
  const { user, loading } = useAuth();

  useEffect(() => {
    if (!loading) {
      if (user) {
        navigate("/dashboard");
      } else {
        navigate("/login");
      }
    }
  }, [user, loading, navigate]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto"></div>
        <p className="text-lg text-gray-600 mt-4">Carregando...</p>
      </div>
    </div>
  );
};

export default Index;



================================================================================
ARQUIVO: ./src/pages/franchisee/Customers.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { PlusCircle, Search, Copy, Check, BriefcaseBusiness } from "lucide-react";
import CustomerCard from "@/components/customers/CustomerCard";
import { Customer } from "@/types";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { toast } from "sonner";
import { cn } from "@/lib/utils";

// Mock customers data
const MOCK_CUSTOMERS: Customer[] = [
  {
    id: "customer1",
    name: "Cliente Empresa A",
    email: "contato@empresaa.com",
    businessName: "Empresa A",
    role: "customer",
    franchiseeId: "franchisee1",
    agentCount: 2,
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    logo: "https://ui-avatars.com/api/?name=Empresa+A&background=0D8ABC&color=fff"
  },
  {
    id: "customer2",
    name: "Cliente Empresa B",
    email: "contato@empresab.com",
    businessName: "Empresa B",
    role: "customer",
    franchiseeId: "franchisee1",
    agentCount: 1,
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()
  },
  {
    id: "customer3",
    name: "Cliente Empresa C",
    email: "contato@empresac.com",
    businessName: "Empresa C",
    role: "customer",
    franchiseeId: "franchisee1",
    agentCount: 1,
    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
    logo: "https://ui-avatars.com/api/?name=Empresa+C&background=2E8B57&color=fff"
  },
  {
    id: "customer4",
    name: "Cliente Empresa D",
    email: "contato@empresad.com",
    businessName: "Empresa D",
    role: "customer",
    franchiseeId: "franchisee1",
    agentCount: 0,
    createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()
  }
];

export default function Customers() {
  const [customers, setCustomers] = useState<Customer[]>(MOCK_CUSTOMERS);
  const [searchTerm, setSearchTerm] = useState("");
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isShareModalOpen, setIsShareModalOpen] = useState(false);
  const [currentCustomer, setCurrentCustomer] = useState<Customer | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    businessName: ""
  });
  const [copied, setCopied] = useState(false);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value.toLowerCase());
  };

  const filteredCustomers = customers.filter(customer => 
    customer.name.toLowerCase().includes(searchTerm) ||
    customer.businessName.toLowerCase().includes(searchTerm) ||
    customer.email.toLowerCase().includes(searchTerm)
  );

  const handleViewCustomer = (customer: Customer) => {
    setCurrentCustomer(customer);
    setIsShareModalOpen(true);
  };

  const handleManageCustomer = (customer: Customer) => {
    // In a real app, navigate to customer management page
    toast.info(`Gerenciando ${customer.businessName}`);
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAddSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const newCustomer: Customer = {
      id: `customer${customers.length + 1}`,
      name: formData.name,
      email: formData.email,
      businessName: formData.businessName,
      role: "customer",
      franchiseeId: "franchisee1", // Would come from current user
      agentCount: 0,
      createdAt: new Date().toISOString()
    };
    
    setCustomers([...customers, newCustomer]);
    setIsAddModalOpen(false);
    setFormData({ name: "", email: "", businessName: "" });
    toast.success(`Cliente ${formData.businessName} adicionado com sucesso!`);
  };

  const handleCopyLink = () => {
    if (!currentCustomer) return;
    
    // Generate customer portal URL
    const portalUrl = `https://cliente.plataforma.com/${currentCustomer.id}`;
    
    navigator.clipboard.writeText(portalUrl).then(() => {
      setCopied(true);
      toast.success("Link copiado para a √°rea de transfer√™ncia!");
      
      // Reset copy status after 2 seconds
      setTimeout(() => setCopied(false), 2000);
    });
  };

  return (
    <DashboardLayout title="Clientes">
      <div className="space-y-6">
        <div className="flex flex-col md:flex-row items-center justify-between gap-4">
          <div className="flex items-center">
            <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm border flex items-center gap-2">
              <BriefcaseBusiness className="text-primary h-5 w-5" />
              <div>
                <p className="text-sm text-muted-foreground">Total de Clientes</p>
                <p className="font-medium">{customers.length}</p>
              </div>
            </div>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Buscar clientes..."
                className="w-full sm:w-[250px] pl-8"
                value={searchTerm}
                onChange={handleSearch}
              />
            </div>
            <Button onClick={() => setIsAddModalOpen(true)}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Novo Cliente
            </Button>
          </div>
        </div>

        {filteredCustomers.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredCustomers.map(customer => (
              <CustomerCard 
                key={customer.id} 
                customer={customer} 
                onView={handleViewCustomer} 
                onManage={handleManageCustomer} 
              />
            ))}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center h-64">
            <BriefcaseBusiness size={48} className="text-muted-foreground/30 mb-4" />
            <p className="text-muted-foreground mb-2">Nenhum cliente encontrado.</p>
            {searchTerm && (
              <Button variant="link" onClick={() => setSearchTerm("")}>
                Limpar busca
              </Button>
            )}
          </div>
        )}
      </div>

      {/* Add Customer Modal */}
      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Adicionar Novo Cliente</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleAddSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="businessName">Nome da Empresa</Label>
              <Input
                id="businessName"
                name="businessName"
                placeholder="Empresa ABC"
                value={formData.businessName}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="name">Nome do Contato</Label>
              <Input
                id="name"
                name="name"
                placeholder="Nome do respons√°vel"
                value={formData.name}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="email@exemplo.com"
                value={formData.email}
                onChange={handleFormChange}
                required
              />
            </div>
            <DialogFooter>
              <Button variant="outline" type="button" onClick={() => setIsAddModalOpen(false)}>
                Cancelar
              </Button>
              <Button type="submit">Adicionar</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      {/* Share Customer Portal Modal */}
      <Dialog open={isShareModalOpen} onOpenChange={setIsShareModalOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Portal do Cliente</DialogTitle>
          </DialogHeader>
          
          <div className="space-y-4">
            <div className="space-y-2">
              <Label>Link do Portal</Label>
              <div className="flex gap-2">
                <Input 
                  value={currentCustomer ? `https://cliente.plataforma.com/${currentCustomer.id}` : ""}
                  readOnly
                  className="flex-1"
                />
                <Button 
                  variant="outline" 
                  size="icon" 
                  onClick={handleCopyLink}
                  className={cn(
                    copied ? "bg-green-100 hover:bg-green-100 text-green-800 border-green-200" : ""
                  )}
                >
                  {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                </Button>
              </div>
              <p className="text-xs text-muted-foreground">
                Compartilhe este link com o cliente para acessar o portal.
              </p>
            </div>
            
            <div className="space-y-2">
              <Label>Acesso</Label>
              <div className="bg-muted p-3 rounded-md">
                <div className="flex justify-between items-center">
                  <div>
                    <p className="font-medium text-sm">
                      {currentCustomer?.businessName}
                    </p>
                    <p className="text-xs text-muted-foreground">
                      {currentCustomer?.email}
                    </p>
                  </div>
                  <Button variant="outline" size="sm">
                    Redefinir senha
                  </Button>
                </div>
              </div>
              <p className="text-xs text-muted-foreground">
                O cliente tamb√©m pode acessar o portal usando seu email e senha.
              </p>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsShareModalOpen(false)}>
              Fechar
            </Button>
            <Button onClick={() => {
              toast.success("Email com instru√ß√µes enviado ao cliente!");
              setIsShareModalOpen(false);
            }}>
              Enviar por Email
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/Prospecting.tsx
================================================================================\n

import { useState, useEffect } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Search, Download, MapPin, Building } from "lucide-react";
import { toast } from "sonner";
import { Lead, BRAZILIAN_STATES, CITY_TO_STATE_MAP } from "@/types/prospecting";
import ProspectingService from "@/services/prospectingService";

// Mock niches
const NICHES = [
  "Cl√≠nicas de Est√©tica",
  "Pet Shops",
  "Dentistas",
  "Advogados",
  "Autoescolas",
  "Restaurantes",
  "Barbearias",
  "Lojas de Roupas",
  "Academias",
  "Personalizado"
];

export default function Prospecting() {
  const [city, setCity] = useState("");
  const [state, setState] = useState("");
  const [niche, setNiche] = useState("");
  const [customNiche, setCustomNiche] = useState("");
  const [quantity, setQuantity] = useState(10);
  const [leads, setLeads] = useState<Lead[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  // Mock franchisee ID - In real app, this would come from auth context
  const franchiseeId = "franchisee-123";

  // Detectar estado automaticamente quando a cidade for digitada
  useEffect(() => {
    if (city.trim() && !state) {
      const cityLower = city.toLowerCase().trim();
      const detectedState = CITY_TO_STATE_MAP[cityLower];
      if (detectedState) {
        setState(detectedState);
        console.log(`Estado detectado automaticamente: ${detectedState} para cidade: ${city}`);
      }
    }
  }, [city, state]);

  // Reset custom niche when changing from "Personalizado" to another option
  useEffect(() => {
    if (niche !== "Personalizado") {
      setCustomNiche("");
    }
  }, [niche]);

  const handleSearch = async () => {
    if (!city.trim()) {
      toast.error("Digite o nome da cidade para continuar.");
      return;
    }
    
    if (!niche) {
      toast.error("Selecione um nicho para continuar.");
      return;
    }

    if (niche === "Personalizado" && !customNiche.trim()) {
      toast.error("Digite o nicho personalizado para continuar.");
      return;
    }

    if (!state) {
      toast.error("Selecione um estado ou digite uma cidade conhecida para detec√ß√£o autom√°tica.");
      return;
    }
    
    // Use custom niche if "Personalizado" is selected, otherwise use the selected niche
    const searchNiche = niche === "Personalizado" ? customNiche.trim() : niche;
    
    setIsLoading(true);
    try {
      const fetchedLeads = await ProspectingService.fetchUniqueLeads(
        franchiseeId,
        searchNiche,
        city.trim(),
        state,
        quantity
      );
      
      setLeads(fetchedLeads);
      toast.success(`${fetchedLeads.length} empresas encontradas! (${quantity} solicitadas)`);
      
      if (fetchedLeads.length < quantity) {
        toast.warning(`Apenas ${fetchedLeads.length} empresas dispon√≠veis para este nicho nesta cidade.`);
      }
    } catch (error) {
      console.error("Error fetching leads:", error);
      if (error instanceof Error) {
        toast.error(error.message);
      } else {
        toast.error("Erro ao buscar empresas. Tente novamente.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const toggleLeadSelection = (id: string) => {
    setLeads(leads.map(lead => 
      lead.id === id ? { ...lead, selected: !lead.selected } : lead
    ));
  };

  const toggleAllLeads = (selected: boolean) => {
    setLeads(leads.map(lead => ({ ...lead, selected })));
  };

  const exportLeads = () => {
    const selectedLeads = leads.filter(lead => lead.selected);
    
    if (selectedLeads.length === 0) {
      toast.error("Selecione pelo menos uma empresa para exportar.");
      return;
    }
    
    // Create CSV content
    const headers = ["Nome", "Nicho", "Endere√ßo", "Telefone", "Email"];
    const csvRows = [
      headers.join(','),
      ...selectedLeads.map(lead => [
        `"${lead.name}"`,
        `"${lead.niche}"`,
        `"${lead.address}"`,
        `"${lead.phone}"`,
        `"${lead.email || ''}"`
      ].join(','))
    ];
    
    const csvContent = csvRows.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    // Create download link
    const link = document.createElement('a');
    link.setAttribute('href', url);
    const searchNiche = niche === "Personalizado" ? customNiche.trim() : niche;
    link.setAttribute('download', `leads_${city}_${searchNiche.replace(/\s/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    
    // Trigger download and cleanup
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    toast.success(`${selectedLeads.length} leads exportados com sucesso!`);
  };

  // Check if any leads are selected
  const selectedCount = leads.filter(lead => lead.selected).length;

  return (
    <DashboardLayout title="Prospec√ß√£o de Clientes">
      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Search className="h-5 w-5" />
              Buscar Empresas Locais
            </CardTitle>
            <CardDescription>
              Encontre empresas locais por cidade, estado e nicho para prospec√ß√£o automatizada. 
              O sistema evita duplicatas automaticamente e busca no Google Meus Neg√≥cios.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-4">
              {/* Campo Cidade */}
              <div className="space-y-2">
                <Label htmlFor="city" className="text-sm font-medium flex items-center gap-1">
                  <MapPin className="h-4 w-4" />
                  Cidade
                </Label>
                <Input 
                  id="city"
                  placeholder="Ex: S√£o Paulo" 
                  value={city} 
                  onChange={(e) => setCity(e.target.value)}
                />
              </div>

              {/* Campo Estado */}
              <div className="space-y-2">
                <Label htmlFor="state" className="text-sm font-medium flex items-center gap-1">
                  <Building className="h-4 w-4" />
                  Estado (UF)
                </Label>
                <Select value={state} onValueChange={setState}>
                  <SelectTrigger id="state">
                    <SelectValue placeholder="Selecione o estado" />
                  </SelectTrigger>
                  <SelectContent className="bg-white dark:bg-gray-800">
                    {BRAZILIAN_STATES.map((stateOption) => (
                      <SelectItem key={stateOption.code} value={stateOption.code}>
                        {stateOption.code} - {stateOption.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Campo Nicho */}
              <div className="space-y-2">
                <Label htmlFor="niche" className="text-sm font-medium">Nicho de neg√≥cio</Label>
                <Select value={niche} onValueChange={setNiche}>
                  <SelectTrigger id="niche">
                    <SelectValue placeholder="Selecione um nicho" />
                  </SelectTrigger>
                  <SelectContent className="bg-white dark:bg-gray-800">
                    {NICHES.map((nicheOption) => (
                      <SelectItem key={nicheOption} value={nicheOption}>
                        {nicheOption}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Campo Nicho Personalizado - aparece entre nicho e quantidade */}
            {niche === "Personalizado" && (
              <div className="mb-4">
                <Label htmlFor="customNiche" className="text-sm font-medium">
                  Digite o nicho personalizado
                </Label>
                <Input 
                  id="customNiche"
                  placeholder="Ex: Cl√≠nicas de Fisioterapia, Lojas de M√≥veis, etc." 
                  value={customNiche} 
                  onChange={(e) => setCustomNiche(e.target.value)}
                  className="mt-2"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  Este nicho ser√° usado para buscar empresas no Google Meus Neg√≥cios
                </p>
              </div>
            )}

            {/* Campo Quantidade */}
            <div className="grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-4 mb-4">
              <div className="space-y-2 max-w-xs">
                <Label htmlFor="quantity" className="text-sm font-medium">Quantidade</Label>
                <Select value={quantity.toString()} onValueChange={(value) => setQuantity(parseInt(value))}>
                  <SelectTrigger id="quantity">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="bg-white dark:bg-gray-800">
                    {Array.from({ length: 10 }, (_, i) => (i + 1) * 5).map((num) => (
                      <SelectItem key={num} value={num.toString()}>
                        {num} empresas
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Bot√£o de busca */}
            <div className="flex justify-center">
              <Button 
                onClick={handleSearch} 
                disabled={isLoading}
                size="lg"
                className="w-full md:w-auto"
              >
                {isLoading ? (
                  <>
                    <div className="animate-spin mr-2 h-4 w-4 border-2 border-b-transparent border-white rounded-full" />
                    Buscando {quantity} empresas...
                  </>
                ) : (
                  <>
                    <Search className="mr-2 h-4 w-4" /> 
                    Buscar {quantity} empresas
                  </>
                )}
              </Button>
            </div>

            {/* Informa√ß√£o sobre detec√ß√£o autom√°tica de estado */}
            {city && state && CITY_TO_STATE_MAP[city.toLowerCase().trim()] === state && (
              <div className="mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md">
                <p className="text-sm text-blue-700 dark:text-blue-300">
                  ‚úÖ Estado detectado automaticamente: <strong>{state}</strong> para a cidade <strong>{city}</strong>
                </p>
              </div>
            )}
          </CardContent>
        </Card>

        {leads.length > 0 && (
          <Card>
            <CardHeader className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
              <div className="text-center sm:text-left">
                <CardTitle>Resultados da Busca</CardTitle>
                <CardDescription>
                  {leads.length} empresas encontradas em {city} - {state}
                </CardDescription>
              </div>
              <div className="flex flex-col sm:flex-row items-center gap-4">
                <div className="flex items-center gap-2">
                  <Checkbox 
                    id="select-all" 
                    checked={leads.every(lead => lead.selected)}
                    onCheckedChange={(checked) => toggleAllLeads(!!checked)}
                  />
                  <label 
                    htmlFor="select-all" 
                    className="text-sm font-medium cursor-pointer"
                  >
                    Selecionar todos
                  </label>
                </div>
                <Button 
                  variant="outline" 
                  onClick={exportLeads}
                  disabled={selectedCount === 0}
                  className="w-full sm:w-auto"
                >
                  <Download className="mr-2 h-4 w-4" />
                  Exportar ({selectedCount})
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {/* Mobile view - Cards */}
              <div className="block md:hidden space-y-4">
                {leads.map((lead) => (
                  <div key={lead.id} className="border rounded-lg p-4 space-y-3">
                    <div className="flex items-start gap-3">
                      <Checkbox 
                        checked={lead.selected} 
                        onCheckedChange={() => toggleLeadSelection(lead.id)}
                        id={`lead-mobile-${lead.id}`}
                        className="mt-1"
                      />
                      <div className="flex-1 space-y-2">
                        <label 
                          htmlFor={`lead-mobile-${lead.id}`} 
                          className="font-medium text-base cursor-pointer block"
                        >
                          {lead.name}
                        </label>
                        <div className="text-sm text-muted-foreground">
                          <div className="flex items-center gap-1 mb-1">
                            <span className="font-medium">Nicho:</span> {lead.niche}
                          </div>
                          <div className="flex items-center gap-1 mb-1">
                            <span className="font-medium">Telefone:</span> {lead.phone}
                          </div>
                          <div className="flex items-center gap-1 mb-1">
                            <span className="font-medium">Endere√ßo:</span> {lead.address}
                          </div>
                          {lead.email && (
                            <div className="flex items-center gap-1">
                              <span className="font-medium">Email:</span> {lead.email}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Desktop view - Table */}
              <div className="hidden md:block overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="border-b">
                      <th className="text-left py-3 px-4 w-10"></th>
                      <th className="text-left py-3 px-4">Nome</th>
                      <th className="text-left py-3 px-4">Nicho</th>
                      <th className="text-left py-3 px-4">Endere√ßo</th>
                      <th className="text-left py-3 px-4">Telefone</th>
                      <th className="text-left py-3 px-4">Email</th>
                    </tr>
                  </thead>
                  <tbody>
                    {leads.map((lead) => (
                      <tr key={lead.id} className="border-b hover:bg-muted/50">
                        <td className="py-3 px-4">
                          <Checkbox 
                            checked={lead.selected} 
                            onCheckedChange={() => toggleLeadSelection(lead.id)}
                            id={`lead-${lead.id}`}
                          />
                        </td>
                        <td className="py-3 px-4">
                          <label 
                            htmlFor={`lead-${lead.id}`} 
                            className="font-medium cursor-pointer"
                          >
                            {lead.name}
                          </label>
                        </td>
                        <td className="py-3 px-4">{lead.niche}</td>
                        <td className="py-3 px-4">{lead.address}</td>
                        <td className="py-3 px-4">{lead.phone}</td>
                        <td className="py-3 px-4">
                          {lead.email || "‚Äî"}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/Lessons.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { VideoLesson } from "@/types";
import { LessonCard } from "@/components/lessons/LessonCard";
import { Search } from "lucide-react";

// Mock data for lessons
const MOCK_LESSONS: VideoLesson[] = [
  {
    id: "1",
    title: "Introdu√ß√£o √† Plataforma",
    description: "Uma aula introdut√≥ria sobre como utilizar a plataforma de vendas.",
    youtubeUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    thumbnailUrl: "https://images.unsplash.com/photo-1588702547923-7093a6c3ba33?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-05-20T14:30:00Z",
    updatedAt: "2023-05-20T14:30:00Z",
    attachments: [
      {
        id: "a1",
        lessonId: "1",
        name: "Manual da Plataforma.pdf",
        fileUrl: "/documents/manual.pdf",
        fileType: "application/pdf",
        fileSize: 2458000,
        createdAt: "2023-05-20T14:35:00Z"
      }
    ]
  },
  {
    id: "2",
    title: "T√©cnicas Avan√ßadas de Vendas",
    description: "Aprenda t√©cnicas de vendas que aumentar√£o sua taxa de convers√£o.",
    youtubeUrl: "https://www.youtube.com/watch?v=9bZkp7q19f0",
    thumbnailUrl: "https://images.unsplash.com/photo-1553877522-43269d4ea984?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-06-15T10:00:00Z",
    updatedAt: "2023-06-16T11:20:00Z",
    attachments: [
      {
        id: "a2",
        lessonId: "2",
        name: "Slides da Apresenta√ß√£o.pptx",
        fileUrl: "/documents/slides.pptx",
        fileType: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        fileSize: 3580000,
        createdAt: "2023-06-15T10:05:00Z"
      },
      {
        id: "a3",
        lessonId: "2",
        name: "Planilha de Exemplos.xlsx",
        fileUrl: "/documents/exemplos.xlsx",
        fileType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        fileSize: 1240000,
        createdAt: "2023-06-15T10:10:00Z"
      }
    ]
  },
  {
    id: "3",
    title: "Atendimento ao Cliente",
    description: "Como oferecer um atendimento excepcional aos seus clientes.",
    youtubeUrl: "https://www.youtube.com/watch?v=9bZkp7q19f0",
    thumbnailUrl: "https://images.unsplash.com/photo-1521791136064-7986c2920216?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-07-10T09:30:00Z",
    updatedAt: "2023-07-10T09:30:00Z",
    attachments: []
  },
  {
    id: "4",
    title: "Marketing Digital para Vendas",
    description: "Estrat√©gias de marketing digital para aumentar suas vendas.",
    youtubeUrl: "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
    thumbnailUrl: "https://images.unsplash.com/photo-1533750349088-cd871a92f312?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-08-05T15:45:00Z",
    updatedAt: "2023-08-05T15:45:00Z",
    attachments: []
  },
  {
    id: "5",
    title: "Negocia√ß√£o e Fechamento",
    description: "T√©cnicas de negocia√ß√£o para fechar mais vendas.",
    youtubeUrl: "https://www.youtube.com/watch?v=9bZkp7q19f0",
    thumbnailUrl: "https://images.unsplash.com/photo-1560438718-eb61ede255eb?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3",
    createdAt: "2023-09-12T14:30:00Z",
    updatedAt: "2023-09-12T14:30:00Z",
    attachments: []
  }
];

// Categorize lessons
const recentLessons = MOCK_LESSONS.sort((a, b) => 
  new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
).slice(0, 3);

export default function Lessons() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedLesson, setSelectedLesson] = useState<VideoLesson | null>(null);
  
  // Filter lessons based on search query
  const filteredLessons = searchQuery 
    ? MOCK_LESSONS.filter(lesson => 
        lesson.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        lesson.description.toLowerCase().includes(searchQuery.toLowerCase())
      )
    : MOCK_LESSONS;

  return (
    <DashboardLayout title="Aulas">
      <div className="space-y-8">
        {/* Hero section with search */}
        <div className="relative h-48 md:h-64 lg:h-72 rounded-lg overflow-hidden mb-8">
          <div className="absolute inset-0 bg-gradient-to-r from-primary/80 to-secondary/80 flex items-center px-6 md:px-12">
            <div className="max-w-3xl">
              <h1 className="text-2xl md:text-3xl lg:text-4xl font-bold text-white mb-4">
                Centro de Aprendizado
              </h1>
              <p className="text-white/90 text-sm md:text-base mb-6">
                Aprimore suas habilidades com nossas videoaulas exclusivas
              </p>
              <div className="relative max-w-md">
                <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-500" />
                <Input
                  placeholder="Buscar aulas"
                  className="pl-9 bg-white/10 text-white border-white/20 focus:bg-white/20 placeholder:text-white/60"
                  value={searchQuery}
                  onChange={e => setSearchQuery(e.target.value)}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Recentes */}
        <section>
          <h2 className="text-xl md:text-2xl font-bold mb-4">Adicionados Recentemente</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {recentLessons.map(lesson => (
              <LessonCard 
                key={lesson.id}
                lesson={lesson}
                onClick={() => setSelectedLesson(lesson)}
              />
            ))}
          </div>
        </section>

        {/* All lessons */}
        <section>
          <h2 className="text-xl md:text-2xl font-bold mb-4">Todas as Aulas</h2>
          <ScrollArea className="h-full w-full">
            <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 md:gap-6">
              {filteredLessons.map(lesson => (
                <LessonCard 
                  key={lesson.id}
                  lesson={lesson}
                  onClick={() => setSelectedLesson(lesson)}
                  compact
                />
              ))}
            </div>
          </ScrollArea>
        </section>

        {/* Player Dialog */}
        {selectedLesson && (
          <LessonPlayerDialog 
            lesson={selectedLesson} 
            onClose={() => setSelectedLesson(null)} 
          />
        )}
      </div>
    </DashboardLayout>
  );
}

interface LessonPlayerDialogProps {
  lesson: VideoLesson;
  onClose: () => void;
}

import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { FileIcon, FileText } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";

function LessonPlayerDialog({ lesson, onClose }: LessonPlayerDialogProps) {
  // Extract video ID from YouTube URL
  const getYouTubeEmbedUrl = (url: string) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    const videoId = match && match[2].length === 11 ? match[2] : null;
    
    return videoId ? `https://www.youtube.com/embed/${videoId}` : null;
  };

  const embedUrl = getYouTubeEmbedUrl(lesson.youtubeUrl);

  return (
    <Dialog open={!!lesson} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-4xl p-0 overflow-hidden">
        <DialogHeader className="p-6">
          <DialogTitle className="text-xl md:text-2xl">{lesson.title}</DialogTitle>
        </DialogHeader>

        {embedUrl && (
          <div className="aspect-video w-full">
            <iframe
              width="100%"
              height="100%"
              src={embedUrl}
              title={lesson.title}
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              className="w-full h-full"
            ></iframe>
          </div>
        )}

        <div className="p-6">
          <p className="text-gray-600 dark:text-gray-300 mb-4">
            {lesson.description}
          </p>

          {lesson.attachments.length > 0 && (
            <>
              <Separator className="my-4" />
              <h3 className="font-medium mb-3">Materiais de Apoio</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                {lesson.attachments.map((attachment) => (
                  <a 
                    href={attachment.fileUrl} 
                    key={attachment.id}
                    className="flex items-center p-2 border rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                    download
                  >
                    {attachment.fileType.includes('pdf') ? (
                      <FileText className="h-5 w-5 text-red-500 mr-2" />
                    ) : attachment.fileType.includes('spreadsheet') ? (
                      <FileIcon className="h-5 w-5 text-green-500 mr-2" />
                    ) : attachment.fileType.includes('presentation') ? (
                      <FileIcon className="h-5 w-5 text-orange-500 mr-2" />
                    ) : (
                      <FileIcon className="h-5 w-5 text-blue-500 mr-2" />
                    )}
                    <div className="flex flex-col">
                      <span className="text-sm font-medium truncate">{attachment.name}</span>
                      <span className="text-xs text-gray-500">
                        {(attachment.fileSize / 1024 / 1024).toFixed(2)} MB
                      </span>
                    </div>
                  </a>
                ))}
              </div>
            </>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/AISalesAgent.tsx
================================================================================\n
import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Smartphone, Bot, MessageSquare, Zap, CheckCircle } from "lucide-react";
import WhatsAppConnectionTab from "@/components/ai-sales-agent/WhatsAppConnectionTab";
import AgentConfigTab from "@/components/ai-sales-agent/AgentConfigTab";
import CampaignTab from "@/components/ai-sales-agent/CampaignTab";
export default function AISalesAgent() {
  const [isWhatsAppConnected, setIsWhatsAppConnected] = useState(false);
  const [activeTab, setActiveTab] = useState("connection");
  const getStepStatus = (step: string) => {
    if (step === "connection") return isWhatsAppConnected ? "completed" : "active";
    if (step === "agent") return isWhatsAppConnected ? "active" : "pending";
    if (step === "campaign") return isWhatsAppConnected ? "active" : "pending";
    return "pending";
  };
  const steps = [{
    id: "connection",
    title: "Conectar WhatsApp",
    description: "Conecte sua conta do WhatsApp",
    icon: Smartphone
  }, {
    id: "agent",
    title: "Configurar Agente",
    description: "Configure seu agente de IA",
    icon: Bot
  }, {
    id: "campaign",
    title: "Criar Campanha",
    description: "Lance sua campanha de vendas",
    icon: MessageSquare
  }];
  return <DashboardLayout title="Vendedor IA">
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
        <div className="container mx-auto px-4 py-6 md:py-8 lg:py-12 max-w-7xl">
          {/* Header Section */}
          <div className="text-center mb-8 md:mb-12">
            
            <h1 className="text-2xl md:text-3xl lg:text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2 md:mb-4">
              Vendedor IA Inteligente
            </h1>
            <p className="text-gray-600 dark:text-gray-300 text-sm md:text-base lg:text-lg max-w-2xl mx-auto px-4">Automatize as vendas dos seus Agentes!</p>
          </div>

          {/* Progress Steps - Only show on desktop */}
          <div className="hidden lg:block mb-12">
            <div className="flex justify-center">
              <div className="flex items-center space-x-8">
                {steps.map((step, index) => {
                const status = getStepStatus(step.id);
                const Icon = step.icon;
                return <div key={step.id} className="flex items-center">
                      <div className="flex flex-col items-center">
                        <div className={`
                            relative flex items-center justify-center w-16 h-16 rounded-full border-2 transition-all duration-300
                            ${status === "completed" ? "bg-green-500 border-green-500 text-white" : status === "active" ? "bg-blue-500 border-blue-500 text-white" : "bg-gray-100 border-gray-300 text-gray-400"}
                          `}>
                          {status === "completed" ? <CheckCircle className="h-8 w-8" /> : <Icon className="h-8 w-8" />}
                        </div>
                        <div className="mt-3 text-center">
                          <h3 className="text-sm font-semibold text-gray-900 dark:text-gray-100">
                            {step.title}
                          </h3>
                          <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                            {step.description}
                          </p>
                        </div>
                      </div>
                      {index < steps.length - 1 && <div className="w-24 h-0.5 bg-gray-300 dark:bg-gray-600 mx-4" />}
                    </div>;
              })}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="w-full">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              {/* Tab Navigation */}
              <div className="flex justify-center mb-6 md:mb-8">
                <Card className="p-1 bg-white/80 backdrop-blur-sm shadow-lg border-0">
                  <TabsList className="grid w-full grid-cols-1 sm:grid-cols-3 gap-1 h-auto bg-transparent p-0">
                    <TabsTrigger value="connection" className="flex items-center justify-center gap-2 py-3 px-4 md:px-6 text-xs sm:text-sm font-medium rounded-lg data-[state=active]:bg-blue-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 min-w-[120px] sm:min-w-[140px]">
                      <Smartphone className="h-4 w-4 flex-shrink-0" />
                      <span className="hidden sm:inline">Conex√£o WhatsApp</span>
                      <span className="sm:hidden">WhatsApp</span>
                    </TabsTrigger>
                    <TabsTrigger value="agent" disabled={!isWhatsAppConnected} className="flex items-center justify-center gap-2 py-3 px-4 md:px-6 text-xs sm:text-sm font-medium rounded-lg data-[state=active]:bg-blue-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed min-w-[120px] sm:min-w-[140px]">
                      <Bot className="h-4 w-4 flex-shrink-0" />
                      <span className="hidden sm:inline">Agente IA</span>
                      <span className="sm:hidden">Agente</span>
                    </TabsTrigger>
                    <TabsTrigger value="campaign" disabled={!isWhatsAppConnected} className="flex items-center justify-center gap-2 py-3 px-4 md:px-6 text-xs sm:text-sm font-medium rounded-lg data-[state=active]:bg-blue-500 data-[state=active]:text-white data-[state=active]:shadow-md transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed min-w-[120px] sm:min-w-[140px]">
                      <MessageSquare className="h-4 w-4 flex-shrink-0" />
                      <span>Campanha</span>
                    </TabsTrigger>
                  </TabsList>
                </Card>
              </div>

              {/* Tab Content */}
              <div className="w-full max-w-5xl mx-auto">
                <TabsContent value="connection" className="mt-0">
                  <div className="animate-fade-in">
                    <WhatsAppConnectionTab isWhatsAppConnected={isWhatsAppConnected} setIsWhatsAppConnected={setIsWhatsAppConnected} setActiveTab={setActiveTab} />
                  </div>
                </TabsContent>

                <TabsContent value="agent" className="mt-0">
                  <div className="animate-fade-in">
                    <AgentConfigTab setActiveTab={setActiveTab} />
                  </div>
                </TabsContent>

                <TabsContent value="campaign" className="mt-0">
                  <div className="animate-fade-in">
                    <CampaignTab />
                  </div>
                </TabsContent>
              </div>
            </Tabs>
          </div>
        </div>
      </div>
    </DashboardLayout>;
}


================================================================================
ARQUIVO: ./src/pages/franchisee/Prompts.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Plus, 
  Search, 
  Edit, 
  Copy, 
  Trash2, 
  FileText,
  Sparkles,
  Filter
} from "lucide-react";
import { toast } from "sonner";
import usePromptManagement from "@/hooks/usePromptManagement";
import PromptModal from "@/components/agents/PromptModal";
import { useIsMobile } from "@/hooks/use-mobile";

export default function Prompts() {
  const [searchTerm, setSearchTerm] = useState("");
  const [activeNiche, setActiveNiche] = useState<string>("all");
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editingPrompt, setEditingPrompt] = useState(null);
  const isMobile = useIsMobile();
  
  const {
    prompts,
    isPromptModalOpen,
    setIsPromptModalOpen,
    allNiches,
    handleSubmitPrompt,
    handleDeletePrompt,
  } = usePromptManagement();

  const filteredPrompts = prompts.filter(prompt => {
    const matchesSearch = prompt.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          prompt.text.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesNiche = activeNiche === "all" || prompt.niche === activeNiche;
    
    return matchesSearch && matchesNiche;
  });

  const handleCopyPrompt = (text: string, name: string) => {
    navigator.clipboard.writeText(text);
    toast.success(`Prompt "${name}" copiado!`);
  };

  const handleEditPrompt = (prompt) => {
    setEditingPrompt(prompt);
    setIsEditModalOpen(true);
  };

  const handleDeleteClick = (id: string, name: string) => {
    handleDeletePrompt(id);
  };

  const handleUpdatePrompt = (promptData) => {
    // For editing, we need to call the handler with the prompt data
    handleSubmitPrompt(promptData);
    setIsEditModalOpen(false);
    setEditingPrompt(null);
  };

  return (
    <DashboardLayout title="Prompts">
      <div className="w-full max-w-full overflow-hidden">
        <div className="space-y-4 sm:space-y-6">
          {/* Header - Mobile Optimized */}
          <div className="flex flex-col space-y-4">
            <div className="flex flex-col sm:flex-row sm:items-start gap-4">
              <div className="p-3 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg shadow-sm flex-shrink-0 self-start">
                <FileText className="h-6 w-6 text-white" />
              </div>
              <div className="min-w-0 flex-1">
                <h1 className="text-xl sm:text-2xl font-bold text-foreground leading-tight">
                  Biblioteca de Prompts
                </h1>
                <p className="text-sm sm:text-base text-muted-foreground mt-2 leading-relaxed">
                  Gerencie prompts personalizados para seus agentes IA
                </p>
              </div>
              <div className="flex-shrink-0 w-full sm:w-auto">
                <Button 
                  onClick={() => setIsPromptModalOpen(true)} 
                  className="w-full sm:w-auto text-sm px-4 py-3 h-11 font-medium"
                  size="default"
                >
                  <Plus className="mr-2 h-4 w-4" />
                  <span>Novo Prompt</span>
                </Button>
              </div>
            </div>
          </div>

          {/* Stats Cards - Mobile Enhanced */}
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-200 dark:border-blue-800/30">
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium text-blue-700 dark:text-blue-300">
                  Total de Prompts
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-2xl font-bold text-blue-900 dark:text-blue-100">
                  {prompts.length}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-green-200 dark:border-green-800/30">
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium text-green-700 dark:text-green-300">
                  Nichos Dispon√≠veis
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-2xl font-bold text-green-900 dark:text-green-100">
                  {allNiches.length}
                </div>
              </CardContent>
            </Card>

            <Card className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-purple-200 dark:border-purple-800/30">
              <CardHeader className="pb-3">
                <CardTitle className="text-sm font-medium text-purple-700 dark:text-purple-300">
                  Prompts Padr√£o
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-0">
                <div className="text-2xl font-bold text-purple-900 dark:text-purple-100">
                  {prompts.filter(p => p.isDefault).length}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Search and Filter - Mobile Enhanced */}
          <div className="space-y-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground z-10" />
              <Input
                placeholder="Buscar prompts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 text-base h-12 bg-background border-input"
              />
            </div>
            
            {/* Filter Label - Better spacing on mobile */}
            <div className="flex items-center gap-2 text-sm text-muted-foreground px-1">
              <Filter className="h-4 w-4 flex-shrink-0" />
              <span>Filtrar por nicho:</span>
            </div>
          </div>

          {/* Tabs for Niches - Mobile Optimized */}
          <Tabs defaultValue="all" value={activeNiche} onValueChange={setActiveNiche}>
            <div className="w-full">
              <ScrollArea className="w-full">
                <div className="pb-3">
                  <TabsList className={`
                    ${isMobile ? 'flex w-max h-auto p-1 gap-1' : 'inline-flex h-10 p-1'} 
                    bg-muted rounded-md
                  `}>
                    <TabsTrigger 
                      value="all" 
                      className={`
                        ${isMobile ? 'text-sm px-4 py-3 h-auto' : 'text-sm px-3 py-2'}
                        whitespace-nowrap flex-shrink-0 font-medium
                      `}
                    >
                      Todos ({prompts.length})
                    </TabsTrigger>
                    {allNiches.map((niche) => {
                      const nicheCount = prompts.filter(p => p.niche === niche).length;
                      return (
                        <TabsTrigger 
                          key={niche} 
                          value={niche} 
                          className={`
                            ${isMobile ? 'text-sm px-4 py-3 h-auto' : 'text-sm px-3 py-2'}
                            whitespace-nowrap flex-shrink-0 font-medium
                          `}
                        >
                          <span className={`${isMobile ? 'max-w-[100px]' : 'max-w-[80px]'} truncate`}>
                            {niche}
                          </span>
                          <span className="ml-1.5">({nicheCount})</span>
                        </TabsTrigger>
                      );
                    })}
                  </TabsList>
                </div>
              </ScrollArea>
            </div>

            <TabsContent value={activeNiche} className="mt-6">
              {filteredPrompts.length > 0 ? (
                <div className={`
                  grid gap-4 
                  ${isMobile ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-2 xl:grid-cols-3'}
                `}>
                  {filteredPrompts.map((prompt) => (
                    <Card key={prompt.id} className="group hover:shadow-lg transition-all duration-300 hover:border-primary/50 flex flex-col border-border/50">
                      <CardHeader className="pb-4 flex-shrink-0">
                        <div className="flex items-start justify-between gap-3">
                          <div className="flex-1 min-w-0">
                            <div className="space-y-3">
                              <div className="flex items-start gap-3 flex-wrap">
                                <CardTitle className="text-base sm:text-lg font-semibold break-words leading-tight min-w-0 flex-1">
                                  {prompt.name}
                                </CardTitle>
                                {prompt.isDefault && (
                                  <Badge variant="secondary" className="bg-primary/10 text-primary text-xs flex-shrink-0">
                                    <Sparkles className="mr-1.5 h-3 w-3" />
                                    <span>Padr√£o</span>
                                  </Badge>
                                )}
                              </div>
                              <Badge variant="outline" className="text-xs w-fit font-medium">
                                {prompt.niche}
                              </Badge>
                            </div>
                          </div>
                          
                          {/* Action buttons - Mobile enhanced */}
                          <div className={`
                            flex items-center gap-1 flex-shrink-0
                            ${isMobile ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'}
                            transition-opacity duration-200
                          `}>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-8 w-8 p-0 hover:bg-muted"
                              onClick={() => handleCopyPrompt(prompt.text, prompt.name)}
                              title="Copiar prompt"
                            >
                              <Copy size={14} />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-8 w-8 p-0 hover:bg-muted"
                              onClick={() => handleEditPrompt(prompt)}
                              title="Editar prompt"
                            >
                              <Edit size={14} />
                            </Button>
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              className="h-8 w-8 p-0 text-destructive hover:text-destructive hover:bg-destructive/10"
                              onClick={() => handleDeleteClick(prompt.id, prompt.name)}
                              disabled={prompt.isDefault}
                              title={prompt.isDefault ? "N√£o √© poss√≠vel excluir prompts padr√£o" : "Excluir prompt"}
                            >
                              <Trash2 size={14} />
                            </Button>
                          </div>
                        </div>
                      </CardHeader>
                      
                      <CardContent className="flex-1 flex flex-col pt-0">
                        <CardDescription className={`
                          text-sm leading-relaxed flex-1 break-words overflow-hidden text-foreground/70
                          ${isMobile ? 'line-clamp-6' : 'line-clamp-4'}
                        `}>
                          {prompt.text}
                        </CardDescription>
                        <div className="mt-4 pt-3 border-t border-border/30">
                          <div className="text-xs text-muted-foreground">
                            Criado em {new Date(prompt.createdAt).toLocaleDateString('pt-BR')}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 px-4">
                  <div className="mx-auto w-16 h-16 bg-muted/50 rounded-full flex items-center justify-center mb-6">
                    <FileText className="h-8 w-8 text-muted-foreground" />
                  </div>
                  <h3 className="text-lg font-semibold mb-3">Nenhum prompt encontrado</h3>
                  <p className="text-sm text-muted-foreground mb-6 max-w-md mx-auto leading-relaxed">
                    {searchTerm ? 
                      "Tente ajustar os filtros ou termos de busca para encontrar o que procura" : 
                      "Comece criando seu primeiro prompt personalizado para seus agentes IA"
                    }
                  </p>
                  <Button 
                    onClick={() => setIsPromptModalOpen(true)} 
                    variant="outline" 
                    size="default"
                    className="px-6 py-3 h-11"
                  >
                    <Plus className="mr-2 h-4 w-4" />
                    Criar novo prompt
                  </Button>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* Modals */}
      <PromptModal
        isOpen={isPromptModalOpen}
        onClose={() => setIsPromptModalOpen(false)}
        onSubmit={handleSubmitPrompt}
        allNiches={allNiches}
      />

      <PromptModal
        isOpen={isEditModalOpen}
        onClose={() => {
          setIsEditModalOpen(false);
          setEditingPrompt(null);
        }}
        onSubmit={handleUpdatePrompt}
        editing={editingPrompt}
        allNiches={allNiches}
      />
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/WhatsAppConnections.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { Plus } from "lucide-react";
import { WhatsAppConnection, Customer } from "@/types/whatsapp";
import StatisticsSection from "@/components/whatsapp/StatisticsSection";
import SearchControl from "@/components/whatsapp/SearchControl";
import CustomerFilter from "@/components/whatsapp/CustomerFilter";
import ConnectionsList from "@/components/whatsapp/ConnectionsList";
import NewConnectionModal from "@/components/whatsapp/NewConnectionModal";
import QRCodeModal from "@/components/whatsapp/QRCodeModal";
import ConnectionSettings from "@/components/whatsapp/ConnectionSettings";

// Dados simulados de conex√µes
const MOCK_CONNECTIONS: WhatsAppConnection[] = [
  {
    id: "conn-1",
    name: "Atendimento Principal",
    phoneNumber: "+5511999991111",
    customerId: "customer-1",
    customerName: "Padaria S√£o Jos√©",
    status: "connected",
    lastActive: "2023-05-16T14:32:00Z",
    messageCount: 2456
  },
  {
    id: "conn-2",
    name: "Vendas",
    phoneNumber: "+5511999992222",
    customerId: "customer-1",
    customerName: "Padaria S√£o Jos√©",
    status: "connected",
    lastActive: "2023-05-16T10:15:00Z",
    messageCount: 1280
  },
  {
    id: "conn-3",
    name: "Suporte",
    phoneNumber: "+5511999993333",
    customerId: "customer-2",
    customerName: "Farm√°cia Bem Estar",
    status: "disconnected",
    lastActive: "2023-05-15T18:45:00Z",
    messageCount: 5670
  },
  {
    id: "conn-4",
    name: "Agendamentos",
    phoneNumber: "+5511999994444",
    customerId: "customer-3",
    customerName: "Cl√≠nica Sa√∫de Total",
    status: "pending",
    lastActive: "2023-05-16T09:00:00Z",
    messageCount: 834
  }
];

// Lista mockada de clientes para selecionar
const MOCK_CUSTOMERS: Customer[] = [
  { id: "customer-1", name: "Padaria S√£o Jos√©" },
  { id: "customer-2", name: "Farm√°cia Bem Estar" },
  { id: "customer-3", name: "Cl√≠nica Sa√∫de Total" },
  { id: "customer-4", name: "Restaurante Sabor Caseiro" },
];

export default function WhatsAppConnections() {
  const [connections, setConnections] = useState<WhatsAppConnection[]>(MOCK_CONNECTIONS);
  const [searchTerm, setSearchTerm] = useState("");
  const [isNewConnectionModalOpen, setIsNewConnectionModalOpen] = useState(false);
  const [isQrCodeModalOpen, setIsQrCodeModalOpen] = useState(false);
  const [currentConnection, setCurrentConnection] = useState<WhatsAppConnection | null>(null);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [customerFilter, setCustomerFilter] = useState<string | null>(null);

  // Filtrar conex√µes com base na busca e filtro de cliente
  const filteredConnections = connections.filter(connection => {
    const matchesSearch = searchTerm === "" || 
      connection.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      connection.phoneNumber.includes(searchTerm) ||
      connection.customerName.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCustomer = !customerFilter || connection.customerId === customerFilter;
    
    return matchesSearch && matchesCustomer;
  });

  // Fun√ß√£o para gerar um QR Code para conex√£o
  const handleGenerateQrCode = (connection: WhatsAppConnection) => {
    setCurrentConnection(connection);
    setIsQrCodeModalOpen(true);
  };

  // Simula√ß√£o de conex√£o via QR Code
  const handleSimulateConnection = () => {
    if (!currentConnection) return;
    
    setTimeout(() => {
      setConnections(prev => prev.map(conn => 
        conn.id === currentConnection.id 
          ? { ...conn, status: "connected" } 
          : conn
      ));
      
      setIsQrCodeModalOpen(false);
      setCurrentConnection(null);
      toast.success("Conex√£o estabelecida com sucesso!");
    }, 2000);
  };

  // Cria√ß√£o de nova conex√£o
  const handleCreateConnection = (newConnectionData: { name: string; phoneNumber: string; customerId: string }) => {
    if (!newConnectionData.name || !newConnectionData.customerId) {
      toast.error("Por favor, preencha todos os campos obrigat√≥rios.");
      return;
    }

    const customer = MOCK_CUSTOMERS.find(c => c.id === newConnectionData.customerId);
    
    if (!customer) {
      toast.error("Cliente n√£o encontrado.");
      return;
    }

    const newConn: WhatsAppConnection = {
      id: `conn-${Date.now()}`,
      name: newConnectionData.name,
      phoneNumber: newConnectionData.phoneNumber || "Pendente",
      customerId: newConnectionData.customerId,
      customerName: customer.name,
      status: "pending",
      lastActive: new Date().toISOString(),
      messageCount: 0
    };

    setConnections(prev => [...prev, newConn]);
    setIsNewConnectionModalOpen(false);
    toast.success("Nova conex√£o WhatsApp criada! Escaneie o QR Code para conectar.");
    
    // Imediatamente abrir QR Code para a nova conex√£o
    setTimeout(() => {
      setCurrentConnection(newConn);
      setIsQrCodeModalOpen(true);
    }, 500);
  };

  // Remover conex√£o
  const handleDeleteConnection = (connectionId: string) => {
    setConnections(prev => prev.filter(conn => conn.id !== connectionId));
    toast.success("Conex√£o removida com sucesso.");
  };

  // Acessar chat/mensagens de uma conex√£o
  const handleViewMessages = (connection: WhatsAppConnection) => {
    toast.info(`Visualizando mensagens de ${connection.name}. Esta funcionalidade estar√° dispon√≠vel em breve.`);
  };

  return (
    <DashboardLayout title="Conex√µes WhatsApp">
      <div className="space-y-6">
        {/* Estat√≠sticas e controles */}
        <div className="flex flex-col md:flex-row items-center justify-between gap-4">
          <StatisticsSection connections={connections} />
          
          <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
            <SearchControl 
              searchTerm={searchTerm}
              onSearchChange={setSearchTerm}
            />
            <Button onClick={() => setIsNewConnectionModalOpen(true)}>
              <Plus className="mr-2 h-4 w-4" />
              Nova Conex√£o
            </Button>
          </div>
        </div>

        {/* Filtro de cliente */}
        <CustomerFilter 
          customers={MOCK_CUSTOMERS}
          selectedCustomerId={customerFilter}
          onSelectCustomer={setCustomerFilter}
        />

        {/* Lista de conex√µes */}
        <ConnectionsList
          connections={filteredConnections}
          searchTerm={searchTerm}
          onClearSearch={() => setSearchTerm("")}
          onGenerateQrCode={handleGenerateQrCode}
          onViewMessages={handleViewMessages}
          onOpenSettings={(connection) => {
            setCurrentConnection(connection);
            setIsSettingsOpen(true);
          }}
          onDeleteConnection={handleDeleteConnection}
        />

        {/* Modais */}
        <NewConnectionModal
          isOpen={isNewConnectionModalOpen}
          onClose={() => setIsNewConnectionModalOpen(false)}
          onCreateConnection={handleCreateConnection}
          customers={MOCK_CUSTOMERS}
        />

        <QRCodeModal 
          isOpen={isQrCodeModalOpen}
          onClose={() => setIsQrCodeModalOpen(false)}
          onConnect={handleSimulateConnection}
        />

        <ConnectionSettings
          isOpen={isSettingsOpen}
          onClose={() => setIsSettingsOpen(false)}
          connection={currentConnection}
          onDeleteConnection={handleDeleteConnection}
        />
      </div>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/Agents.tsx
================================================================================\n

import DashboardLayout from "@/components/layout/DashboardLayout";
import AgentsContainer from "@/components/agents/AgentsContainer";
import { useAuthCheck } from "@/hooks/useAuthCheck";
import { Navigate } from "react-router-dom";

export default function Agents() {
  const { user, loading } = useAuthCheck();

  console.log('Agents page - Auth state:', { user: user?.id, loading });

  if (loading) {
    return (
      <DashboardLayout title="Agentes">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Carregando...</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  if (!user) {
    console.log('No user found, redirecting to login');
    return <Navigate to="/login" replace />;
  }

  console.log('User authenticated, rendering agents page for:', user.id);

  // Use the authenticated user's ID as franchiseeId
  return (
    <DashboardLayout title="Agentes">
      <AgentsContainer 
        initialAgents={[]}
        initialCustomers={[]}
        franchiseeId={user.id}
      />
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/Plans.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { MONTHLY_PLANS, ANNUAL_PLANS, getPlanById } from "@/constants/plans";
import PlanCard from "@/components/plans/PlanCard";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Plan } from "@/types";
import { ArrowRight, Calendar, CalendarCheck, Info } from "lucide-react";
import { formatCurrency } from "@/constants/plans";
import { toast } from "sonner";
import { useNavigate } from "react-router-dom";

// Mock data for the current franchisee
const MOCK_FRANCHISEE = {
  id: "franchisee1",
  name: "Jo√£o Silva",
  email: "joao@exemplo.com",
  role: "franchisee" as const,
  agentCount: 2,
  revenue: 1500,
  isActive: true,
  createdAt: "2023-01-15",
  customerCount: 5,
  planId: "starter-monthly",
  planType: "monthly" as const,
  planExpiresAt: "2023-12-31"
};

export default function Plans() {
  const [billingCycle, setBillingCycle] = useState<"monthly" | "annual">("monthly");
  const [confirmDialog, setConfirmDialog] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);
  const navigate = useNavigate();
  
  // In a real app, this would come from user context or API
  const currentPlanId = MOCK_FRANCHISEE.planId;
  const currentPlan = currentPlanId ? getPlanById(currentPlanId) : null;
  const plansToShow = billingCycle === "monthly" ? MONTHLY_PLANS : ANNUAL_PLANS;
  
  const handlePlanSelect = (planId: string) => {
    const plan = getPlanById(planId);
    if (plan) {
      setSelectedPlan(plan);
      setConfirmDialog(true);
    }
  };
  
  const handleConfirmPlan = () => {
    if (selectedPlan) {
      // In a real app, this would call an API to update the subscription
      toast.success(`Plano ${selectedPlan.name} ativado com sucesso!`);
      setConfirmDialog(false);
      setSelectedPlan(null);
      
      // In a real app, this would redirect after the API call completes
      setTimeout(() => {
        navigate("/franchisee/agents");
      }, 2000);
    }
  };
  
  return (
    <DashboardLayout title="Planos de Assinatura">
      <div className="space-y-6">
        {/* Current plan overview */}
        {currentPlan && (
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-lg">Seu Plano Atual</CardTitle>
              <CardDescription>Detalhes do seu plano de assinatura</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col sm:flex-row gap-4 sm:items-center sm:justify-between">
                <div>
                  <h3 className="font-medium">{currentPlan.name}</h3>
                  <p className="text-sm text-muted-foreground">
                    {currentPlan.billingCycle === "monthly" ? "Cobran√ßa mensal" : "Cobran√ßa anual"}
                  </p>
                </div>
                <div className="flex flex-col sm:items-end">
                  <p className="text-lg font-semibold">{formatCurrency(currentPlan.price)}</p>
                  <div className="flex items-center gap-1 text-sm text-muted-foreground">
                    <CalendarCheck className="h-3 w-3" />
                    <span>Pr√≥xima cobran√ßa em: 15/06/2025</span>
                  </div>
                </div>
              </div>
              
              <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-muted/50 p-4 rounded-lg">
                  <p className="text-sm text-muted-foreground">Limite de agentes</p>
                  <p className="text-lg font-medium">
                    {MOCK_FRANCHISEE.agentCount} / {currentPlan.agentLimit} agentes
                  </p>
                  <div className="w-full bg-muted rounded-full h-1.5 mt-2">
                    <div 
                      className="bg-primary h-1.5 rounded-full" 
                      style={{ width: `${(MOCK_FRANCHISEE.agentCount / currentPlan.agentLimit) * 100}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
        
        {/* Pricing tabs */}
        <div className="text-center space-y-4">
          <h2 className="text-2xl font-bold">Escolha seu plano</h2>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            Selecione o melhor plano para as necessidades do seu neg√≥cio. Voc√™ pode trocar a qualquer momento.
          </p>
          
          <Tabs defaultValue="monthly" value={billingCycle} onValueChange={(v) => setBillingCycle(v as "monthly" | "annual")} className="w-full max-w-md mx-auto">
            <TabsList className="grid grid-cols-2 w-full">
              <TabsTrigger value="monthly">Mensal</TabsTrigger>
              <TabsTrigger value="annual">Anual</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>
        
        {/* Plan cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {plansToShow.map((plan) => (
            <PlanCard 
              key={plan.id}
              plan={plan}
              currentPlanId={currentPlanId}
              onSelect={handlePlanSelect}
            />
          ))}
        </div>
        
        {/* Help card */}
        <Card className="bg-muted/50 border-muted">
          <CardHeader className="pb-3">
            <div className="flex items-center gap-2">
              <Info className="h-4 w-4 text-muted-foreground" />
              <CardTitle className="text-base">Precisa de ajuda para escolher?</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              Se voc√™ n√£o tem certeza de qual plano escolher ou tem d√∫vidas sobre os recursos,
              nossa equipe de suporte est√° dispon√≠vel para ajudar.
            </p>
            <Button variant="link" className="p-0 h-auto mt-2">
              Fale com o suporte
            </Button>
          </CardContent>
        </Card>
      </div>
      
      {/* Confirm plan dialog */}
      {selectedPlan && (
        <Dialog open={confirmDialog} onOpenChange={setConfirmDialog}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Confirmar altera√ß√£o de plano</DialogTitle>
              <DialogDescription>
                Voc√™ est√° prestes a alterar seu plano de assinatura.
              </DialogDescription>
            </DialogHeader>
            
            {currentPlan && (
              <div className="flex flex-col gap-4">
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="space-y-1">
                    <p className="text-muted-foreground">Plano atual:</p>
                    <p className="font-medium">{currentPlan.name}</p>
                    <p>{formatCurrency(currentPlan.price)} / {currentPlan.billingCycle === "monthly" ? "m√™s" : "ano"}</p>
                  </div>
                  
                  <div className="space-y-1">
                    <p className="text-muted-foreground">Novo plano:</p>
                    <p className="font-medium">{selectedPlan.name}</p>
                    <p>{formatCurrency(selectedPlan.price)} / {selectedPlan.billingCycle === "monthly" ? "m√™s" : "ano"}</p>
                  </div>
                </div>
                
                <div className="flex items-center justify-center py-2">
                  <div className="bg-muted w-full h-px" />
                  <ArrowRight className="mx-4 text-muted-foreground" />
                  <div className="bg-muted w-full h-px" />
                </div>
                
                <p className="text-sm text-center">
                  {currentPlan.agentLimit < selectedPlan.agentLimit
                    ? `Voc√™ aumentar√° seu limite de ${currentPlan.agentLimit} para ${selectedPlan.agentLimit} agentes.`
                    : currentPlan.agentLimit > selectedPlan.agentLimit
                      ? `Voc√™ reduzir√° seu limite de ${currentPlan.agentLimit} para ${selectedPlan.agentLimit} agentes.`
                      : "Voc√™ manter√° o mesmo limite de agentes, mas com um ciclo de cobran√ßa diferente."
                  }
                </p>
                
                {MOCK_FRANCHISEE.agentCount > selectedPlan.agentLimit && (
                  <div className="bg-amber-50 border border-amber-200 text-amber-800 rounded-md p-3 text-sm">
                    <p>‚ö†Ô∏è Voc√™ atualmente possui {MOCK_FRANCHISEE.agentCount} agentes, mas o novo plano permite apenas {selectedPlan.agentLimit}.</p>
                    <p className="mt-1">Se prosseguir, voc√™ precisar√° desativar alguns agentes para ficar dentro do limite do plano.</p>
                  </div>
                )}
              </div>
            )}
            
            <DialogFooter>
              <Button variant="outline" onClick={() => setConfirmDialog(false)}>
                Cancelar
              </Button>
              <Button onClick={handleConfirmPlan}>
                Confirmar
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/franchisee/Schedule.tsx
================================================================================\n

import { useState } from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Clock, Plus, User, X } from "lucide-react";
import { cn } from "@/lib/utils";
import { Calendar } from "@/components/ui/calendar";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { useIsMobile } from "@/hooks/use-mobile";

// Tipos para o sistema de agendamento
interface Appointment {
  id: string;
  title: string;
  customerName: string;
  contactPhone: string;
  date: string;
  time: string;
  duration: number; // em minutos
  notes?: string;
  agentId: string;
  status: "scheduled" | "completed" | "canceled";
}

// Dados de exemplo
const MOCK_APPOINTMENTS: Appointment[] = [
  {
    id: "apt1",
    title: "Reuni√£o de Apresenta√ß√£o",
    customerName: "Jo√£o Silva",
    contactPhone: "+5511999990001",
    date: new Date().toISOString(),
    time: "14:00",
    duration: 30,
    notes: "Cliente interessado em implementar agente para setor de atendimento",
    agentId: "agent1",
    status: "scheduled",
  },
  {
    id: "apt2",
    title: "Demonstra√ß√£o de Produto",
    customerName: "Maria Oliveira",
    contactPhone: "+5511999990002",
    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Amanh√£
    time: "10:30",
    duration: 45,
    notes: "Preparar demo do agente de vendas",
    agentId: "agent2",
    status: "scheduled",
  },
  {
    id: "apt3",
    title: "Suporte T√©cnico",
    customerName: "Carlos Pereira",
    contactPhone: "+5511999990003",
    date: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(), // 2 dias atr√°s
    time: "16:15",
    duration: 60,
    agentId: "agent3",
    status: "completed",
  }
];

// Lista de hor√°rios dispon√≠veis para agendamento
const TIME_SLOTS = [
  "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
  "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30"
];

// Lista de dura√ß√µes de compromisso
const DURATIONS = [
  { value: 15, label: "15 minutos" },
  { value: 30, label: "30 minutos" },
  { value: 45, label: "45 minutos" },
  { value: 60, label: "1 hora" },
  { value: 90, label: "1 hora e 30 minutos" },
  { value: 120, label: "2 horas" },
];

export default function Schedule() {
  const [date, setDate] = useState<Date | undefined>(new Date());
  const [appointments, setAppointments] = useState<Appointment[]>(MOCK_APPOINTMENTS);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [newAppointment, setNewAppointment] = useState<Partial<Appointment>>({
    date: new Date().toISOString(),
    time: "14:00",
    duration: 30,
    status: "scheduled",
    agentId: "agent1"
  });
  const [currentAppointment, setCurrentAppointment] = useState<Appointment | null>(null);
  const isMobile = useIsMobile();

  const handleDateSelect = (selectedDate: Date | undefined) => {
    setDate(selectedDate);
  };

  const getDayAppointments = () => {
    if (!date) return [];
    
    return appointments.filter(apt => {
      const aptDate = new Date(apt.date);
      return aptDate.toDateString() === date.toDateString();
    });
  };

  const handleCreateAppointment = () => {
    const appointmentId = `apt${Date.now()}`;
    
    const newApt: Appointment = {
      id: appointmentId,
      title: newAppointment.title || "",
      customerName: newAppointment.customerName || "",
      contactPhone: newAppointment.contactPhone || "",
      date: date ? date.toISOString() : new Date().toISOString(),
      time: newAppointment.time || "09:00",
      duration: newAppointment.duration || 30,
      notes: newAppointment.notes,
      agentId: newAppointment.agentId || "agent1",
      status: "scheduled"
    };
    
    setAppointments([...appointments, newApt]);
    setIsCreateModalOpen(false);
    setNewAppointment({
      date: new Date().toISOString(),
      time: "14:00",
      duration: 30,
      status: "scheduled",
      agentId: "agent1"
    });
    
    toast.success("Compromisso agendado com sucesso!");
  };

  const handleCancelAppointment = (id: string) => {
    setAppointments(appointments.map(apt => 
      apt.id === id ? { ...apt, status: "canceled" as const } : apt
    ));
    setIsViewModalOpen(false);
    toast.info("Compromisso cancelado com sucesso!");
  };

  const handleCompleteAppointment = (id: string) => {
    setAppointments(appointments.map(apt => 
      apt.id === id ? { ...apt, status: "completed" as const } : apt
    ));
    setIsViewModalOpen(false);
    toast.success("Compromisso marcado como conclu√≠do!");
  };

  const viewAppointment = (appointment: Appointment) => {
    setCurrentAppointment(appointment);
    setIsViewModalOpen(true);
  };

  const formatAppointmentDate = (dateString: string) => {
    const date = new Date(dateString);
    return format(date, "dd/MM/yyyy");
  };

  const dayAppointments = getDayAppointments();

  const getAppointmentStatusBadge = (status: Appointment["status"]) => {
    switch (status) {
      case "scheduled":
        return <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">Agendado</Badge>;
      case "completed":
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Conclu√≠do</Badge>;
      case "canceled":
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">Cancelado</Badge>;
      default:
        return null;
    }
  };

  return (
    <DashboardLayout title="Agenda">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Calend√°rio e bot√£o de novo compromisso */}
        <Card className="lg:col-span-1">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-medium flex justify-between items-center">
              <span>Calend√°rio</span>
              <Button 
                size="sm" 
                onClick={() => setIsCreateModalOpen(true)} 
                className="h-8"
              >
                <Plus className="mr-1 h-4 w-4" /> Novo
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col items-center">
              <Calendar
                mode="single"
                selected={date}
                onSelect={handleDateSelect}
                className={cn("p-3 pointer-events-auto w-full")}
                classNames={{
                  day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
                  day_today: "bg-accent text-accent-foreground"
                }}
              />
            </div>
          </CardContent>
        </Card>

        {/* Lista de compromissos do dia selecionado */}
        <Card className="lg:col-span-2">
          <CardHeader className="pb-3">
            <CardTitle className="text-lg font-medium">
              {date ? `Compromissos: ${format(date, "dd/MM/yyyy")}` : "Selecione uma data"}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {dayAppointments.length > 0 ? (
              <div className="space-y-4">
                {dayAppointments.map((appointment) => (
                  <div 
                    key={appointment.id}
                    className={cn(
                      "p-4 border rounded-lg cursor-pointer transition-colors",
                      appointment.status === "canceled" ? "bg-gray-50 border-gray-200" : "hover:border-primary/50",
                      appointment.status === "completed" ? "bg-green-50 border-green-100" : ""
                    )}
                    onClick={() => viewAppointment(appointment)}
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="font-medium">{appointment.title}</h3>
                        <div className="text-sm text-muted-foreground mt-1">
                          <div className="flex items-center">
                            <Clock className="h-3.5 w-3.5 mr-1" />
                            <span>{appointment.time} ({appointment.duration} min)</span>
                          </div>
                          <div className="flex items-center mt-1">
                            <User className="h-3.5 w-3.5 mr-1" />
                            <span>{appointment.customerName}</span>
                          </div>
                        </div>
                      </div>
                      <div>
                        {getAppointmentStatusBadge(appointment.status)}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-64 text-muted-foreground">
                <Calendar className="h-12 w-12 stroke-1 mb-2 opacity-30" />
                <p>Nenhum compromisso para esta data</p>
                <Button 
                  variant="link" 
                  onClick={() => setIsCreateModalOpen(true)}
                  className="mt-2"
                >
                  Adicionar compromisso
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Modal de cria√ß√£o de compromisso */}
      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
        <DialogContent className={cn("sm:max-w-[500px]", isMobile && "w-[95%] max-w-[95%]")}>
          <DialogHeader>
            <DialogTitle>Novo Compromisso</DialogTitle>
            <DialogDescription>
              Crie um novo compromisso na agenda.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-2">
            <div className="grid gap-2">
              <Label htmlFor="title">T√≠tulo</Label>
              <Input
                id="title"
                placeholder="Ex: Reuni√£o de apresenta√ß√£o"
                value={newAppointment.title || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, title: e.target.value })}
              />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="date">Data</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      id="date"
                      variant="outline"
                      className={cn(
                        "justify-start text-left font-normal",
                        !date && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {date ? format(date, "dd/MM/yyyy") : "Selecione uma data"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={date}
                      onSelect={setDate}
                      initialFocus
                      className={cn("p-3 pointer-events-auto")}
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="time">Hor√°rio</Label>
                <Select 
                  value={newAppointment.time || "14:00"}
                  onValueChange={(value) => setNewAppointment({ ...newAppointment, time: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione um hor√°rio" />
                  </SelectTrigger>
                  <SelectContent>
                    {TIME_SLOTS.map((time) => (
                      <SelectItem key={time} value={time}>{time}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid gap-2">
              <Label htmlFor="duration">Dura√ß√£o</Label>
              <Select 
                value={String(newAppointment.duration || "30")}
                onValueChange={(value) => setNewAppointment({ ...newAppointment, duration: parseInt(value) })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecione a dura√ß√£o" />
                </SelectTrigger>
                <SelectContent>
                  {DURATIONS.map((duration) => (
                    <SelectItem key={duration.value} value={String(duration.value)}>
                      {duration.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid gap-2">
              <Label htmlFor="customer">Nome do Cliente</Label>
              <Input 
                id="customer" 
                placeholder="Nome do cliente"
                value={newAppointment.customerName || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, customerName: e.target.value })}
              />
            </div>

            <div className="grid gap-2">
              <Label htmlFor="phone">Telefone de Contato</Label>
              <Input 
                id="phone" 
                placeholder="+55 (00) 00000-0000"
                value={newAppointment.contactPhone || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, contactPhone: e.target.value })}
              />
            </div>

            <div className="grid gap-2">
              <Label htmlFor="notes">Observa√ß√µes</Label>
              <Textarea 
                id="notes" 
                placeholder="Adicione notas ou observa√ß√µes sobre o compromisso"
                rows={3}
                value={newAppointment.notes || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, notes: e.target.value })}
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateModalOpen(false)}>
              Cancelar
            </Button>
            <Button onClick={handleCreateAppointment}>
              Agendar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Modal de visualiza√ß√£o/edi√ß√£o de compromisso */}
      <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>
        <DialogContent className={cn("sm:max-w-[500px]", isMobile && "w-[95%] max-w-[95%]")}>
          {currentAppointment && (
            <>
              <DialogHeader>
                <div className="flex items-center justify-between">
                  <DialogTitle>{currentAppointment.title}</DialogTitle>
                  {getAppointmentStatusBadge(currentAppointment.status)}
                </div>
              </DialogHeader>
    
              <div className="space-y-4 py-2">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Data</p>
                    <p>{formatAppointmentDate(currentAppointment.date)}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Hor√°rio</p>
                    <p>{currentAppointment.time} ({currentAppointment.duration} min)</p>
                  </div>
                </div>
    
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Cliente</p>
                  <p>{currentAppointment.customerName}</p>
                </div>
    
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Contato</p>
                  <p>{currentAppointment.contactPhone}</p>
                </div>
    
                {currentAppointment.notes && (
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Observa√ß√µes</p>
                    <p className="text-sm">{currentAppointment.notes}</p>
                  </div>
                )}
              </div>
    
              <DialogFooter>
                {currentAppointment.status === "scheduled" && (
                  <>
                    <Button 
                      variant="outline" 
                      className="border-red-300 hover:bg-red-50 text-red-600" 
                      onClick={() => handleCancelAppointment(currentAppointment.id)}
                    >
                      Cancelar Compromisso
                    </Button>
                    <Button onClick={() => handleCompleteAppointment(currentAppointment.id)}>
                      Marcar como Conclu√≠do
                    </Button>
                  </>
                )}
                
                {currentAppointment.status !== "scheduled" && (
                  <Button variant="outline" onClick={() => setIsViewModalOpen(false)}>
                    Fechar
                  </Button>
                )}
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/Auth.tsx
================================================================================\n

import { useState, FormEvent } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/context/AuthContext";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Bot } from "lucide-react";
import { toast } from "sonner";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { supabase } from "@/integrations/supabase/client";

export default function Auth() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [name, setName] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();
  
  const handleLogin = async (e: FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await login(email, password);
      toast.success("Login realizado com sucesso!");
      navigate("/dashboard");
    } catch (error: any) {
      console.error("Login error:", error);
      if (error.message.includes("Invalid login credentials")) {
        toast.error("Email ou senha incorretos. Verifique suas credenciais.");
      } else if (error.message.includes("Email not confirmed")) {
        toast.error("Por favor, confirme seu email antes de fazer login.");
      } else {
        toast.error(error.message || "Falha ao fazer login. Verifique suas credenciais.");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSignUp = async (e: FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            name: name
          },
          emailRedirectTo: `${window.location.origin}/dashboard`
        }
      });

      if (error) throw error;

      if (data.user?.email_confirmed_at) {
        toast.success("Conta criada com sucesso! Fazendo login...");
        // Auto login after successful signup
        await login(email, password);
        navigate("/dashboard");
      } else {
        toast.success("Conta criada! Verifique seu email para confirmar a conta.");
      }
    } catch (error: any) {
      console.error("Signup error:", error);
      if (error.message.includes("User already registered")) {
        toast.error("Este email j√° est√° cadastrado. Tente fazer login.");
      } else {
        toast.error(error.message || "Erro ao criar conta.");
      }
    } finally {
      setIsLoading(false);
    }
  };
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4">
      <Card className="w-full max-w-md shadow-lg">
        <CardHeader className="text-center pb-2">
          <div className="mx-auto w-14 h-14 bg-primary rounded-xl flex items-center justify-center mb-4">
            <Bot size={28} className="text-white" />
          </div>
          <CardTitle className="text-2xl">AgentsFy</CardTitle>
          <CardDescription className="text-muted-foreground">
            Plataforma de microfranquias para agentes de IA no WhatsApp
          </CardDescription>
        </CardHeader>
        
        <CardContent className="pt-6">
          <Tabs defaultValue="login" className="space-y-6">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="login">Entrar</TabsTrigger>
              <TabsTrigger value="signup">Cadastrar</TabsTrigger>
            </TabsList>
            
            <TabsContent value="login">
              <form onSubmit={handleLogin} className="space-y-4">
                <div className="space-y-2">
                  <label htmlFor="login-email" className="text-sm font-medium">
                    Email
                  </label>
                  <Input 
                    id="login-email" 
                    type="email" 
                    placeholder="seu@email.com" 
                    autoComplete="email" 
                    value={email} 
                    onChange={e => setEmail(e.target.value)} 
                    disabled={isLoading} 
                    required 
                  />
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="login-password" className="text-sm font-medium">
                    Senha
                  </label>
                  <Input 
                    id="login-password" 
                    type="password" 
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                    autoComplete="current-password" 
                    value={password} 
                    onChange={e => setPassword(e.target.value)} 
                    disabled={isLoading} 
                    required 
                  />
                </div>
                
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? "Entrando..." : "Entrar"}
                </Button>
              </form>
            </TabsContent>
            
            <TabsContent value="signup">
              <form onSubmit={handleSignUp} className="space-y-4">
                <div className="space-y-2">
                  <label htmlFor="signup-name" className="text-sm font-medium">
                    Nome
                  </label>
                  <Input 
                    id="signup-name" 
                    type="text" 
                    placeholder="Seu nome completo" 
                    autoComplete="name" 
                    value={name} 
                    onChange={e => setName(e.target.value)} 
                    disabled={isLoading} 
                    required 
                  />
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="signup-email" className="text-sm font-medium">
                    Email
                  </label>
                  <Input 
                    id="signup-email" 
                    type="email" 
                    placeholder="seu@email.com" 
                    autoComplete="email" 
                    value={email} 
                    onChange={e => setEmail(e.target.value)} 
                    disabled={isLoading} 
                    required 
                  />
                </div>
                
                <div className="space-y-2">
                  <label htmlFor="signup-password" className="text-sm font-medium">
                    Senha
                  </label>
                  <Input 
                    id="signup-password" 
                    type="password" 
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                    autoComplete="new-password" 
                    value={password} 
                    onChange={e => setPassword(e.target.value)} 
                    disabled={isLoading} 
                    required 
                    minLength={6}
                  />
                </div>
                
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? "Criando conta..." : "Criar conta"}
                </Button>
              </form>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/pages/Login.tsx
================================================================================\n

import { useState, FormEvent } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/context/AuthContext";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Bot } from "lucide-react";
import { toast } from "sonner";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ThemeToggle } from "@/components/ui/theme-toggle";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();
  
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      await login(email, password);
      toast.success("Login realizado com sucesso!");
      navigate("/dashboard");
    } catch (error) {
      console.error("Login error:", error);
      toast.error("Falha ao fazer login. Verifique suas credenciais.");
    } finally {
      setIsLoading(false);
    }
  };

  const demoCredentials = [
    { role: "Admin", email: "admin@example.com", password: "admin123" },
    { role: "Franqueado", email: "joao@example.com", password: "joao123" },
    { role: "Cliente", email: "maria@example.com", password: "maria123" },
  ];
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4 relative">
      {/* Background gradient */}
      <div className="absolute inset-0 gradient-bg opacity-5 z-0" />
      
      {/* Theme toggle */}
      <div className="absolute top-4 right-4 z-20">
        <ThemeToggle />
      </div>
      
      {/* Login card */}
      <Card className="w-full max-w-md shadow-lg z-10">
        <CardHeader className="text-center pb-2">
          <div className="mx-auto w-14 h-14 bg-primary rounded-xl flex items-center justify-center mb-4">
            <Bot size={28} className="text-white" />
          </div>
          <CardTitle className="text-2xl">AgentsFy</CardTitle>
          <CardDescription className="text-muted-foreground">
            Plataforma de microfranquias para agentes de IA no WhatsApp
          </CardDescription>
        </CardHeader>
        
        <CardContent className="pt-6 space-y-6">
          {/* Login form */}
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="email" className="text-sm font-medium">
                Email
              </label>
              <Input 
                id="email" 
                type="email" 
                placeholder="seu@email.com" 
                autoComplete="email" 
                value={email} 
                onChange={e => setEmail(e.target.value)} 
                disabled={isLoading} 
                required 
              />
            </div>
            
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <label htmlFor="password" className="text-sm font-medium">
                  Senha
                </label>
                <a href="#" className="text-xs text-primary hover:underline">
                  Esqueceu a senha?
                </a>
              </div>
              <Input 
                id="password" 
                type="password" 
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                autoComplete="current-password" 
                value={password} 
                onChange={e => setPassword(e.target.value)} 
                disabled={isLoading} 
                required 
              />
            </div>
            
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Entrando..." : "Entrar"}
            </Button>
          </form>
          
          {/* Demo credentials */}
          <div className="text-center text-sm text-muted-foreground">
            <p className="mb-2">Credenciais de demonstra√ß√£o:</p>
            <div className="space-y-1 text-xs">
              {demoCredentials.map((cred, index) => (
                <div key={index} className="p-2 rounded bg-muted">
                  <strong>{cred.role}:</strong> {cred.email} / {cred.password}
                </div>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
ARQUIVO: ./src/pages/customer/Dashboard.tsx
================================================================================\n

import { useState, useEffect } from 'react';
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Agent, Customer } from "@/types";
import WhatsAppConnectionCard from '@/components/whatsapp/WhatsAppConnectionCard';

// Mock data for demonstration
const MOCK_CUSTOMER: Customer = {
  id: "customer1",
  name: "Jo√£o Silva",
  email: "joao@empresaa.com",
  businessName: "Empresa A",
  role: "customer",
  franchiseeId: "franchisee1",
  agentCount: 1,
  createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
  document: "12.345.678/0001-90",
  contactPhone: "+5511977777777",
};

const MOCK_AGENT: Agent = {
  id: "agent1",
  name: "Atendente Virtual",
  sector: "Atendimento ao Cliente",
  prompt: "Voc√™ √© um atendente virtual especializado em responder d√∫vidas sobre produtos e servi√ßos da empresa.",
  isActive: true,
  createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
  customerId: "customer1",
  franchiseeId: "franchisee1",
  openAiKey: "sk-xxxxxxxxxxxxxxxxxxxx",
  whatsappConnected: false,
  messageCount: 0,
  responseTime: 0,
};

export default function CustomerDashboard() {
  const [customer, setCustomer] = useState<Customer>(MOCK_CUSTOMER);
  const [agent, setAgent] = useState<Agent>(MOCK_AGENT);
  const [activeTab, setActiveTab] = useState<string>("overview");

  const handleRefreshAgent = (updatedAgent: Agent) => {
    setAgent({ ...updatedAgent, whatsappConnected: true });
  };

  return (
    <DashboardLayout title="Dashboard do Cliente">
      <div className="space-y-6">
        <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="space-y-4">
          <TabsList>
            <TabsTrigger value="overview">Vis√£o Geral</TabsTrigger>
            <TabsTrigger value="messages">Mensagens</TabsTrigger>
            <TabsTrigger value="settings">Configura√ß√µes</TabsTrigger>
          </TabsList>
          
          <TabsContent value="overview" className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Perfil da Empresa</CardTitle>
                  <CardDescription>Informa√ß√µes do seu neg√≥cio</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div>
                      <p className="text-sm text-muted-foreground">Nome da Empresa</p>
                      <p className="font-medium">{customer.businessName}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Respons√°vel</p>
                      <p className="font-medium">{customer.name}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Email</p>
                      <p className="font-medium">{customer.email}</p>
                    </div>
                    {customer.document && (
                      <div>
                        <p className="text-sm text-muted-foreground">CNPJ/CPF</p>
                        <p className="font-medium">{customer.document}</p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <WhatsAppConnectionCard agent={agent} onRefresh={handleRefreshAgent} />

              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Estat√≠sticas</CardTitle>
                  <CardDescription>Desempenho do seu agente</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div>
                      <p className="text-sm text-muted-foreground">Mensagens Processadas</p>
                      <p className="font-medium">{agent.messageCount}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Tempo M√©dio de Resposta</p>
                      <p className="font-medium">{agent.responseTime || "-"} segundos</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground">Status do Agente</p>
                      <p className={`font-medium ${agent.isActive ? "text-green-500" : "text-red-500"}`}>
                        {agent.isActive ? "Ativo" : "Inativo"}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <Card>
              <CardHeader>
                <CardTitle>Agendamentos Recentes</CardTitle>
                <CardDescription>√öltimos compromissos marcados pelo seu agente</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <p className="text-muted-foreground">Nenhum agendamento recente</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="messages">
            <Card>
              <CardHeader>
                <CardTitle>Hist√≥rico de Mensagens</CardTitle>
                <CardDescription>Mensagens processadas pelo seu agente de IA</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-8">
                  <p className="text-muted-foreground">
                    {agent.whatsappConnected 
                      ? "Seu agente est√° conectado, mas ainda n√£o processou nenhuma mensagem" 
                      : "Conecte seu WhatsApp para come√ßar a receber mensagens"}
                  </p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          
          <TabsContent value="settings">
            <Card>
              <CardHeader>
                <CardTitle>Configura√ß√µes</CardTitle>
                <CardDescription>Gerencie as configura√ß√µes do seu agente</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground mb-4">
                  Para configura√ß√µes avan√ßadas do agente, utilize a p√°gina "Configurar IA" no menu lateral.
                </p>
                <p className="text-sm">
                  Para reconectar o WhatsApp ou alterar suas informa√ß√µes de perfil, entre em contato com seu franqueado.
                </p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/customer/Schedule.tsx
================================================================================\n

import { useState, useEffect } from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Clock, Plus, User, Phone, MessageSquare } from "lucide-react";
import { cn } from "@/lib/utils";
import { Calendar } from "@/components/ui/calendar";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { useIsMobile } from "@/hooks/use-mobile";

// Interface for appointments
interface Appointment {
  id: string;
  title: string;
  clientName: string;
  clientPhone: string;
  date: string;
  time: string;
  duration: number; // em minutos
  notes?: string;
  agentId: string;
  status: "scheduled" | "completed" | "canceled";
  isReminded: boolean;
}

// Mock data for testing
const MOCK_APPOINTMENTS: Appointment[] = [
  {
    id: "apt1",
    title: "Reuni√£o sobre novo projeto",
    clientName: "Carlos Santos",
    clientPhone: "+5511998887777",
    date: new Date().toISOString(),
    time: "14:30",
    duration: 30,
    notes: "Apresenta√ß√£o inicial do projeto e discuss√£o de objetivos",
    agentId: "agent1",
    status: "scheduled",
    isReminded: true
  },
  {
    id: "apt2",
    title: "Demo do produto",
    clientName: "Maria Oliveira",
    clientPhone: "+5511997776666",
    date: new Date(Date.now() + 48 * 60 * 60 * 1000).toISOString(), // 2 days ahead
    time: "10:00",
    duration: 45,
    notes: "Mostrar novos recursos do sistema",
    agentId: "agent1",
    status: "scheduled",
    isReminded: false
  },
  {
    id: "apt3",
    title: "Treinamento da equipe",
    clientName: "Jo√£o Silva",
    clientPhone: "+5511996665555",
    date: new Date(Date.now() - 72 * 60 * 60 * 1000).toISOString(), // 3 days ago
    time: "16:00",
    duration: 60,
    agentId: "agent1",
    status: "completed",
    isReminded: true
  },
  {
    id: "apt4",
    title: "Reuni√£o cancelada",
    clientName: "Ana Ferreira",
    clientPhone: "+5511995554444",
    date: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
    time: "09:30",
    duration: 30,
    agentId: "agent1",
    status: "canceled",
    isReminded: false
  }
];

// Available time slots
const TIME_SLOTS = [
  "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
  "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30"
];

// Duration options
const DURATIONS = [
  { value: 15, label: "15 minutos" },
  { value: 30, label: "30 minutos" },
  { value: 45, label: "45 minutos" },
  { value: 60, label: "1 hora" },
  { value: 90, label: "1 hora e 30 minutos" },
  { value: 120, label: "2 horas" },
];

export default function CustomerSchedule() {
  const [date, setDate] = useState<Date | undefined>(new Date());
  const [appointments, setAppointments] = useState<Appointment[]>(MOCK_APPOINTMENTS);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [newAppointment, setNewAppointment] = useState<Partial<Appointment>>({
    date: new Date().toISOString(),
    time: "14:00",
    duration: 30,
    status: "scheduled",
    agentId: "agent1",
    isReminded: false
  });
  const [currentAppointment, setCurrentAppointment] = useState<Appointment | null>(null);
  const isMobile = useIsMobile();

  const handleDateSelect = (selectedDate: Date | undefined) => {
    setDate(selectedDate);
  };

  const getDayAppointments = () => {
    if (!date) return [];
    
    return appointments.filter(apt => {
      const aptDate = new Date(apt.date);
      return aptDate.toDateString() === date.toDateString();
    }).sort((a, b) => {
      // Sort by time
      return a.time.localeCompare(b.time);
    });
  };

  const handleCreateAppointment = () => {
    const appointmentId = `apt${Date.now()}`;
    
    const newApt: Appointment = {
      id: appointmentId,
      title: newAppointment.title || "",
      clientName: newAppointment.clientName || "",
      clientPhone: newAppointment.clientPhone || "",
      date: date ? date.toISOString() : new Date().toISOString(),
      time: newAppointment.time || "09:00",
      duration: newAppointment.duration || 30,
      notes: newAppointment.notes,
      agentId: newAppointment.agentId || "agent1",
      status: "scheduled",
      isReminded: false
    };
    
    setAppointments([...appointments, newApt]);
    setIsCreateModalOpen(false);
    setNewAppointment({
      date: new Date().toISOString(),
      time: "14:00",
      duration: 30,
      status: "scheduled",
      agentId: "agent1",
      isReminded: false
    });
    
    toast.success("Compromisso agendado com sucesso!");
  };

  const handleCancelAppointment = (id: string) => {
    setAppointments(appointments.map(apt => 
      apt.id === id ? { ...apt, status: "canceled" as const } : apt
    ));
    setIsViewModalOpen(false);
    toast.info("Compromisso cancelado com sucesso!");
  };

  const handleCompleteAppointment = (id: string) => {
    setAppointments(appointments.map(apt => 
      apt.id === id ? { ...apt, status: "completed" as const } : apt
    ));
    setIsViewModalOpen(false);
    toast.success("Compromisso marcado como conclu√≠do!");
  };

  const handleSendReminder = (id: string) => {
    setAppointments(appointments.map(apt => 
      apt.id === id ? { ...apt, isReminded: true } : apt
    ));
    toast.success("Lembrete enviado com sucesso!");
  };

  const viewAppointment = (appointment: Appointment) => {
    setCurrentAppointment(appointment);
    setIsViewModalOpen(true);
  };

  const formatAppointmentDate = (dateString: string) => {
    const date = new Date(dateString);
    return format(date, "dd/MM/yyyy");
  };

  const dayAppointments = getDayAppointments();

  const getAppointmentStatusBadge = (status: Appointment["status"], isReminded: boolean) => {
    switch (status) {
      case "scheduled":
        return (
          <div className="flex flex-col items-end gap-1">
            <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">Agendado</Badge>
            {isReminded && (
              <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 text-xs">
                Lembrete enviado
              </Badge>
            )}
          </div>
        );
      case "completed":
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Conclu√≠do</Badge>;
      case "canceled":
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">Cancelado</Badge>;
      default:
        return null;
    }
  };

  // Count appointments by status for statistics
  const getAppointmentStats = () => {
    const stats = {
      total: appointments.length,
      scheduled: appointments.filter(apt => apt.status === "scheduled").length,
      completed: appointments.filter(apt => apt.status === "completed").length,
      canceled: appointments.filter(apt => apt.status === "canceled").length
    };
    return stats;
  };

  const stats = getAppointmentStats();

  return (
    <DashboardLayout title="Agenda">
      <div className="space-y-6">
        {/* Statistics Overview */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 md:gap-4">
          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-3 md:p-4">
              <div className="flex justify-between">
                <p className="text-sm text-muted-foreground">Total</p>
                <span className="text-lg font-semibold">{stats.total}</span>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-3 md:p-4">
              <div className="flex justify-between">
                <p className="text-sm text-muted-foreground">Agendados</p>
                <span className="text-lg font-semibold text-blue-600">{stats.scheduled}</span>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-3 md:p-4">
              <div className="flex justify-between">
                <p className="text-sm text-muted-foreground">Conclu√≠dos</p>
                <span className="text-lg font-semibold text-green-600">{stats.completed}</span>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-3 md:p-4">
              <div className="flex justify-between">
                <p className="text-sm text-muted-foreground">Cancelados</p>
                <span className="text-lg font-semibold text-red-600">{stats.canceled}</span>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Calendar and new appointment button */}
          <Card className="lg:col-span-1">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-medium flex justify-between items-center">
                <span>Calend√°rio</span>
                <Button 
                  size="sm" 
                  onClick={() => setIsCreateModalOpen(true)} 
                  className="h-8"
                >
                  <Plus className="mr-1 h-4 w-4" /> Novo
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col items-center">
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={handleDateSelect}
                  className={cn("p-3 pointer-events-auto w-full")}
                  classNames={{
                    day_selected: "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
                    day_today: "bg-accent text-accent-foreground"
                  }}
                />
              </div>
            </CardContent>
          </Card>

          {/* Appointments list for selected day */}
          <Card className="lg:col-span-2">
            <CardHeader className="pb-3">
              <CardTitle className="text-lg font-medium">
                {date ? `Compromissos: ${format(date, "dd/MM/yyyy")}` : "Selecione uma data"}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {dayAppointments.length > 0 ? (
                <div className="space-y-4">
                  {dayAppointments.map((appointment) => (
                    <div 
                      key={appointment.id}
                      className={cn(
                        "p-4 border rounded-lg cursor-pointer transition-colors",
                        appointment.status === "canceled" ? "bg-gray-50 dark:bg-gray-800/50 border-gray-200 dark:border-gray-700" : "hover:border-primary/50",
                        appointment.status === "completed" ? "bg-green-50 dark:bg-green-900/20 border-green-100 dark:border-green-900/30" : ""
                      )}
                      onClick={() => viewAppointment(appointment)}
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <h3 className="font-medium">{appointment.title}</h3>
                          <div className="text-sm text-muted-foreground mt-1">
                            <div className="flex items-center">
                              <Clock className="h-3.5 w-3.5 mr-1" />
                              <span>{appointment.time} ({appointment.duration} min)</span>
                            </div>
                            <div className="flex items-center mt-1">
                              <User className="h-3.5 w-3.5 mr-1" />
                              <span>{appointment.clientName}</span>
                            </div>
                          </div>
                        </div>
                        <div>
                          {getAppointmentStatusBadge(appointment.status, appointment.isReminded)}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-64 text-muted-foreground">
                  <Calendar className="h-12 w-12 stroke-1 mb-2 opacity-30" />
                  <p>Nenhum compromisso para esta data</p>
                  <Button 
                    variant="link" 
                    onClick={() => setIsCreateModalOpen(true)}
                    className="mt-2"
                  >
                    Adicionar compromisso
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modal for creating new appointment */}
      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
        <DialogContent className={cn("sm:max-w-[500px]", isMobile && "w-[95%] max-w-[95%]")}>
          <DialogHeader>
            <DialogTitle>Novo Compromisso</DialogTitle>
            <DialogDescription>
              Agende um novo compromisso
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-2">
            <div className="grid gap-2">
              <Label htmlFor="title">T√≠tulo</Label>
              <Input
                id="title"
                placeholder="Ex: Reuni√£o de apresenta√ß√£o"
                value={newAppointment.title || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, title: e.target.value })}
              />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="grid gap-2">
                <Label htmlFor="date">Data</Label>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      id="date"
                      variant="outline"
                      className={cn(
                        "justify-start text-left font-normal",
                        !date && "text-muted-foreground"
                      )}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {date ? format(date, "dd/MM/yyyy") : "Selecione uma data"}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0" align="start">
                    <Calendar
                      mode="single"
                      selected={date}
                      onSelect={setDate}
                      initialFocus
                      className={cn("p-3 pointer-events-auto")}
                    />
                  </PopoverContent>
                </Popover>
              </div>

              <div className="grid gap-2">
                <Label htmlFor="time">Hor√°rio</Label>
                <Select 
                  value={newAppointment.time || "14:00"}
                  onValueChange={(value) => setNewAppointment({ ...newAppointment, time: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione um hor√°rio" />
                  </SelectTrigger>
                  <SelectContent>
                    {TIME_SLOTS.map((time) => (
                      <SelectItem key={time} value={time}>{time}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid gap-2">
              <Label htmlFor="duration">Dura√ß√£o</Label>
              <Select 
                value={String(newAppointment.duration || "30")}
                onValueChange={(value) => setNewAppointment({ ...newAppointment, duration: parseInt(value) })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecione a dura√ß√£o" />
                </SelectTrigger>
                <SelectContent>
                  {DURATIONS.map((duration) => (
                    <SelectItem key={duration.value} value={String(duration.value)}>
                      {duration.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="grid gap-2">
              <Label htmlFor="clientName">Nome do Cliente</Label>
              <Input 
                id="clientName" 
                placeholder="Nome do cliente"
                value={newAppointment.clientName || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, clientName: e.target.value })}
              />
            </div>

            <div className="grid gap-2">
              <Label htmlFor="clientPhone">Telefone do Cliente</Label>
              <Input 
                id="clientPhone" 
                placeholder="+55 (00) 00000-0000"
                value={newAppointment.clientPhone || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, clientPhone: e.target.value })}
              />
            </div>

            <div className="grid gap-2">
              <Label htmlFor="notes">Observa√ß√µes</Label>
              <Textarea 
                id="notes" 
                placeholder="Adicione notas ou observa√ß√µes sobre o compromisso"
                rows={3}
                value={newAppointment.notes || ""}
                onChange={(e) => setNewAppointment({ ...newAppointment, notes: e.target.value })}
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCreateModalOpen(false)}>
              Cancelar
            </Button>
            <Button onClick={handleCreateAppointment}>
              Agendar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Modal for viewing/editing appointment */}
      <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>
        <DialogContent className={cn("sm:max-w-[500px]", isMobile && "w-[95%] max-w-[95%]")}>
          {currentAppointment && (
            <>
              <DialogHeader>
                <div className="flex items-center justify-between">
                  <DialogTitle>{currentAppointment.title}</DialogTitle>
                  {getAppointmentStatusBadge(currentAppointment.status, currentAppointment.isReminded)}
                </div>
              </DialogHeader>
    
              <div className="space-y-4 py-2">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Data</p>
                    <p>{formatAppointmentDate(currentAppointment.date)}</p>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Hor√°rio</p>
                    <p>{currentAppointment.time} ({currentAppointment.duration} min)</p>
                  </div>
                </div>
    
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Cliente</p>
                  <p>{currentAppointment.clientName}</p>
                </div>
    
                <div>
                  <p className="text-sm font-medium text-muted-foreground">Telefone</p>
                  <p>{currentAppointment.clientPhone}</p>
                </div>
    
                {currentAppointment.notes && (
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Observa√ß√µes</p>
                    <p className="text-sm">{currentAppointment.notes}</p>
                  </div>
                )}
              </div>
    
              <DialogFooter>
                {currentAppointment.status === "scheduled" && (
                  <>
                    <Button 
                      variant="outline" 
                      className="border-red-300 hover:bg-red-50 text-red-600 dark:hover:bg-red-900/20" 
                      onClick={() => handleCancelAppointment(currentAppointment.id)}
                    >
                      Cancelar Compromisso
                    </Button>
                    
                    {!currentAppointment.isReminded && (
                      <Button 
                        variant="outline" 
                        className="border-blue-300 text-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900/20"
                        onClick={() => handleSendReminder(currentAppointment.id)}
                      >
                        <MessageSquare className="h-4 w-4 mr-1" />
                        Enviar Lembrete
                      </Button>
                    )}
                    
                    <Button onClick={() => handleCompleteAppointment(currentAppointment.id)}>
                      Concluir
                    </Button>
                  </>
                )}
                
                {currentAppointment.status !== "scheduled" && (
                  <Button variant="outline" onClick={() => setIsViewModalOpen(false)}>
                    Fechar
                  </Button>
                )}
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/customer/AIAgentConfig.tsx
================================================================================\n

import { useState } from "react";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { 
  Card, 
  CardHeader, 
  CardTitle, 
  CardDescription, 
  CardContent, 
  CardFooter
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog";
import { 
  Form, 
  FormControl, 
  FormDescription, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage
} from "@/components/ui/form";
import { 
  Bot, 
  Plus, 
  MessageSquare, 
  Mic, 
  Settings, 
  Upload, 
  Download, 
  AlertTriangle,
  Save
} from "lucide-react";
import { toast } from "sonner";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { AgentConfig } from "@/types";

// Esquema de valida√ß√£o para o formul√°rio do agente
const agentFormSchema = z.object({
  name: z.string().min(2, {
    message: "O nome do agente deve ter pelo menos 2 caracteres.",
  }),
  instructions: z.string().min(10, {
    message: "As instru√ß√µes devem ter pelo menos 10 caracteres.",
  }),
  openAIApiKey: z.string().optional(),
  enableVoice: z.boolean().default(false),
  voiceModel: z.string().optional(),
  personalityType: z.enum(["informative", "friendly", "professional", "creative"]),
  knowledgeBase: z.string().optional(),
  maxResponseTokens: z.number().int().min(100).max(4000).default(1500),
  temperature: z.number().min(0).max(2).default(0.7),
});

// Dados simulados de configura√ß√£o de agentes
const MOCK_AGENT_CONFIGS: AgentConfig[] = [
  {
    id: "agent-1",
    name: "Atendente Virtual",
    instructions: "Voc√™ √© um atendente virtual para a Padaria S√£o Jos√©. Responda perguntas sobre nossos produtos, hor√°rios de funcionamento (Segunda a S√°bado, 6h √†s 20h, Domingo 7h √†s 13h) e promo√ß√µes. Seja cordial e use uma linguagem simples e amig√°vel. N√£o fa√ßa entregas em domic√≠lio e n√£o forne√ßa informa√ß√µes sobre a concorr√™ncia.",
    openAIApiKey: "sk-........",
    enableVoice: false,
    personalityType: "friendly",
    maxResponseTokens: 1500,
    temperature: 0.7,
    isActive: true,
    createdAt: "2023-03-15T08:30:00Z",
    updatedAt: "2023-05-10T14:20:00Z",
    messageCount: 3450,
    avgResponseTime: 2.3
  },
  {
    id: "agent-2",
    name: "Assistente de Vendas",
    instructions: "Voc√™ √© um assistente de vendas especializado em produtos de panifica√ß√£o. Ajude os clientes a escolherem os produtos certos, sugira combina√ß√µes e explique os ingredientes quando solicitado. Evite falar sobre pre√ßos espec√≠ficos, pois eles podem variar. Encaminhe pedidos grandes para o gerente.",
    openAIApiKey: "sk-........",
    enableVoice: true,
    voiceModel: "eleven_monolingual_v1",
    personalityType: "professional",
    knowledgeBase: "catalogo-produtos.pdf",
    maxResponseTokens: 2000,
    temperature: 0.5,
    isActive: true,
    createdAt: "2023-04-20T10:15:00Z",
    updatedAt: "2023-05-12T09:45:00Z",
    messageCount: 1280,
    avgResponseTime: 3.1,
    associatedWhatsAppId: "conn-2"
  }
];

// Lista simulada de conex√µes WhatsApp dispon√≠veis para associar
const MOCK_WHATSAPP_CONNECTIONS = [
  { id: "conn-1", name: "Atendimento Principal", phoneNumber: "+5511999991111" },
  { id: "conn-2", name: "Vendas", phoneNumber: "+5511999992222" },
  { id: "conn-3", name: "Agendamentos", phoneNumber: "+5511999994444" },
];

export default function AIAgentConfig() {
  const [agentConfigs, setAgentConfigs] = useState<AgentConfig[]>(MOCK_AGENT_CONFIGS);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [currentAgentId, setCurrentAgentId] = useState<string | null>(null);
  const [isTestModalOpen, setIsTestModalOpen] = useState(false);
  const [testMessage, setTestMessage] = useState("");
  const [testResponse, setTestResponse] = useState("");
  const [isResponding, setIsResponding] = useState(false);
  const [showApiKeyWarning, setShowApiKeyWarning] = useState(true);
  
  // Obt√©m o agente atual para edi√ß√£o ou teste
  const currentAgent = currentAgentId 
    ? agentConfigs.find(agent => agent.id === currentAgentId) 
    : null;

  // Inst√¢ncia de formul√°rio usando React Hook Form + Zod
  const form = useForm<z.infer<typeof agentFormSchema>>({
    resolver: zodResolver(agentFormSchema),
    defaultValues: {
      name: currentAgent?.name || "",
      instructions: currentAgent?.instructions || "",
      openAIApiKey: currentAgent?.openAIApiKey || "",
      enableVoice: currentAgent?.enableVoice || false,
      voiceModel: currentAgent?.voiceModel || "",
      personalityType: currentAgent?.personalityType || "friendly",
      knowledgeBase: currentAgent?.knowledgeBase || "",
      maxResponseTokens: currentAgent?.maxResponseTokens || 1500,
      temperature: currentAgent?.temperature || 0.7,
    },
  });

  // Atualiza os valores do formul√°rio quando o agente atual muda
  const updateFormValues = () => {
    if (currentAgent) {
      form.reset({
        name: currentAgent.name,
        instructions: currentAgent.instructions,
        openAIApiKey: currentAgent.openAIApiKey,
        enableVoice: currentAgent.enableVoice,
        voiceModel: currentAgent.voiceModel,
        personalityType: currentAgent.personalityType,
        knowledgeBase: currentAgent.knowledgeBase,
        maxResponseTokens: currentAgent.maxResponseTokens,
        temperature: currentAgent.temperature,
      });
    } else {
      form.reset({
        name: "",
        instructions: "",
        openAIApiKey: "",
        enableVoice: false,
        voiceModel: "",
        personalityType: "friendly",
        knowledgeBase: "",
        maxResponseTokens: 1500,
        temperature: 0.7,
      });
    }
  };

  // Fun√ß√£o para criar ou atualizar agente
  const onSubmit = (values: z.infer<typeof agentFormSchema>) => {
    if (isEditModalOpen && currentAgentId) {
      // Atualizar agente existente
      const updatedAgents = agentConfigs.map(agent => {
        if (agent.id === currentAgentId) {
          return {
            ...agent,
            ...values,
            updatedAt: new Date().toISOString()
          };
        }
        return agent;
      });
      
      setAgentConfigs(updatedAgents);
      setIsEditModalOpen(false);
      toast.success("Agente de IA atualizado com sucesso!");
    } else {
      // Criar novo agente - garantindo que todos os campos obrigat√≥rios estejam presentes
      const newAgent: AgentConfig = {
        id: `agent-${Date.now()}`,
        name: values.name,
        instructions: values.instructions,
        openAIApiKey: values.openAIApiKey || undefined,
        enableVoice: values.enableVoice,
        voiceModel: values.voiceModel,
        personalityType: values.personalityType,
        knowledgeBase: values.knowledgeBase,
        maxResponseTokens: values.maxResponseTokens,
        temperature: values.temperature,
        isActive: true,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        messageCount: 0,
        avgResponseTime: 0
      };
      
      setAgentConfigs([...agentConfigs, newAgent]);
      setIsCreateModalOpen(false);
      toast.success("Novo agente de IA criado com sucesso!");
    }
    
    setCurrentAgentId(null);
  };

  // Abrir modal para editar agente
  const handleEditAgent = (agentId: string) => {
    setCurrentAgentId(agentId);
    setIsEditModalOpen(true);
    setTimeout(updateFormValues, 100);
  };

  // Abrir modal para testar agente
  const handleTestAgent = (agentId: string) => {
    setCurrentAgentId(agentId);
    setTestMessage("");
    setTestResponse("");
    setIsTestModalOpen(true);
  };

  // Simular resposta de IA
  const handleTestAIResponse = () => {
    if (!testMessage.trim()) {
      toast.error("Digite uma mensagem para testar o agente.");
      return;
    }

    setIsResponding(true);
    
    // Simula tempo de resposta da API
    setTimeout(() => {
      setTestResponse(`Esta √© uma resposta simulada do agente "${currentAgent?.name}" para a sua pergunta. Em uma integra√ß√£o real, esta resposta seria gerada pela OpenAI com base nas instru√ß√µes configuradas para o agente.`);
      setIsResponding(false);
    }, 1500);
  };

  // Alternar status ativo do agente
  const toggleAgentActive = (agentId: string) => {
    const updatedAgents = agentConfigs.map(agent => {
      if (agent.id === agentId) {
        return {
          ...agent,
          isActive: !agent.isActive,
          updatedAt: new Date().toISOString()
        };
      }
      return agent;
    });
    
    setAgentConfigs(updatedAgents);
    const agent = updatedAgents.find(a => a.id === agentId);
    toast.success(`Agente ${agent?.name} ${agent?.isActive ? 'ativado' : 'desativado'} com sucesso!`);
  };

  // Remover agente
  const handleDeleteAgent = (agentId: string) => {
    setAgentConfigs(agentConfigs.filter(agent => agent.id !== agentId));
    toast.success("Agente de IA removido com sucesso!");
  };

  return (
    <DashboardLayout title="Configura√ß√£o de Agentes de IA">
      <div className="space-y-6">
        {/* Aviso de chave API */}
        {showApiKeyWarning && (
          <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 dark:bg-yellow-900/20 dark:border-yellow-600">
            <div className="flex">
              <div className="flex-shrink-0">
                <AlertTriangle className="h-5 w-5 text-yellow-400" aria-hidden="true" />
              </div>
              <div className="ml-3">
                <p className="text-sm text-yellow-700 dark:text-yellow-200">
                  Para utilizar agentes de IA, √© necess√°rio fornecer uma chave de API da OpenAI. 
                  Voc√™ pode criar sua chave na <a href="https://platform.openai.com/api-keys" target="_blank" rel="noopener noreferrer" className="font-medium underline hover:text-yellow-800 dark:hover:text-yellow-100">plataforma OpenAI</a>.
                </p>
              </div>
              <div className="ml-auto pl-3">
                <button
                  type="button"
                  className="inline-flex rounded-md bg-yellow-50 p-1.5 text-yellow-500 hover:bg-yellow-100 dark:bg-yellow-900/20 dark:hover:bg-yellow-900/40"
                  onClick={() => setShowApiKeyWarning(false)}
                >
                  <span className="sr-only">Dispensar</span>
                  <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Estat√≠sticas e controles */}
        <div className="flex flex-col md:flex-row items-center justify-between gap-4">
          <div className="flex items-center gap-4 w-full md:w-auto">
            <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm border flex items-center gap-2">
              <Bot className="text-primary h-5 w-5" />
              <div>
                <p className="text-sm text-muted-foreground">Agentes Ativos</p>
                <p className="font-medium">
                  {agentConfigs.filter(agent => agent.isActive).length} <span className="text-xs text-muted-foreground">/ {agentConfigs.length} total</span>
                </p>
              </div>
            </div>
            
            <div className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm border flex items-center gap-2">
              <MessageSquare className="text-blue-500 h-5 w-5" />
              <div>
                <p className="text-sm text-muted-foreground">Mensagens Processadas</p>
                <p className="font-medium">
                  {agentConfigs.reduce((acc, agent) => acc + agent.messageCount, 0).toLocaleString()}
                </p>
              </div>
            </div>
          </div>
          
          <Button onClick={() => {
            setCurrentAgentId(null);
            updateFormValues();
            setIsCreateModalOpen(true);
          }}>
            <Plus className="mr-2 h-4 w-4" />
            Novo Agente de IA
          </Button>
        </div>

        {/* Grid de agentes */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {agentConfigs.map(agent => (
            <Card key={agent.id} className={`overflow-hidden ${!agent.isActive ? 'opacity-70' : ''}`}>
              <CardHeader className="pb-2">
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle className="text-xl flex items-center gap-2">
                      {agent.name}
                      {agent.enableVoice && (
                        <Mic className="h-4 w-4 text-blue-500" aria-label="Com suporte a voz" />
                      )}
                    </CardTitle>
                    <CardDescription>
                      {agent.personalityType === "friendly" && "Personalidade amig√°vel"}
                      {agent.personalityType === "professional" && "Personalidade profissional"}
                      {agent.personalityType === "informative" && "Personalidade informativa"}
                      {agent.personalityType === "creative" && "Personalidade criativa"}
                      {agent.associatedWhatsAppId && (
                        <span className="ml-2">‚Ä¢ Conectado ao WhatsApp</span>
                      )}
                    </CardDescription>
                  </div>
                  <div className="flex items-center">
                    <div className={`w-3 h-3 rounded-full mr-2 ${agent.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                    <span className="text-xs text-muted-foreground">{agent.isActive ? 'Ativo' : 'Inativo'}</span>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent>
                <div className="space-y-3 text-sm">
                  <div>
                    <h4 className="font-medium mb-1">Instru√ß√µes:</h4>
                    <p className="text-muted-foreground line-clamp-3">{agent.instructions}</p>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <span className="text-muted-foreground">Mensagens:</span>
                      <p className="font-medium">{agent.messageCount.toLocaleString()}</p>
                    </div>
                    <div>
                      <span className="text-muted-foreground">Tempo de resposta:</span>
                      <p className="font-medium">{agent.avgResponseTime}s</p>
                    </div>
                    {agent.knowledgeBase && (
                      <div className="col-span-2">
                        <span className="text-muted-foreground">Base de conhecimento:</span>
                        <p className="font-medium">{agent.knowledgeBase}</p>
                      </div>
                    )}
                  </div>
                  
                  {agent.associatedWhatsAppId && (
                    <div className="flex items-center p-2 bg-gray-50 dark:bg-gray-800 rounded-md">
                      <div className="mr-2 p-1 bg-green-100 dark:bg-green-900/30 rounded">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-green-600 dark:text-green-400" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M17.6 6.31999C16.8669 5.58141 15.9943 4.99596 15.033 4.59767C14.0716 4.19938 13.0406 3.99684 12 3.99999C10.6089 4.00135 9.24248 4.36819 8.03771 5.06377C6.83294 5.75935 5.83203 6.75926 5.13534 7.96335C4.43866 9.16745 4.07055 10.5335 4.06776 11.9246C4.06497 13.3158 4.42761 14.6832 5.12 15.89L4 20L8.2 18.9C9.35975 19.5452 10.6629 19.8891 11.99 19.9C14.0997 19.9 16.124 19.0563 17.6242 17.556C19.1245 16.0557 19.9683 14.0314 19.9683 11.9217C19.9683 9.81208 19.1245 7.78775 17.6242 6.28752L17.6 6.31999ZM12 18.53C10.8177 18.5308 9.65701 18.213 8.64 17.61L8.4 17.46L5.91 18.12L6.57 15.69L6.41 15.44C5.55925 14.0667 5.24174 12.4602 5.50762 10.8906C5.7735 9.32108 6.6009 7.89757 7.84162 6.84853C9.08233 5.79948 10.6567 5.19036 12.2921 5.11775C13.9275 5.04513 15.5535 5.51361 16.89 6.43999C18.2171 7.34265 19.1834 8.64968 19.6168 10.1363C20.0502 11.623 19.9239 13.2145 19.2593 14.622C18.5947 16.0294 17.437 17.1728 16.0186 17.8193C14.6003 18.4659 13.0022 18.5694 11.51 18.11H11.5"></path>
                        </svg>
                      </div>
                      <div>
                        <p className="text-xs font-medium">Conectado ao WhatsApp</p>
                        <p className="text-xs text-muted-foreground">
                          {MOCK_WHATSAPP_CONNECTIONS.find(c => c.id === agent.associatedWhatsAppId)?.name || "Conex√£o WhatsApp"}
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
              
              <CardFooter className="flex gap-2 pt-2">
                <Button 
                  variant="default" 
                  size="sm"
                  onClick={() => handleTestAgent(agent.id)}
                >
                  <MessageSquare className="mr-1 h-4 w-4" />
                  Testar
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => handleEditAgent(agent.id)}
                >
                  <Settings className="mr-1 h-4 w-4" />
                  Configurar
                </Button>
                <Button 
                  variant={agent.isActive ? "ghost" : "secondary"}
                  size="sm"
                  className="ml-auto"
                  onClick={() => toggleAgentActive(agent.id)}
                >
                  {agent.isActive ? "Desativar" : "Ativar"}
                </Button>
              </CardFooter>
            </Card>
          ))}

          {/* Card para criar novo agente */}
          <Card className="border-dashed border-2 flex flex-col items-center justify-center p-6 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors cursor-pointer min-h-[300px]" onClick={() => {
            setCurrentAgentId(null);
            updateFormValues();
            setIsCreateModalOpen(true);
          }}>
            <Bot size={48} className="text-muted-foreground mb-4" />
            <h3 className="text-lg font-medium mb-2">Criar novo agente de IA</h3>
            <p className="text-center text-muted-foreground mb-4">Configure um agente de IA personalizado para atender √†s necessidades espec√≠ficas do seu neg√≥cio.</p>
            <Button variant="outline">
              <Plus className="mr-2 h-4 w-4" />
              Novo Agente
            </Button>
          </Card>
        </div>
      </div>

      {/* Modal para criar/editar agente */}
      <Dialog 
        open={isCreateModalOpen || isEditModalOpen} 
        onOpenChange={(open) => {
          if (!open) {
            isCreateModalOpen ? setIsCreateModalOpen(false) : setIsEditModalOpen(false);
            setCurrentAgentId(null);
          }
        }}
      >
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{isEditModalOpen ? "Editar Agente de IA" : "Criar Novo Agente de IA"}</DialogTitle>
            <DialogDescription>
              Configure as instru√ß√µes e comportamento do seu agente de IA. Defina como ele deve interagir com os clientes.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nome do agente</FormLabel>
                    <FormControl>
                      <Input placeholder="Ex: Atendente Virtual" {...field} />
                    </FormControl>
                    <FormDescription>
                      Um nome descritivo para identificar o agente.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="instructions"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Instru√ß√µes para o agente</FormLabel>
                    <FormControl>
                      <textarea
                        className="flex min-h-[120px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                        placeholder="Explique em detalhes como o agente deve se comportar e responder..."
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Instru√ß√µes detalhadas que guiar√£o o comportamento do agente. Seja espec√≠fico sobre o tom, informa√ß√µes que pode compartilhar e como lidar com diferentes situa√ß√µes.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="personalityType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Tipo de personalidade</FormLabel>
                    <FormControl>
                      <select
                        className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                        {...field}
                      >
                        <option value="friendly">Amig√°vel</option>
                        <option value="professional">Profissional</option>
                        <option value="informative">Informativo</option>
                        <option value="creative">Criativo</option>
                      </select>
                    </FormControl>
                    <FormDescription>
                      Define o estilo de comunica√ß√£o geral do agente.
                    </FormDescription>
                  </FormItem>
                )}
              />
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="maxResponseTokens"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Limite de tokens</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="100" 
                          max="4000" 
                          step="100"
                          {...field}
                          onChange={e => field.onChange(parseInt(e.target.value))}
                        />
                      </FormControl>
                      <FormDescription>
                        Comprimento m√°ximo das respostas (100-4000).
                      </FormDescription>
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="temperature"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Temperatura</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0" 
                          max="2" 
                          step="0.1"
                          {...field}
                          onChange={e => field.onChange(parseFloat(e.target.value))}
                        />
                      </FormControl>
                      <FormDescription>
                        Criatividade (0-2, valores maiores = mais criativo).
                      </FormDescription>
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={form.control}
                name="openAIApiKey"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Chave de API OpenAI</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="sk-..." {...field} />
                    </FormControl>
                    <FormDescription>
                      Chave secreta da API OpenAI para este agente. Deixe em branco para usar a chave padr√£o do sistema.
                    </FormDescription>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="enableVoice"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                    <div>
                      <div className="font-medium leading-none">Habilitar reconhecimento de voz</div>
                      <p className="text-sm text-muted-foreground">
                        Permite que o agente processe mensagens de √°udio usando a Whisper API.
                      </p>
                    </div>
                    <FormControl>
                      <input
                        type="checkbox"
                        checked={field.value}
                        onChange={field.onChange}
                        className="h-4 w-4"
                      />
                    </FormControl>
                  </FormItem>
                )}
              />
              
              {form.watch("enableVoice") && (
                <FormField
                  control={form.control}
                  name="voiceModel"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Modelo de voz</FormLabel>
                      <FormControl>
                        <select
                          className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                          {...field}
                        >
                          <option value="">Selecione um modelo de voz</option>
                          <option value="eleven_monolingual_v1">Eleven Monolingual v1</option>
                          <option value="eleven_multilingual_v1">Eleven Multilingual v1</option>
                          <option value="eleven_multilingual_v2">Eleven Multilingual v2</option>
                        </select>
                      </FormControl>
                      <FormDescription>
                        Modelo usado para s√≠ntese de voz em respostas de √°udio.
                      </FormDescription>
                    </FormItem>
                  )}
                />
              )}
              
              <FormField
                control={form.control}
                name="knowledgeBase"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Base de conhecimento</FormLabel>
                    <div className="flex gap-2">
                      <FormControl>
                        <Input 
                          placeholder="Selecione um arquivo ou insira URL"
                          {...field}
                          disabled
                          className="flex-1"
                        />
                      </FormControl>
                      <Button type="button" variant="outline" size="icon">
                        <Upload className="h-4 w-4" />
                      </Button>
                    </div>
                    <FormDescription>
                      Opcional: Adicione uma base de conhecimento para seu agente (PDF, DOC, URL).
                    </FormDescription>
                  </FormItem>
                )}
              />

              {isEditModalOpen && currentAgentId && (
                <div className="space-y-2 pt-2">
                  <label className="text-sm font-medium">Conex√£o WhatsApp</label>
                  <select
                    className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                  >
                    <option value="">Sem conex√£o WhatsApp</option>
                    {MOCK_WHATSAPP_CONNECTIONS.map(conn => (
                      <option 
                        key={conn.id} 
                        value={conn.id}
                        selected={currentAgent?.associatedWhatsAppId === conn.id}
                      >
                        {conn.name} ({conn.phoneNumber})
                      </option>
                    ))}
                  </select>
                  <p className="text-xs text-muted-foreground">
                    Associe este agente a uma conex√£o WhatsApp para responder mensagens automaticamente.
                  </p>
                </div>
              )}

              <DialogFooter className="flex flex-col-reverse sm:flex-row sm:justify-between gap-2">
                <Button 
                  type="button"
                  variant="destructive" 
                  className="sm:mr-auto"
                  onClick={() => {
                    if (isEditModalOpen && currentAgentId) {
                      handleDeleteAgent(currentAgentId);
                      setIsEditModalOpen(false);
                    }
                  }}
                >
                  Excluir agente
                </Button>
                
                <div className="flex gap-2">
                  <Button 
                    type="button"
                    variant="outline" 
                    onClick={() => {
                      isCreateModalOpen ? setIsCreateModalOpen(false) : setIsEditModalOpen(false);
                      setCurrentAgentId(null);
                    }}
                  >
                    Cancelar
                  </Button>
                  <Button type="submit">
                    <Save className="mr-2 h-4 w-4" />
                    {isEditModalOpen ? "Salvar altera√ß√µes" : "Criar agente"}
                  </Button>
                </div>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>

      {/* Modal para testar agente */}
      <Dialog open={isTestModalOpen} onOpenChange={setIsTestModalOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Testar Agente de IA</DialogTitle>
            <DialogDescription>
              Digite uma mensagem para ver como o agente "{currentAgent?.name}" responder√°.
            </DialogDescription>
          </DialogHeader>
          
          <div className="py-4">
            <div className="border rounded-lg overflow-hidden mb-4">
              <div className="bg-muted p-3">
                <h4 className="text-sm font-medium">Conversa de Teste</h4>
              </div>
              <div className="p-4 max-h-[300px] overflow-y-auto space-y-4">
                {testMessage && (
                  <div className="flex justify-end">
                    <div className="bg-primary text-primary-foreground p-3 rounded-lg max-w-[80%]">
                      <p>{testMessage}</p>
                    </div>
                  </div>
                )}
                
                {isResponding && (
                  <div className="flex">
                    <div className="bg-muted p-3 rounded-lg max-w-[80%]">
                      <div className="flex space-x-2">
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                        <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: "0.4s" }}></div>
                      </div>
                    </div>
                  </div>
                )}
                
                {testResponse && (
                  <div className="flex">
                    <div className="bg-muted p-3 rounded-lg max-w-[80%]">
                      <p>{testResponse}</p>
                    </div>
                  </div>
                )}
                
                {!testMessage && !testResponse && !isResponding && (
                  <div className="text-center text-muted-foreground py-8">
                    <Bot className="h-8 w-8 mx-auto mb-2 opacity-50" />
                    <p>Digite uma mensagem para iniciar a conversa de teste.</p>
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex gap-2">
              <Input 
                placeholder="Digite uma mensagem para testar..." 
                value={testMessage}
                onChange={(e) => setTestMessage(e.target.value)}
                disabled={isResponding}
              />
              <Button 
                onClick={handleTestAIResponse}
                disabled={!testMessage.trim() || isResponding}
              >
                Enviar
              </Button>
            </div>
            
            <div className="mt-4 text-xs text-muted-foreground">
              <p className="flex items-center">
                <Download className="inline h-3 w-3 mr-1" />
                Modelo: {currentAgent?.voiceModel || "GPT-4"}
              </p>
              <p>Este √© um ambiente de teste. As mensagens n√£o ser√£o salvas ou enviadas para clientes reais.</p>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsTestModalOpen(false)}>
              Fechar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/Dashboard.tsx
================================================================================\n

import { useAuth } from "@/context/AuthContext";
import DashboardLayout from "@/components/layout/DashboardLayout";
import { DashboardStats } from "@/components/dashboard/DashboardStats";
import { DashboardMainStats } from "@/components/dashboard/DashboardMainStats";
import { DashboardCharts } from "@/components/dashboard/DashboardCharts";
import { useDashboardData } from "@/hooks/useDashboardData";
import { useEffect } from "react";

export default function Dashboard() {
  const { user } = useAuth();
  const {
    analytics,
    topAgents,
    topFranchisees,
    weeklyMessages,
    isLoadingResults,
    isInitialLoading,
    handleRefreshResults
  } = useDashboardData();

  // For√ßa re-renderiza√ß√£o quando necess√°rio para preservar layout
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        // Re-for√ßa o layout quando a p√°gina volta a ficar vis√≠vel
        setTimeout(() => {
          window.dispatchEvent(new Event('resize'));
        }, 100);
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, []);

  // Show loading only during initial load
  if (!user || isInitialLoading) {
    return (
      <DashboardLayout title="Dashboard">
        <div className="flex items-center justify-center h-64 bg-background">
          <div className="animate-pulse text-primary">Carregando...</div>
        </div>
      </DashboardLayout>
    );
  }

  // Ensure analytics is available before rendering
  if (!analytics) {
    return (
      <DashboardLayout title="Dashboard">
        <div className="flex items-center justify-center h-64 bg-background">
          <div className="animate-pulse text-primary">Carregando dados...</div>
        </div>
      </DashboardLayout>
    );
  }

  return (
    <DashboardLayout title="Dashboard">
      <div className="space-y-6 min-h-full bg-background" translate="no">
        <DashboardStats 
          userRole={user.role}
          analytics={analytics}
          isLoadingResults={isLoadingResults}
          onRefresh={handleRefreshResults}
        />
        
        <DashboardMainStats 
          analytics={analytics}
          isLoadingResults={isLoadingResults}
        />
        
        <DashboardCharts 
          userRole={user.role}
          topAgents={topAgents}
          topFranchisees={topFranchisees}
          weeklyMessages={weeklyMessages}
          isLoadingResults={isLoadingResults}
        />
      </div>
    </DashboardLayout>
  );
}



================================================================================
ARQUIVO: ./src/pages/NotFound.tsx
================================================================================\n
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;



================================================================================
ARQUIVO: ./src/mocks/franchiseeMockData.ts
================================================================================\n

import { Agent, Customer, CustomerPortalAccess } from "@/types";

// Mock data for the current franchisee with plan info
export const MOCK_FRANCHISEE = {
  id: "franchisee1",
  name: "Jo√£o Silva",
  email: "joao@exemplo.com",
  role: "franchisee" as const,
  agentCount: 2,
  revenue: 1500,
  isActive: true,
  createdAt: "2023-01-15",
  customerCount: 5,
  planId: "starter-monthly",
  planType: "monthly" as const,
  planExpiresAt: "2023-12-31"
};

// Mock agents data
export const MOCK_AGENTS: Agent[] = [
  {
    id: "agent1",
    name: "Atendente Virtual",
    sector: "Atendimento ao Cliente",
    prompt: "Voc√™ √© um atendente virtual especializado em responder d√∫vidas sobre produtos e servi√ßos da empresa.",
    isActive: true,
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    customerId: "customer1",
    franchiseeId: "franchisee1",
    openAiKey: "sk-xxxxxxxxxxxxxxxxxxxx",
    whatsappConnected: true,
    messageCount: 2540,
    phoneNumber: "+5511999999999",
    responseTime: 2.3,
    demoUrl: "https://demo.whatsapp.com/agent1"
  },
  {
    id: "agent2",
    name: "Vendedor Virtual",
    sector: "Vendas",
    prompt: "Voc√™ √© um vendedor virtual especializado em oferecer produtos e servi√ßos da empresa.",
    isActive: true,
    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),
    customerId: "customer2",
    franchiseeId: "franchisee1",
    openAiKey: "sk-xxxxxxxxxxxxxxxxxxxx",
    whatsappConnected: true,
    messageCount: 1820,
    phoneNumber: "+5511888888888",
    responseTime: 1.8,
    demoUrl: "https://demo.whatsapp.com/agent2"
  }
];

// Mock customers data
export const MOCK_CUSTOMERS: Customer[] = [
  {
    id: "customer1",
    name: "Cliente Empresa A",
    email: "contato@empresaa.com",
    businessName: "Empresa A",
    role: "customer",
    franchiseeId: "franchisee1",
    agentCount: 2,
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(),
    logo: "https://ui-avatars.com/api/?name=Empresa+A&background=0D8ABC&color=fff",
    document: "12.345.678/0001-90",
    contactPhone: "+5511977777777",
    portalUrl: "https://cliente.plataforma.com/customer1"
  },
  {
    id: "customer2",
    name: "Cliente Empresa B",
    email: "contato@empresab.com",
    businessName: "Empresa B",
    role: "customer",
    franchiseeId: "franchisee1",
    agentCount: 1,
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
    document: "98.765.432/0001-21",
    contactPhone: "+5511966666666"
  }
];



================================================================================
ARQUIVO: ./src/mocks/promptsMockData.ts
================================================================================\n

import { Prompt } from "@/types/prompts";
import { v4 as uuidv4 } from 'uuid';

export const MOCK_PROMPTS: Prompt[] = [
  {
    id: uuidv4(),
    name: "Atendimento Restaurante",
    text: "Voc√™ √© um assistente de atendimento para um restaurante. Voc√™ deve ser educado, prestativo e conhecer o card√°pio completo. Quando os clientes perguntarem sobre pratos, sempre mencione os ingredientes e se h√° op√ß√µes vegetarianas ou veganas dispon√≠veis. Se perguntarem sobre reservas, pe√ßa data, hor√°rio e n√∫mero de pessoas.",
    niche: "Gastronomia",
    createdAt: new Date().toISOString(),
    isDefault: true
  },
  {
    id: uuidv4(),
    name: "Vendedor Imobili√°rio",
    text: "Voc√™ √© um corretor de im√≥veis experiente. Ao conversar com clientes, fa√ßa perguntas sobre o tipo de im√≥vel que procuram, localiza√ß√£o preferida, or√ßamento e necessidades espec√≠ficas como n√∫mero de quartos. Apresente im√≥veis que correspondam √†s necessidades dos clientes e destaque os benef√≠cios de cada propriedade.",
    niche: "Imobili√°rio",
    createdAt: new Date().toISOString(),
    isDefault: true
  },
  {
    id: uuidv4(),
    name: "Suporte T√©cnico E-commerce",
    text: "Voc√™ √© um especialista em suporte t√©cnico para uma loja de e-commerce. Ajude os clientes com problemas de pedidos, rastreamento, devolu√ß√µes e quest√µes t√©cnicas do site. Seja paciente e detalhado nas suas respostas. Se n√£o conseguir resolver o problema, ofere√ßa encaminhar para um especialista humano.",
    niche: "E-commerce",
    createdAt: new Date().toISOString(),
    isDefault: true
  },
  {
    id: uuidv4(),
    name: "Consultor Fitness",
    text: "Voc√™ √© um consultor fitness e nutricional. Ajude os clientes com d√∫vidas sobre exerc√≠cios, dietas e h√°bitos saud√°veis. Pe√ßa informa√ß√µes como idade, objetivos, condi√ß√µes m√©dicas existentes e experi√™ncia pr√©via. Lembre sempre de mencionar que suas orienta√ß√µes s√£o gerais e n√£o substituem a consulta com profissionais de sa√∫de.",
    niche: "Sa√∫de e Bem-estar",
    createdAt: new Date().toISOString(),
    isDefault: true
  },
  {
    id: uuidv4(),
    name: "Assistente de Viagens",
    text: "Voc√™ √© um agente de viagens experiente. Ajude os clientes a planejar suas viagens perguntando sobre destinos desejados, or√ßamento, datas e prefer√™ncias de hospedagem. Ofere√ßa recomenda√ß√µes de atra√ß√µes tur√≠sticas, restaurantes locais e dicas culturais. Tamb√©m informe sobre requisitos de visto quando relevante.",
    niche: "Turismo",
    createdAt: new Date().toISOString(),
    isDefault: true
  }
];



================================================================================
ARQUIVO: ./tailwind.config.ts
================================================================================\n

import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				// Add new chart colors
				chart: {
					blue: 'hsl(var(--chart-blue))',
					'blue-dark': 'hsl(var(--chart-blue-dark))',
					green: 'hsl(var(--chart-green))',
					'green-dark': 'hsl(var(--chart-green-dark))',
					purple: 'hsl(var(--chart-purple))',
					'purple-dark': 'hsl(var(--chart-purple-dark))',
					orange: 'hsl(var(--chart-orange))',
					'orange-dark': 'hsl(var(--chart-orange-dark))',
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				},
				'pulse-slow': {
					'0%, 100%': { opacity: '1' },
					'50%': { opacity: '0.5' }
				},
				'bounce-slow': {
					'0%, 100%': { transform: 'translateY(0)' },
					'50%': { transform: 'translateY(-5px)' }
				},
				'fade-in': {
					from: { opacity: '0' },
					to: { opacity: '1' }
				},
				'slide-in-right': {
					from: { transform: 'translateX(100%)' },
					to: { transform: 'translateX(0)' }
				},
				'slide-in-left': {
					from: { transform: 'translateX(-100%)' },
					to: { transform: 'translateX(0)' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'pulse-slow': 'pulse-slow 3s infinite',
				'bounce-slow': 'bounce-slow 3s infinite',
				'fade-in': 'fade-in 0.3s ease-out',
				'slide-in-right': 'slide-in-right 0.3s ease-out',
				'slide-in-left': 'slide-in-left 0.3s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================================================
ARQUIVO: ./.gitignore
================================================================================\n
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?



================================================================================
ARQUIVO: ./components.json
================================================================================\n
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


================================================================================
ARQUIVO: ./postcss.config.js
================================================================================\n
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================================================
ARQUIVO: ./copy_react_source.sh
================================================================================\n
#!/bin/bash
# ==============================================================================
# --- CONFIGURA√á√ÉO ---
# ==============================================================================

# Nome do arquivo de sa√≠da que conter√° todo o c√≥digo do projeto.
OUTPUT_FILE="dump_codigo_react.txt"

# Nome do projeto (usado no cabe√ßalho do arquivo de sa√≠da).
PROJECT_NAME="React Project"

# ==============================================================================
# --- IN√çCIO DO SCRIPT ---
# ==============================================================================

# Garante que o script funciona a partir do seu diret√≥rio de origem.
cd "$(dirname "$0")"

# Limpa o conte√∫do anterior e adiciona um cabe√ßalho ao arquivo de sa√≠da.
echo "=============================================" > "$OUTPUT_FILE"
echo " DUMP DO PROJETO: $PROJECT_NAME" >> "$OUTPUT_FILE"
echo " GERADO EM: $(date)" >> "$OUTPUT_FILE"
echo "=============================================\n" >> "$OUTPUT_FILE"

echo "Iniciando a c√≥pia do c√≥digo-fonte do projeto React..."

# O comando 'find' busca por arquivos, aplicando as exclus√µes de forma otimizada.
#
# COMO FUNCIONA A EXCLUS√ÉO:
# 1. '-type d \( ... \) -prune': Encontra diret√≥rios com os nomes listados e os "poda" (prune),
#    impedindo que o 'find' entre neles. Esta √© a forma mais eficiente de ignorar grandes
#    √°rvores de diret√≥rios.
#    - Adicionado 'build' (padr√£o do Create React App) e '.next' (padr√£o do Next.js)
# 2. '-o': Significa 'OU'. Se o item n√£o foi podado, a verifica√ß√£o continua.
# 3. '-type f': Garante que estamos processando apenas arquivos.
# 4. '-not -name "..."': Exclui arquivos espec√≠ficos pelo nome.
#    - Adicionado 'yarn.lock', 'pnpm-lock.yaml' e '.env*' para cobrir outros gerenciadores
#      de pacotes e arquivos de ambiente.
# 5. '-print0 | while ...': Trata de forma segura nomes de arquivos com espa√ßos ou caracteres especiais.
find . \
  -type d \( -name "node_modules" -o -name ".git" -o -name "build" -o -name "dist" -o -name ".next" -o -name "coverage" \) -prune \
  -o \
  -type f \
  -not -name "$OUTPUT_FILE" \
  -not -name "package-lock.json" \
  -not -name "yarn.lock" \
  -not -name "pnpm-lock.yaml" \
  -not -name ".DS_Store" \
  -not -name ".env*" \
  -print0 | while IFS= read -r -d $'\0' file; do

    # --- FILTRO DE ARQUIVOS BIN√ÅRIOS ---

    # 1. Verifica√ß√£o r√°pida por extens√£o: Ignora arquivos de imagem, fontes, e bin√°rios comuns.
    #    NOTA: .svg foi REMOVIDO desta lista, pois √© c√≥digo (XML) e relevante para o contexto de UI.
    if [[ "$file" =~ \.(jpg|jpeg|png|gif|bmp|ico|eot|ttf|woff|woff2|otf|mp3|mp4|avi|mov|zip|gz|tar|rar|pdf|doc|docx|xls|xlsx)$ ]]; then
      continue # Pula para o pr√≥ximo arquivo
    fi

    # 2. Verifica√ß√£o pelo conte√∫do: Como um segundo n√≠vel de seguran√ßa, o comando 'file'
    #    analisa o conte√∫do real do arquivo para identificar tipos bin√°rios ou de dados.
    #    Isso evita incluir arquivos bin√°rios que n√£o tenham uma extens√£o comum.
    if file -b --mime-type "$file" | grep -qE 'image|binary|archive|x-dosexec|application/(octet-stream|zip|pdf|msword)'; then
      continue # Pula arquivos identificados como n√£o-texto
    fi

    # --- FIM DO FILTRO ---

    # Se o arquivo passou em todas as verifica√ß√µes, seu conte√∫do √© adicionado ao dump.
    echo "================================================================================" >> "$OUTPUT_FILE"
    echo "ARQUIVO: $file" >> "$OUTPUT_FILE"
    echo "================================================================================\n" >> "$OUTPUT_FILE"

    # 'cat' l√™ o conte√∫do do arquivo e '>>' anexa ao nosso arquivo de sa√≠da.
    cat "$file" >> "$OUTPUT_FILE"

    # Adiciona duas novas linhas para uma melhor separa√ß√£o visual entre os arquivos.
    echo -e "\n\n" >> "$OUTPUT_FILE"
done

echo "Arquivo '$OUTPUT_FILE' gerado com sucesso na raiz do projeto!"


================================================================================
ARQUIVO: ./tsconfig.json
================================================================================\n
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}



================================================================================
ARQUIVO: ./package.json
================================================================================\n
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/supabase-js": "^2.49.10",
    "@tanstack/react-query": "^5.56.2",
    "@types/uuid": "^10.0.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}



================================================================================
ARQUIVO: ./tsconfig.node.json
================================================================================\n
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================================================
ARQUIVO: ./public/robots.txt
================================================================================\n
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /



================================================================================
ARQUIVO: ./tsconfig.app.json
================================================================================\n
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}



